/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.github.hierynomus.license" version "0.15.0"
    id "checkstyle"
    id "io.freefair.lombok" version "5.3.0"
    id "pmd"
    id "com.github.spotbugs" version "4.6.1"
    id "jacoco"
}

sourceCompatibility = 1.15
targetCompatibility = 1.15

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    spotbugs "com.github.spotbugs:spotbugs:4.2.1"

    implementation "com.google.flogger:flogger:0.5.1"
    implementation "com.google.flogger:flogger-system-backend:0.5.1"
}

application {
    // Define the main class for the application.
    mainClass = 'edu.isu.cs.cs2263.examples.fsms.Microwave'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
    }
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion '8.40'
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = "${projectDir}/src/main/java"
}
checkstyleTest {
    source = "${projectDir}src/test/java"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("${rootDir}/docs/javadoc")
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    rulesMinimumPriority = 5
    ruleSets = [
        "category/java/errorprone.xml",
        "category/java/bestpractices.xml"
    ]
}

license {
    header rootProject.file('LICENSE')
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

