/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs.cs2263.library;

import java.util.Scanner;

import static edu.isu.cs.cs2263.library.Library.*;

public class UserInterface {

    private Library library;

    private UserInterface() {
        library = Library.instance();
    }

    public static UserInterface instance() {
        return Holder.INSTANCE;
    }

    private static final class Holder {
        private static final UserInterface INSTANCE = new UserInterface();
    }

    public static void main(String[] args) {
        UserInterface.instance().process();
    }

    public void process() {
        int command;
        help();

        while ((command = getCommand()) != EXIT) {
            switch(command) {
                case ADD_MEMBER:
                    addMember();
                    break;
                case ADD_BOOKS:
                    addBooks();
                    break;
                case ISSUE_BOOKS:
                    issueBooks();
                    break;
                case RETURN_BOOKS:
                    returnBooks();
                    break;
                case RENEW_BOOKS:
                    renewBooks();
                    break;
                case REMOVE_BOOKS:
                    removeBooks();
                    break;
                case PLACE_HOLD:
                    placeHold();
                    break;
                case REMOVE_HOLD:
                    removeHold();
                    break;
                case PROCESS_HOLDS:
                    processHolds();
                    break;
                case PRINT_TRANSACTIONS:
                    printTransactions();
                    break;
                case SAVE_DATA:
                    saveData();
                    break;
                case LOAD_DATA:
                    loadData();
                    break;
                default:
                    help();
                    break;
            }
        }
    }

    private void addMember() {

    }

    private void processHolds() {
    }

    private void removeHold() {

    }

    private void placeHold() {}

    private void issueBooks() {
        Book result;
        String memberID = getToken("Enter member id");
        if (library.searchMembership(memberID) == null) {
            System.out.println("No such member");
            return;
        }
        do {
            String bookID = getToken("Enter book id");
            result = library.issueBook(memberID, bookID);
            if (result != null) {
                System.out.println(result.getTitle() + "   " + result.getDueDate());
            } else {
                System.out.println("Book could not be issued");
            }

            if (!yesOrNo("Issue more books?")) {
                break;
            }
        } while (true);
    }

    private void renewBooks() {}

    private void removeBooks() {}

    private void returnBooks() {}

    private void printTransactions() {
    }

    private void saveData() {
    }

    private void loadData() {
    }

    private void addBooks() {
        Book result;
        do {
            String title = getToken("Enter book title");
            String author = getToken("Enter author");
            String id = getToken("Enter id");
            result = library.addBook(title, author, id);
            if (result != null)
                System.out.println(result);
            else
                System.out.println("Book could not be added");
            if (!yesOrNo("Add more book?"))
                break;
        } while (true);
    }

    public int getCommand() {
        throw new RuntimeException();
    }

    public void help() {
        throw new RuntimeException();
    }

    private String getToken(String prompt) {
        System.out.print(prompt + " ");
        Scanner scanner = new Scanner(System.in);
        return scanner.nextLine();
    }

    private boolean yesOrNo(String prompt) {
        String value = getToken("Yes or no: " + prompt);
        return value.equalsIgnoreCase("yes");
    }
}
