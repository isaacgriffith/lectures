@article{briand_unified_1999,
	title = {A unified framework for coupling measurement in object-oriented systems},
	volume = {25},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/32.748920},
	doi = {10.1109/32.748920},
	abstract = {The increasing importance being placed on software measurement has led to an increased amount of research developing new software measures. Given the importance of object-oriented development techniques, one specific area where this has occurred is coupling measurement in object-oriented systems. However, despite a very interesting and rich body of work, there is little understanding of the motivation and empirical hypotheses behind many of these new measures. It is often difficult to determine how such measures relate to one another and for which application they can be used. As a consequence, it is very difficult for practitioners and researchers to obtain a clear picture of the state of the art in order to select or define measures for object-oriented systems. This situation is addressed and clarified through several different activities. First, a standardized terminology and formalism for expressing measures is provided which ensures that all measures using it are expressed in a fully consistent and operational manner. Second, to provide a structured synthesis, a review of the existing frameworks and measures for coupling measurement in object-oriented systems takes place. Third, a unified framework, based on the issues discovered in the review, is provided and all existing measures are then classified according to this framework. This paper contributes to an increased understanding of the state-of-the-art},
	number = {1},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Briand, L.C. and Daly, J.W. and Wust, J.K.},
	month = feb,
	year = {1999},
	keywords = {coupling measurement, object-oriented development techniques, object-oriented programming, object-oriented systems, software measurement, software metrics, software quality, standardized formalism, standardized terminology, structured synthesis, unified framework},
	pages = {91--121}
}

@article{bansiya_hierarchical_2002,
	title = {A hierarchical model for object-oriented design quality assessment},
	volume = {28},
	issn = {00985589},
	url = {https://doi.org/10.1109/32.979986},
	doi = {10.1109/32.979986},
	number = {1},
	urldate = {2014-01-30},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Bansiya, J. and Davis, C.G.},
	month = jan,
	year = {2002},
	pages = {4--17}
}

@book{knoernschild_java_2012,
	title = {Java Application Architecture: Modularity Patterns With Examples Using {OSGi}},
	publisher = {Addison-Wesley Professional},
	author = {Knoernschild, K.},
	year = {2012}
}

@phdthesis{szanto_automation_2009,
	title = {Automation of Complex Design Flaws Detection},
	school = {Universitatea Politehnica},
	author = {Sz\'{a}nt\'{o}, K\'{a}roly},
	year = {2009}
}

@techreport{basili_software_1992,
	address = {College Park, {MD}, {USA}},
	title = {Software Modeling and Measurement: The Goal/Question/Metric Paradigm},
	institution = {University of Maryland at College Park},
	author = {Basili, Victor R.},
	year = {1992}
}

@book{wohlin_experimentation_2012,
	address = {Berlin, Heidelberg},
	title = {Experimentation in Software Engineering},
	isbn = {978-3-642-29043-5, 978-3-642-29044-2},
	url = {https://doi.org/10.1007/978-3-642-29044-2},
	language = {en},
	urldate = {2014-06-22},
	publisher = {Springer Berlin Heidelberg},
	author = {Wohlin, Claes and Runeson, Per and H\"{o}st, Martin and Ohlsson, Magnus C. and Regnell, Bj\"{o}rn and Wessl\'{e}n, Anders},
	year = {2012}
}

@article{griffith_design_2013,
	title = {Design Pattern Decay: An Extended Taxonomy and Empirical Study of Grime and its Impact on Design Pattern Evolution},
	author = {Griffith, Isaac and Izurieta, Clemente},
	year = {2013}
}

@book{campbell_quasi-experimentation:_1979,
	title = {Quasi-experimentation: Design and Analysis Issues for Field Settings},
	publisher = {Houghton Mifflin Company},
	author = {Campbell, D. and Cook, T.D.},
	year = {1979}
}

@book{campbell_experimental_1963,
	title = {Experimental and Quasi-experimental Designs for Research},
	publisher = {Rand-{McNally}},
	author = {Campbell, D. and Stanley, J.},
	year = {1963}
}

@inproceedings{izurieta_development_2012,
	title = {Development and Application of a Simulation Environment ({NEO}) for Integrating Empirical and Computational Investigations of System-Level Complexity},
	url = {https://doi.org/10.1109/ICISA.2012.6220928},
	doi = {10.1109/ICISA.2012.6220928},
	abstract = {Network Exchange Objects ({NEO}) is a new software framework designed to facilitate development of complex natural or built distributed system models, where the system model is represented as a graph, through which currencies (e.g., coding information) flux. This paper introduces "system-level hypothesis ({SLH}) testing" as a form of computational thinking that will drive integration of computational and empirical sciences to promote efficient, self- correcting inquiry into the operations and behavior of complex systems. To demonstrate {NEO}, we examine the problem of maximizing the productivity of a software development organization by measuring growth in the total lines of code ({LOC}) contributed by developers. We develop a software framework ({NEO}) that allows rapid creation of model variants representing alternative {SLHs}. {NEO} is designed to investigate systems we describe as "complex adaptive hierarchical networks" ({CAHNs} - complex systems represented as networks that route and store multiple interactive currencies). Models built atop {NEO}, are organized collections of individual values (model variables) and algorithms (model logic). Modelers systematically combine algorithms to create alternative model formulations at runtime. Thus, {NEO} is a simulation framework that can be used in any domain of expertise, where systems are represented as interdependent entities that store and flux multiple currencies.},
	booktitle = {Information Science and Applications ({ICISA}), 2012 International Conference on},
	author = {Izurieta, C. and Poole, G. and Payn, R.A. and Griffith, I. and Nix, R. and Helton, A. and Bernhardt, E. and Burgin, A.J.},
	month = may,
	year = {2012},
	keywords = {{CAHN}, complex adaptive hierarchical networks, complex networks, complex system behavior, digital simulation, distributed processing, distributed system models, graphical representation, lines of code, model logic, model variables, {NEO} application, network exchange objects, network theory (graphs), productivity maximization problem, program testing, self-correcting inquiry, simulation environment development, {SLH} testing, software development organization, software framework, software houses, software metrics, software process improvement, system-level complexity, system-level hypothesis testing},
	pages = {1--6}
}

@article{briand_unified_1998,
	title = {A Unified Framework for Cohesion Measurement in Object-Oriented Systems},
	volume = {3},
	issn = {1382-3256},
	url = {http://dx.doi.org/10.1023/A:1009783721306},
	abstract = {The increasing importance being placed on software measurement has led to an increased amount of research developing new software measures. Given the importance of object-oriented development techniques, one specific area where this has occurred is cohesion measurement in object-oriented systems. However, despite a very interesting body of work, there is little understanding of the motivation and empirical hypotheses behind many of these new measures. It is often difficult to determine how such measures relate to one another and for which application they can be used. As a consequence, it is very difficult for practitioners and researchers to obtain a clear picture of the state-of-the-art in order to select or define cohesion measures for object-oriented systems. This situation is addressed and clarified through several different activities. First, a standardized terminology and formalism for expressing measures is provided which ensures that all measures using it are expressed in a fully consistent and operational manner. Second, to provide a structured synthesis, a review of the existing approaches to measure cohesion in object-oriented systems takes place. Third, a unified framework, based on the issues discovered in the review, is provided and all existing measures are then classified according to this framework. Finally, a review of the empirical validation work concerning existing cohesion measures is provided. This paper contributes to an increased understanding of the state-of-the-art: a mechanism is provided for comparing measures and their potential use, integrating existing measures which examine the same concepts in different ways, and facilitating more rigorous decision making regarding the definition of new measures and the selection of existing measures for a specific goal of measurement. In addition, our review of the state-of-the-art highlights several important issues: (i) many measures are not defined in a fully operational form, (ii) relatively few of them are based on explicit empirical models as recommended by measurement theory, and (iii) an even smaller number of measures have been empirically validated; thus, the usefulness of many measures has yet to be demonstrated.},
	number = {1},
	journal = {Empirical Software Engineering},
	author = {Briand, L.C. and Daly, J.W. and Wust, J.K.},
	year = {1998},
	note = {10.1023/A:1009783721306},
	keywords = {Computer, Science},
	pages = {65--117}
}

@article{chidamber_metrics_1994,
	title = {A metrics suite for object oriented design},
	volume = {20},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/32.295895},
	doi = {10.1109/32.295895},
	abstract = {Given the central role that software development plays in the delivery and application of information technology, managers are increasingly focusing on process improvement in the software development area. This demand has spurred the provision of a number of new and/or improved approaches to software development, with perhaps the most prominent being object-orientation ({OO}). In addition, the focus on process improvement has increased the demand for software measures, or metrics with which to manage the process. The need for such metrics is particularly acute when an organization is adopting a new technology for which established practices have yet to be developed. This research addresses these needs through the development and implementation of a new suite of metrics for {OO} design. Metrics developed in previous research, while contributing to the field's understanding of software development processes, have generally been subject to serious criticisms, including the lack of a theoretical base. Following Wand and Weber (1989), the theoretical base chosen for the metrics was the ontology of Bunge (1977). Six design metrics are developed, and then analytically evaluated against Weyuker's (1988) proposed set of measurement principles. An automated data collection tool was then developed and implemented to collect an empirical sample of these metrics at two field sites in order to demonstrate their feasibility and suggest ways in which managers may use these metrics for process improvement},
	number = {6},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Chidamber, S.R. and Kemerer, C.F.},
	month = jun,
	year = {1994},
	keywords = {automated data collection tool, measurement principles, metrics suite, object oriented design, object-oriented methods, object-oriented programming, object oriented programming, organization, process improvement, software development, software measures, software metrics},
	pages = {476--493}
}

@inproceedings{dabrowski_software_2011,
	author={Dabrowski, Robert and Stencel, Krzysztof and Timoszuk, Grzegorz},
	editor={Crnkovic, Ivica and Gruhn, Volker and Book, Matthias},
	title={Software Is a Directed Multigraph},
	booktitle={Software Architecture},
	year={2011},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={360--369},
}

@book{yourdon_structured_1979,
	address = {Englewood Cliffs, NJ},
	title = {Structured design: fundamentals of a discipline of computer program and systems design},
	isbn = {978-0-13-854471-3},
	shorttitle = {Structured design},
	publisher = {Prentice Hall},
	author = {Yourdon, Edward and Constantine, Larry L.},
	year = {1979},
	keywords = {Computer programming, Structured programming}
}

@article{ampatzoglou_methodology_2012,
	title = {A methodology to assess the impact of design patterns on software quality},
	volume = {54},
	issn = {09505849},
	url = {https://doi.org/10.1016/j.infsof.2011.10.006},
	doi = {10.1016/j.infsof.2011.10.006},
	language = {en},
	number = {4},
	urldate = {2014-09-29},
	journal = {Information and Software Technology},
	author = {Ampatzoglou, Apostolos and Frantzeskou, Georgia and Stamelos, Ioannis},
	month = apr,
	year = {2012},
	pages = {331--346}
}

@article{li_object-oriented_1993,
	title = {Object-oriented metrics that predict maintainability},
	volume = {23},
	issn = {01641212},
	url = {https://doi.org/10.1016/0164-1212(93)90077-B},
	doi = {10.1016/0164-1212(93)90077-B},
	language = {en},
	number = {2},
	urldate = {2014-10-09},
	journal = {Journal of Systems and Software},
	author = {Li, Wei and Henry, Sallie},
	month = nov,
	year = {1993},
	pages = {111--122}
}

@incollection{goos_using_2001,
	address = {Berlin, Heidelberg},
	title = {Using {Metrics} to {Predict} {OO} {Information} {Systems} {Maintainability}},
	volume = {2068},
	isbn = {978-3-540-42215-0 978-3-540-45341-3},
	url = {https://doi.org/10.1007/3-540-45341-5_26},
	urldate = {2017-04-07},
	booktitle = {Advanced {Information} {Systems} {Engineering}},
	publisher = {Springer Berlin Heidelberg},
	author = {Genero, Marcela and Olivas, José and Piattini, Mario and Romero, Francisco},
	editor = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan and Dittrich, Klaus R. and Geppert, Andreas and Norrie, Moira C.},
	year = {2001},
	doi = {10.1007/3-540-45341-5\_26},
	pages = {388--401}
}

@inproceedings{mo_hotspot_2015,
	title = {Hotspot {Patterns}: {The} {Formal} {Definition} and {Automatic} {Detection} of {Architecture} {Smells}},
	isbn = {978-1-4799-1922-2},
	shorttitle = {Hotspot {Patterns}},
	url = {https://doi.org/10.1109/WICSA.2015.12},
	doi = {10.1109/WICSA.2015.12},
	urldate = {2015-09-20},
	publisher = {IEEE},
	author = {Mo, Ran and Cai, Yuanfang and Kazman, Rick and Xiao, Lu},
	month = may,
	year = {2015},
	pages = {51--60}
}

@inproceedings{reimanis_replication_2014,
	title = {A replication case study to measure the architectural quality of a commercial system},
	isbn = {978-1-4503-2774-9},
	url = {https://doi.org/10.1145/2652524.2652581},
	doi = {10.1145/2652524.2652581},
	language = {en},
	urldate = {2015-09-20},
	publisher = {ACM Press},
	author = {Reimanis, Derek and Izurieta, Clemente and Luhr, Rachael and Xiao, Lu and Cai, Yuanfang and Rudy, Gabe},
	year = {2014},
	pages = {1--8}
}

@article{ampatzoglou_building_2013,
	title = {Building and mining a repository of design pattern instances: Practical and research benefits},
	volume = {4},
	issn = {18759521},
	shorttitle = {Building and mining a repository of design pattern instances},
	url = {https://doi.org/10.1016/j.entcom.2012.10.002},
	doi = {10.1016/j.entcom.2012.10.002},
	language = {en},
	number = {2},
	urldate = {2014-10-20},
	journal = {Entertainment Computing},
	author = {Ampatzoglou, Apostolos and Michou, Olia and Stamelos, Ioannis},
	month = apr,
	year = {2013},
	pages = {131--142}
}

@article{bieman_cohesion_1995,
	title = {Cohesion and reuse in an object-oriented system},
	volume = {20},
	issn = {01635948},
	url = {https://doi.org/10.1145/223427.211856},
	doi = {10.1145/223427.211856},
	language = {en},
	number = {{SI}},
	urldate = {2014-10-21},
	journal = {{ACM} {SIGSOFT} Software Engineering Notes},
	author = {Bieman, James M. and Kang, Byung-Kyoo},
	month = aug,
	year = {1995},
	pages = {259--262}
}

@book{alpaydin_introduction_2010,
	address = {Cambridge, Mass},
	edition = {2nd ed},
	series = {Adaptive computation and machine learning},
	title = {Introduction to machine learning},
	isbn = {9780262012430},
	publisher = {{MIT} Press},
	author = {Alpaydin, Ethem},
	year = {2010},
	keywords = {Machine learning},
	pages = {492}
}

@article{subramanian_metrics_2001,
	title = {Metrics for software adaptability},
	journal = {Proc. Software Quality Management ({SQM} 2001), April},
	author = {Subramanian, Nary and Chung, Lawrence},
	year = {2001}
}

@book{yin_case_2009,
	address = {Los Angeles, Calif},
	edition = {4th ed},
	series = {Applied social research methods},
	title = {Case study research: design and methods},
	isbn = {9781412960991},
	shorttitle = {Case study research},
	number = {v. 5},
	publisher = {Sage Publications},
	author = {Yin, Robert K.},
	year = {2009},
	keywords = {Case method, Research Methodology, Social sciences}
}

@book{runeson_case_2012,
	address = {Hoboken, N.J},
	title = {Case study research in software engineering: guidelines and examples},
	isbn = {9781118104354},
	shorttitle = {Case study research in software engineering},
	publisher = {Wiley},
	editor = {Runeson, Per},
	year = {2012},
	keywords = {Computer software, {COMPUTERS} / Software Development \& Engineering / General, Development}
}

@mastersthesis{dale_impacts_2014,
	address = {Bozeman, {MT}},
	title = {Impacts of Modular Grime on Technical Debt},
	url = {http://www.cs.montana.edu/techreports/1314/Dale.pdf},
	school = {Montana State University},
	author = {Dale, Melissa},
	year = {2014}
}

@article{parnas_software_1994,
	title = {Software Aging},
	copyright = {{IEEE} Computer Society Press Los Alamitos, {CA}, {USA}},
	journal = {Proceedings of the 16th International Conference on Software Engineering. {ICSE}'97},
	author = {Parnas, David Lorge},
	month = may,
	year = {1994},
	pages = {279--287}
}

@article{eick_does_2001,
	title = {Does code decay? Assessing the evidence from change management data},
	volume = {27},
	issn = {00985589},
	shorttitle = {Does code decay?},
	url = {https://doi.org/10.1109/32.895984},
	doi = {10.1109/32.895984},
	number = {1},
	urldate = {2014-05-11},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Eick, S.G. and Graves, T.L. and Karr, A.F. and Marron, J.S. and Mockus, A.},
	month = jan,
	year = {2001},
	pages = {1--12}
}

@inproceedings{grottke_fundamentals_2008,
	title = {The fundamentals of software aging},
	isbn = {978-1-4244-3416-9},
	url = {https://doi.org/10.1109/ISSREW.2008.5355512},
	doi = {10.1109/ISSREW.2008.5355512},
	urldate = {2014-10-20},
	publisher = {{IEEE}},
	author = {Grottke, Michael and Matias, Rivalino and Trivedi, Kishor S.},
	month = nov,
	year = {2008},
	pages = {1--6}
}

@inproceedings{huang_software_1995,
	title = {Software rejuvenation: analysis, module and applications},
	isbn = {0-8186-7079-7},
	shorttitle = {Software rejuvenation},
	url = {https://doi.org/10.1109/FTCS.1995.466961},
	doi = {10.1109/FTCS.1995.466961},
	urldate = {2014-10-20},
	publisher = {{IEEE} Comput. Soc. Press},
	author = {Huang, Y. and Kintala, C. and Kolettis, N. and Fulton, N.D.},
	year = {1995},
	pages = {381--390}
}

@inproceedings{trivedi_modeling_2000,
	title = {Modeling and analysis of software aging and rejuvenation},
	isbn = {0-7695-0598-8},
	url = {https://doi.org/10.1109/SIMSYM.2000.844925},
	doi = {10.1109/SIMSYM.2000.844925},
	urldate = {2014-10-20},
	publisher = {{IEEE} Comput. Soc},
	author = {Trivedi, K.S. and Vaidyanathan, K. and Goseva-Popstojanova, K.},
	year = {2000},
	pages = {270--279}
}

@inproceedings{ohlsson_code_1999,
	title = {Code decay analysis of legacy software through successive releases},
	isbn = {0-7803-5425-7},
	url = {https://doi.org/10.1109/AERO.1999.790190},
	doi = {10.1109/AERO.1999.790190},
	urldate = {2014-10-20},
	publisher = {{IEEE}},
	author = {Ohlsson, M.C. and von Mayrhauser, A. and McGuire, B. and Wohlin, C.},
	year = {1999},
	pages = {69--81 vol.5}
}

@phdthesis{mantyla_bad_2003,
	title = {Bad Smells in Software – a Taxonomy and an Empirical Study},
	url = {http://www.soberit.hut.fi/sems/shared/deliverables_public/mmantyla_thesis_final.pdf},
	abstract = {In this work, the bad code smells are studied empirically and their relationship to source code metrics is evaluated. This work also presents an initial taxonomy for the bad code smell, which improves their understandability and feasibility. The bad code smells, presented by Martin Fowler and Kent Beck, are dissatisfactory structures int eh source code of software that decrease software quality by making it less maintainable. The maintainability of software is important, because it is one of the factors affecting the cost of the future development activities. The literature study looks at the concept of software maintainability, dicusses how software maintainability can be measured, and provides motivation and migration techniques to achieve more maintainable software. Based on the literature study, this work proposes a taxonomy for the bad code smells and evaluates the measurability of each bad code smell with source code metrics. A survey is used to collect the developers' opinions on the existence of bad code smells in particular software modules. The results of this survey show that the developers' opinions on a particular smell in a particular software module are not very uniform. The survey also provides more support to the theoretical taxonomy by showing that there are many strong correlations within the taxonomy's categories. This study also compares the results of the smell survey to the source code metrics collected with automatic tools. The results show that developers' evalutations of the bad code smells do not correlate with the actual source code metrics. This means that the smell evaluations from developers are not very reliable and that there is a need for automatic smell measurement.},
	school = {Helsinki University of Technology},
	author = {M\'{a}ntyl\'{a}, M.V.},
	year = {2003}
}

@techreport{mansoor2013code,
  title={Code-Smells Detection using Good and Bad Software Design Examples},
  author={Mansoor, Usman and Kessentini, Marouane and Bechikh, Slim and Deb, Kalyanmoy},
  year={2013},
  institution={Technical report, Technical Report}
}

@inproceedings{mantyla_bad_2004,
	title = {Bad smells - humans as code critics},
	url = {https://doi.org/10.1109/ICSM.2004.1357825},
	doi = {10.1109/ICSM.2004.1357825},
	abstract = {This work presents the results of an initial empirical study on the subjective evaluation of bad code smells, which identify poor structures in software. Based on a case study in a Finnish software product company, we make two contributions. First, we studied the evaluator effect when subjectively evaluating the existence of smells in code modules. We found that the use of smells for code evaluation purposes is hard due to conflicting perceptions of different evaluators. Second, we applied source code metrics for identifying three smells and compared these results to the subjective evaluations. Surprisingly, the metrics and smell evaluations did not correlate.},
	booktitle = {Software Maintenance, 2004. Proceedings. 20th {IEEE} International Conference on},
	author = {M\'{a}ntyl\'{a}, M.V. and Vanhanen, J. and Lassenius, C.},
	month = sep,
	year = {2004},
	keywords = {bad code smell, code evaluation, code modules, Finnish software product company, poor software structures, program diagnostics, software houses, software metrics, software performance evaluation, source code metrics, subjective evaluation},
	pages = {399--408}
}

@inproceedings{mantyla_taxonomy_2003,
	title = {A taxonomy and an initial empirical study of bad smells in code},
	url = {https://doi.org/10.1109/ICSM.2003.1235447},
	doi = {10.1109/ICSM.2003.1235447},
	abstract = {This paper presents research in progress, as well as tentative findings related to the empirical study of so called bad code smells. We present a taxonomy that categorizes similar bad smells. We believe that taxonomy makes the smells more understandable and recognizes the relationships between smells. Additionally, we present our initial findings from an empirical study of the use of the smells for evaluating code quality in a small Finnish software product company. Our findings indicate that the taxonomy for the smells could help explain the identified correlations between the subjective evaluations of the existence of the smells.},
	booktitle = {Software Maintenance, 2003. {ICSM} 2003. Proceedings. International Conference on},
	author = {M\'{a}ntyl\'{a}, M.V. and Vanhanen, J. and Lassenius, C.},
	month = sep,
	year = {2003},
	keywords = {bad code smells, code quality, correlations, empirical study, object-oriented context, object-oriented programming, program compilers, software maintenance, software performance evaluation, software quality, taxonomy},
	pages = {381--384}
}

@book{martin_clean_2009,
	title = {Clean Code: A Handbook of Agile Software Craftsmanship},
	publisher = {Pearson Education Inc.},
	author = {Martin, R.C.},
	year = {2009}
}

@book{martin_agile_2003,
	title = {Agile software development: principles, patterns, and practices},
	publisher = {Prentice Hall {PTR}},
	author = {Martin, R.C.},
	year = {2003}
}

@book{riel_object-oriented_1996,
	title = {Object-oriented design heuristics},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	author = {Riel, A.J.},
	year = {1996}
}

@inproceedings{mantyla_empirical_2010,
	title = {Empirical software evolvability - code smells and human evaluations},
	isbn = {978-1-4244-8630-4},
	url = {https://doi.org/10.1109/ICSM.2010.5609545},
	doi = {10.1109/ICSM.2010.5609545},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {M\'{a}ntyl\'{a}, M.V.},
	month = sep,
	year = {2010},
	pages = {1--6}
}

@book{brown_antipatterns:_1998,
	title = {{AntiPatterns}: refactoring software, architectures, and projects in crisis},
	publisher = {Wiley},
	author = {Brown, W.H. and Malveau, R.C. and Mowbray, T.J.},
	year = {1998}
}

@inproceedings{dhambri_visual_2008,
	title = {Visual Detection of Design Anomalies},
	url = {http://dx.doi.org/10.1109/CSMR.2008.4493326},
	doi = {10.1109/CSMR.2008.4493326},
	abstract = {Design anomalies, introduced during software evolution, are frequent causes of low maintainability and low flexibility to future changes. Because of the required knowledge, an important subset of design anomalies is difficult to detect automatically, and therefore, the code of anomaly candidates must be inspected manually to validate them. However, this task is time- and resource-consuming. We propose a visualization-based approach to detect design anomalies for cases where the detection effort already includes the validation of candidates. We introduce a general detection strategy that we apply to three types of design anomaly. These strategies are illustrated on concrete examples. Finally we evaluate our approach through a case study. It shows that performance variability against manual detection is reduced and that our semi-automatic detection has good recall for some anomaly types.},
	booktitle = {Software Maintenance and Reengineering, 2008. {CSMR} 2008. 12th European Conference on},
	author = {Dhambri, K. and Sahraoui, H. and Poulin, P.},
	month = apr,
	year = {2008},
	keywords = {anomaly candidates code, candidates validation, design anomalies, detection strategy, program visualisation, semi-automatic detection, software evolution, software metrics, software quality, visual detection, visualization-based approach},
	pages = {279--283}
}

@inproceedings{van_emden_java_2002,
	title = {Java Quality Assurance by Detecting Code Smells},
	url = {https://doi.org/10.1109/WCRE.2002.1173068},
	doi = {10.1109/WCRE.2002.1173068},
	abstract = {Software inspection is a known technique for improving software quality. It involves carefully examining the code, the design, and the documentation of software and checking these for aspects that are known to be potentially problematic based on past experience. Code smells are a metaphor to describe patterns that are generally associated with bad design and bad programming practices. Originally, code smells are used to find the places in software that could benefit from refactoring. In this...},
	booktitle = {Proceedings of the 9th Working Conference on Reverse Engineering},
	publisher = {{IEEE} Computer Society Press},
	author = {van Emden, Eva and Moonen, Leon},
	month = oct,
	year = {2002},
	keywords = {Java, quality}
}

@inproceedings{fokaefs_jdeodorant:_2007,
	title = {{JDeodorant}: Identification and Removal of Feature Envy Bad Smells},
	url = {https://doi.org/10.1109/ICSM.2007.4362679},
	doi = {10.1109/ICSM.2007.4362679},
	abstract = {In this demonstration we present an Eclipse plug-in that identifies feature envy bad smells in Java projects and resolves them by applying the appropriate move method refactorings. The main contribution is the ability to pre-evaluate the impact of all possible move refactorings on design quality and apply the most effective one.},
	booktitle = {Software Maintenance, 2007. {ICSM} 2007. {IEEE} International Conference on},
	author = {Fokaefs, M. and Tsantalis, N. and Chatzigeorgiou, A.},
	month = oct,
	year = {2007},
	keywords = {design quality, Eclipse plug-in, feature envy bad smells, Java, Java projects, {JDeodorant}, move method refactorings, software quality},
	pages = {519--520}
}

@article{fontana_automatic_2012,
	title = {Automatic detection of bad smells in code: An experimental assessment},
	volume = {11},
	number = {2},
	journal = {Journal of Object Technology},
	author = {Fontana, F.A. and Braione, P. and Zanoni, M.},
	year = {2012}
}

@inproceedings{girba_using_2007,
	address = {Dubrovnik, Croatia},
	series = {{IWPSE} '07},
	title = {Using concept analysis to detect co-change patterns},
	isbn = {978-1-59593-722-3},
	url = {http://doi.acm.org/10.1145/1294948.1294970},
	doi = {10.1145/1294948.1294970},
	abstract = {Software systems need to change over time to cope with new requirements, and due to design decisions, the changes happen to crosscut the system's structure. Understanding how changes appear in the system can reveal hidden dependencies between different entities of the system. We propose the usage of concept analysis to identify groups of entities that change in the same way and in the same time. We apply our approach at different levels of abstraction (i.e., method, class, package) and we detect fine grained changes (i.e., statements were added in a class, but no method was added there). Concept analysis is a technique that identifies entities that have the same properties, but it requires manual inspection due to the large number of candidates it detects. We propose a heuristic that dramatically eliminate the false positives. We apply our approach on two case studies and we show how we can identify hidden dependencies and detect bad smells.},
	booktitle = {Ninth international workshop on Principles of software evolution: in conjunction with the 6th {ESEC}/{FSE} joint meeting},
	publisher = {{ACM}},
	author = {G\^{i}rba, Tudor and Ducasse, St\'{e}phane and Kuhn, Adrian and Marinescu, Radu and Daniel, Ra\c{t}iu},
	year = {2007},
	keywords = {co-change analysis, concept analysis, evolution analysis},
	pages = {83--89}
}

@inproceedings{girba_identifying_2004,
	title = {Identifying Entities That Change Together},
	abstract = {Software system need to change over time to cope with the new requirements. Furthermore, due to design decisions, the new requirements happen to crosscut the sytem's structure. Understanding how changes appear in the system can reveal hidden dependencies between different parts of the system. We propose to group entities that change together according to a logical expression that specifies the change condition. Furthermore, we can group entities at different levels of abstraction (i.e., method, class, package). Our approach is based on an explicit history meta model that centers around the notion of history and which enables the definition of history and which enables the definition of historical measurements which summarize the changes. We apply our approach on two large case studies and show how we can identify groups of related entities and detect bad smells.},
	booktitle = {Ninth {IEEE} Workshop on Empirical Studies of Software Maintenance ({WESS} 2004)},
	publisher = {{IEEE}},
	author = {G\^{i}rba, Tudor and Ducasse, St\'{e}phane and Marinescu, Radu and Daniel, Ra\c{t}iu},
	year = {2004}
}

@article{garcia_identifying_2009,
	title = {Identifying Architectural Bad Smells},
	issn = {1534-5351},
	url = {http://dx.doi.org/10.1109/CSMR.2009.59},
	doi = {10.1109/CSMR.2009.59},
	abstract = {Certain design fragments in software architectures can have a negative impact on system maintainability. In this paper, we introduce the concept of architectural "bad smells," which are frequently recurring software designs that can have non-obvious and significant detrimental effects on system lifecycle properties. We define architectural smells and differentiate them from related concepts, such as architectural antipatterns and code smells. We also describe four representative architectural smells we encountered in the context of reverse-engineering eighteen grid technologies and refactoring one large industrial system.},
	journal = {Software Maintenance and Reengineering, 2009. {CSMR} '09. 13th European Conference on},
	author = {Garcia, J. and Popescu, D. and Edwards, G. and Medvidovic, N.},
	month = mar,
	year = {2009},
	keywords = {codesmell},
	pages = {255--258}
}

@inproceedings{glauco_de_f._carneiro_marcos_silva_leandra_mara_eduardo_figueiredo_claudio_sant_anna_alessandro_garcia_identifying_2010,
	title = {Identifying Code Smells with Multiple Concern Views},
	url = {http://dx.doi.org/10.1109/SBES.2010.21},
	doi = {10.1109/SBES.2010.21},
	abstract = {Code smells are anomalies often caused by the way concerns are realized in the source code. Their identification might depend on properties governing the structure of individual concerns and their inter-dependencies in the system implementation. Although code visualization tools are increasingly applied to support anomalydetection, they are mostly limited to represent modular structures, such as methods, classes and packages. This paper presents a multiple views approach that enriches four categories of code views with concern properties, namely: (i) concern’s package-classmethod structure, (ii) concern’s inheritance-wise structure, (iii) concern dependency, and (iv) concern dependency weight. An exploratory study was conducted to assess the extent to which visual views support code smell detection. Developers identified a set of well-known code smells on five versions of an opensource system. Two important results came out of this study. First, the concern-driven views provided useful support to identify God Class and Divergent Change smells. Second, strategies for smell detection supported by the multiple concern views were uncovered.},
	booktitle = {2010 Brazilian Symposium on Software Engineering},
	publisher = {{IEEE}},
	author = {Glauco de F. Carneiro, Marcos Silva, Leandra Mara, Eduardo Figueiredo, Claudio Sant' Anna, Alessandro Garcia and Mendonça, Manoel},
	year = {2010}
}

@inproceedings{hallal_antipattern-based_2004,
	title = {Antipattern-based detection of deficiencies in Java multithreaded software},
	url = {https://doi.org/10.1109/QSIC.2004.1357968},
	doi = {10.1109/QSIC.2004.1357968},
	abstract = {We investigate an antipattern-based approach to analyze Java multithreaded ({MT}) programs. We present a library of 38 antipatterns, which describe predefined recognized sources of multithreading related errors in the code. The antipatterns are archived in practical, easy to use templates, and are classified according to their potential effects on the program behavior. We also report on our experience in using these antipatterns in the analysis of real multithreaded applications.},
	booktitle = {Quality Software, 2004. {QSIC} 2004. Proceedings. Fourth International Conference on},
	author = {Hallal, H.H. and Alikacem, E. and Tunney, W.P. and Boroday, S. and Petrenko, A.},
	month = sep,
	year = {2004},
	keywords = {antipattern-based approach, antipattern-based detection, antipattern library, deficiency detection, Java, Java multithreaded program, Java multithreaded software, multithreaded application, multi-threading, program behavior, software libraries},
	pages = {258 -- 267}
}

@phdthesis{jancke_smell_2010,
	title = {Smell Detection in Context},
	url = {http://sewiki.iai.uni-bonn.de/_media/research/cultivate/sebastian-jancke-smell-detection-in-context-2010.pdf},
	abstract = {This thesis investigates the use of context sensitivity in smell detection to support very frequent refactoring. Frequent refactoring needs very easy access to relevant smells. So far, it has not been studied, how context sensitivity can improve smell detection to support frequent refactoring. Further, current approaches do not exploit the impact of structures on false positives during smell detection. The approach “Smell Detection in Context” provides concepts for three contexts, modeling the impact of structures, the relevance of smells and the relationship between smells. The usefulness and applicability are investigated with the case study research method. The case study of a typical industrial project showed how developers leverage context sensitivity to help them in their process of frequent refactoring. The detailed analysis of various structures revealed that structures have a signiﬁcant impact on smells. This impact has to be regarded during smell detection. Taking this information into account, the structural context avoids false positives. The huge amount of smells are made manageable with the help of relevance ﬁltering and an appropriate relevance context. The modeling of smell details and relationships between smells makes smells and their complex detection rules more understandable for the user. Manual investigation of these details and relations is automated and improves the access to them.},
	school = {Rheinische Friedrich-Wilmelms-Universität Bonn},
	author = {Jancke, Sebastian},
	year = {2010}
}

@techreport{javier_perez_carlos_lopez_naouel_moha_classification_2011,
	title = {A Classification Framework and Survey of Design Smell Management},
	number = {{IT}-{DI}-2011-0001},
	institution = {University of Valladolid},
	author = {Javier Pérez, Carlos López, Naouel Moha and Mens, Tom},
	year = {2011}
}

@inproceedings{kessentini_design_2011,
	title = {Design Defects Detection and Correction by Example},
	url = {https://doi.org/10.1109/ICPC.2011.22},
	doi = {10.1109/ICPC.2011.22},
	abstract = {Detecting and fixing defects make programs easier to understand by developers. We propose an automated approach for the detection and correction of various types of design defects in source code. Our approach allows to automatically find detection rules, thus relieving the designer from doing so manually. Rules are defined as combinations of metrics/thresholds that better conform to known instances of design defects (defect examples). The correction solutions, a combination of refactoring operations, should minimize, as much as possible, the number of defects detected using the detection rules. In our setting, we use genetic programming for rule extraction. For the correction step, we use genetic algorithm. We evaluate our approach by finding and fixing potential defects in four open-source systems. For all these systems, we found, in average, more than 80\% of known defects, a better result when compared to a state-of-the-art approach, where the detection rules are manually or semi-automatically specified. The proposed corrections fix, in average, more than 78\%of detected defects.},
	booktitle = {Program Comprehension ({ICPC}), 2011 {IEEE} 19th International Conference on},
	author = {Kessentini, M. and Kessentini, W. and Sahraoui, H. and Boukadoum, M. and Ouni, A.},
	month = jun,
	year = {2011},
	keywords = {data flow analysis, design defects detection, genetic algorithms, genetic programming, open-source systems, public domain software, rule extraction, software maintenance, source code},
	pages = {81--90}
}

@incollection{kessentini_search-based_2011,
	series = {Lecture Notes in Computer Science},
	title = {Search-Based Design Defects Detection by Example},
	volume = {6603},
	isbn = {978-3-642-19810-6},
	url = {http://dx.doi.org/10.1007/978-3-642-19811-3_28},
	abstract = {We propose an automated approach to detect various types of design defects in source code. Our approach allows to automatically find detection rules, thus relieving the designer from doing so manually. Rules are defined as combinations of metrics/thresholds that better conform to known instances of design defects (defect examples). In our setting, we use and compare between different heuristic search algorithms for rule extraction: Harmony Search, Particle Swarm Optimization, and Simulated Annealing. We evaluate our approach by finding potential defects in two open-source systems. For all these systems, we found, in average, more than 75\% of known defects, a better result when compared to a state-of-the-art approach, where the detection rules are manually or semi-automatically specified.},
	booktitle = {Fundamental Approaches to Software Engineering},
	publisher = {Springer Berlin / Heidelberg},
	author = {Kessentini, Marouane and Sahraoui, Houari and Boukadoum, Mounir and Wimmer, Manuel},
	editor = {Giannakopoulou, Dimitra and Orejas, Fernando},
	year = {2011},
	keywords = {Computer, Science},
	pages = {401--415}
}

@inproceedings{kessentini_design_2011-1,
	title = {Design Defect Detection Rules Generation: A Music Metaphor},
	url = {https://doi.org/10.1109/CSMR.2011.30},
	doi = {10.1109/CSMR.2011.30},
	abstract = {We propose an automated approach for design defect detection. It exploits an algorithm that automatically finds rules for the detection of possible design defects, thus relieving the designer from doing so manually. Our algorithm derives rules in the form of metric/threshold combinations, from known instances of design defects (defect examples). Due to the large number of possible combinations, we use a music-inspired heuristic that finds the best harmony when combining metrics. We evaluated our approach on finding potential defects in three open-source systems (Xerces-J, Quick {UML} and Gantt). For all of them, we found more than 80\% of known defects, a better result when compared to a state-of-the-art approach, where the detection rules are manually specified.},
	booktitle = {Software Maintenance and Reengineering ({CSMR}), 2011 15th European Conference on},
	author = {Kessentini, M. and Sahraoui, H. and Boukadoum, M. and Wimmer, M.},
	month = mar,
	year = {2011},
	keywords = {defect detection rules generation design, Gantt open-source system, music-inspired heuristic, public domain software, Quick {UML} open-source system, software maintenance, Xerces-J open-source system},
	pages = {241--248}
}

@inproceedings{kessentini_deviance_2010,
	address = {Antwerp, Belgium},
	series = {{ASE} '10},
	title = {Deviance from perfection is a better criterion than closeness to evil when identifying risky code},
	isbn = {978-1-4503-0116-9},
	url = {http://doi.acm.org/10.1145/1858996.1859015},
	doi = {10.1145/1858996.1859015},
	abstract = {We propose an approach for the automatic detection of potential design defects in code. The detection is based on the notion that the more code deviates from good practices, the more likely it is bad. Taking inspiration from artificial immune systems, we generated a set of detectors that characterize different ways that a code can diverge from good practices. We then used these detectors to measure how far code in assessed systems deviates from normality. We evaluated our approach by finding potential defects in two open-source systems (Xerces-J and Gantt). We used the library {JHotDraw} as the code base representing good design/programming practices. In both systems, we found that 90\% of the riskiest classes were defects, a precision far superiour to state of the art rule-based approaches.},
	booktitle = {Proceedings of the {IEEE}/{ACM} international conference on Automated software engineering},
	publisher = {{ACM}},
	author = {Kessentini, Marouane and Vaucher, Stéphane and Sahraoui, Houari},
	year = {2010},
	keywords = {artificial immune systems, design defects, maintenance},
	pages = {113--122}
}

@article{khomh_bayesian_2009,
	title = {A Bayesian Approach for the Detection of Code and Design Smells},
	issn = {1550-6002},
	url = {http://dx.doi.org/10.1109/QSIC.2009.47},
	doi = {10.1109/QSIC.2009.47},
	abstract = {The presence of code and design smells can have a severe impact on the quality of a program. Consequently, their detection and correction have drawn the attention of both researchers and practitioners who have proposed various approaches to detect code and design smells in programs. However, none of these approaches handle the inherent uncertainty of the detection process. We propose a Bayesian approach to manage this uncertainty. First, we present a systematic process to convert existing state-of-the-art detection rules into a probabilistic model. We illustrate this process by generating a model to detect occurrences of the Blob antipattern. Second, we present results of the validation of the model: we built this model on two open-source programs, {GanttProject} v1.10.2 and Xerces v2.7.0, and measured its accuracy. Third, we compare our model with another approach to show that it returns the same candidate classes while ordering them to minimise the quality analysts' effort. Finally, we show that when past detection results are available, our model can be calibrated using machine learning techniques to offer an improved, context-specific detection.},
	journal = {Quality Software, 2009. {QSIC} '09. 9th International Conference on},
	author = {Khomh, F. and Vaucher, S. and Gu\'{e}h\'{e}neuc, Y. G. and Sahraoui, H.},
	month = aug,
	year = {2009},
	keywords = {codesmell},
	pages = {305--314}
}

@book{lanza_object-oriented_2006,
	title = {Object-oriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems},
	publisher = {Springer},
	author = {Lanza, M. and Marinescu, R.},
	year = {2006}
}

@article{li_empirical_2007,
	title = {An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution},
	volume = {80},
	issn = {0164-1212},
	url = {https://doi.org/10.1016/j.jss.2006.10.018},
	doi = {10.1016/j.jss.2006.10.018},
	abstract = {Bad smells are used as a means to identify problematic classes in object-oriented systems for refactoring. The belief that the bad smells are linked with problematic classes is largely based on previous metric research results. Although there is a plethora of empirical studies linking software metrics to errors and error proneness of classes in object-oriented systems, the link between the bad smells and class error probability in the evolution of object-oriented systems after the systems are released has not been explored. There has been no empirical evidence linking the bad smells with class error probability so far. This paper presents the results from an empirical study that investigated the relationship between the bad smells and class error probability in three error-severity levels in an industrial-strength open source system. Our research, which was conducted in the context of the post-release system evolution process, showed that some bad smells were positively associated with the class error probability in the three error-severity levels. This finding supports the use of bad smells as a systematic method to identify and refactor problematic classes in this specific context.},
	number = {7},
	journal = {Journal of Systems and Software},
	author = {Li, Wei and Shatnawi, Raed},
	year = {2007},
	keywords = {design, Object-oriented},
	pages = {1120--1128}
}

@article{liu_schedule_2012,
	title = {Schedule of Bad Smell Detection and Resolution: A New Way to Save Effort},
	volume = {38},
	issn = {0098-5589},
	url = {http://dx.doi.org/10.1109/TSE.2011.9},
	doi = {10.1109/TSE.2011.9},
	abstract = {Bad smells are signs of potential problems in code. Detecting and resolving bad smells, however, remain time-consuming for software engineers despite proposals on bad smell detection and refactoring tools. Numerous bad smells have been recognized, yet the sequences in which the detection and resolution of different kinds of bad smells are performed are rarely discussed because software engineers do not know how to optimize sequences or determine the benefits of an optimal sequence. To this end, we propose a detection and resolution sequence for different kinds of bad smells to simplify their detection and resolution. We highlight the necessity of managing bad smell resolution sequences with a motivating example, and recommend a suitable sequence for commonly occurring bad smells. We evaluate this recommendation on two nontrivial open source applications, and the evaluation results suggest that a significant reduction in effort ranging from 17.64 to 20 percent can be achieved when bad smells are detected and resolved using the proposed sequence.},
	number = {1},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Liu, Hui and Ma, Zhiyi and Shao, Weizhong and Niu, Zhendong},
	month = feb,
	year = {2012},
	keywords = {bad smell detection, bad smell resolution, detection sequence, open source applications, optimal sequence, resolution sequence, scheduling, software engineering, software engineers},
	pages = {220--235}
}

@inproceedings{llano_uml_2009,
	title = {{UML} Specification and Correction of Object-Oriented Anti-patterns},
	url = {https://doi.org/10.1109/ICSEA.2009.15},
	doi = {10.1109/ICSEA.2009.15},
	abstract = {Nowadays, the detection and correction of software defects has become a very hard task for software engineers. Most importantly, the lack of standard specifications of these software defects along with the lack of tools for their detection, correction and verification forces developers to perform manual modifications; resulting not only in mistakes, but also in costs of time and resources. The work presented here is a study of the specification and correction of a particular type of software defect: Object-Oriented anti-patterns. More specifically, we define a {UML} based specification of anti-patterns and establish design transformations for their correction. Through this work, we expect to open up the possibility to automate the detection and correction of these kinds of software defects.},
	booktitle = {Software Engineering Advances, 2009. {ICSEA} '09. Fourth International Conference on},
	author = {Llano, M.T. and Pooley, R.},
	month = sep,
	year = {2009},
	keywords = {formal specification, formal verification, manual software modification, object-oriented anti-pattern correction, object-oriented methods, software defect correction, software defect detection, software verification, {UML} based specification, Unified Modeling Language},
	pages = {39--44}
}

@inproceedings{luo_ontological_2010,
	title = {An ontological identification of relationships between anti-patterns and code smells},
	url = {https://doi.org/10.1109/ICSEA.2009.15},
	doi = {10.1109/AERO.2010.5446811},
	abstract = {Ensuring quality in software development is a challenging process. The concepts of anti-patterns and code smells utilize the knowledge of known problems to improve the quality of current and future software development. However, the knowledge and understanding of these indicators of low quality software is still insufficient to resolve many of the problems they represent. The identification and definition of anti-patterns is a heuristic process. Additionally, minimal research exists addressing the relationships between or among code smells and anti-patterns. Software quality issues such as understandability and maintainability can be improved by identifying and resolving anti-patterns associated with code smells as well as preventing code smells before coding begins. We present an ontological representation of the relationships between anti-patterns and code smells to enhance the understanding of these concepts with the goal of improving software quality.},
	booktitle = {Aerospace Conference, 2010 {IEEE}},
	author = {Luo, Yixin and Hoss, A. and Carver, D.L.},
	month = mar,
	year = {2010},
	keywords = {anti patterns, code smells, object-oriented methods, ontological relationships identification, ontologies (artificial intelligence), software development, software quality},
	pages = {1--10}
}

@incollection{mahouachi_new_2012,
	series = {Lecture Notes in Computer Science},
	title = {A New Design Defects Classification: Marrying Detection and Correction},
	volume = {7212},
	isbn = {978-3-642-28871-5},
	url = {http://dx.doi.org/10.1007/978-3-642-28872-2_31},
	doi = {10.1007/978-3-642-28872-2_31},
	abstract = {Previous work classify design defects based on symptoms (long methods, large classes, long parameter lists, etc.), and treat separately detection and correction steps. This paper introduces a new classification of defects using correction possibilities. Thus, correcting different code fragments appending to specific defect category need, approximately, the same refactoring operations to apply. To this end, we use genetic programming to generate new form of classification rules combining detection and correction steps. We report the results of our validation using different open-source systems. Our proposal achieved high precision and recall correction scores.},
	booktitle = {Fundamental Approaches to Software Engineering},
	publisher = {Springer Berlin / Heidelberg},
	author = {Mahouachi, Rim and Kessentini, Marouane and Ghedira, Khaled},
	editor = {de Lara, Juan and Zisman, Andrea},
	year = {2012},
	keywords = {Computer, Science},
	pages = {455--470}
}

@inproceedings{marinescu_detection_2004,
	title = {Detection strategies: metrics-based rules for detecting design flaws},
	url = {https://doi.org/10.1109/ICSM.2004.1357820},
	doi = {10.1109/ICSM.2004.1357820},
	abstract = {In order to support the maintenance of an object-oriented software system, the quality of its design must be evaluated using adequate quantification means. In spite of the current extensive use of metrics, if used in isolation metrics are oftentimes too fine grained to quantify comprehensively an investigated design aspect (e.g., distribution of system's intelligence among classes). To help developers and maintainers detect and localize design problems in a system, we propose a novel mechanism - called detection strategy - for formulating metrics-based rules that capture deviations from good design principles and heuristics. Using detection strategies an engineer can directly localize classes or methods affected by a particular design flaw (e.g., God Class), rather than having to infer the real design problem from a large set of abnormal metric values. We have defined such detection strategies for capturing around ten important flaws of object-oriented design found in the literature and validated the approach experimentally on multiple large-scale case-studies.},
	booktitle = {Software Maintenance, 2004. Proceedings. 20th {IEEE} International Conference on},
	author = {Marinescu, R.},
	month = sep,
	year = {2004},
	keywords = {abnormal metric value, design flaw detection, design heuristics, detection strategy, isolation metrics, metrics-based rule, object-oriented design, object-oriented programming, object-oriented software system, program debugging, quality assurance, software maintenance, software metrics},
	pages = {350--359}
}

@book{marticorena_extending_????,
	title = {Extending a Taxonomy of Bad Code Smells with Metrics},
	abstract = {Bad Smells define in an informal way code flaws, in order to suggest refactorings, their aim is to improve the design of the code. Current taxonomies group code smells, making use of similarity or correlation criteria between them, and leading to a manual revision of the code. By other side, it is suggested the assistance of using metrics in the detection of bad smells. Metrics can be collected automatically helping to suggest the presence of flaws. Nevertheless, current taxonomies do not link these concepts. This work tries to establish additional criteria when we want to classify bad smells. These criteria are also related to metric features. Following the current classifications, we propose a method to evaluate the suitability of the tools assisting bad code smell detection, as well as selection and implementation of metrics linked with bad code smells.},
	author = {Marticorena, Raúl and López, Carlos and Crespo, Yania}
}

@book{marticorena_raul_parallel_????,
	title = {Parallel Inheritance Hierarchy: Detection from a Static View of the System},
	abstract = {We expose a case study of a bad smell detection through metrics. In practice, bad smell detection emerges from human observations. Metrics allow to obtain an objective view of the software, so they must be used as instruments to detect bad smells. Concretely, we focus in the bad smell: {\textless}em{\textgreater}Parallel Inheritance Hierarchy{\textless}/em{\textgreater}, using a metric subset. Although it is not a serious bad smell, however its detection is difficult in large and medium size systems. Besides, it is usually necessary to have several versions of the system to detect its presence. We define a process to manage the big amount of data extracted from a system to determine where exists this bad smell, only with an available version. The saving of time and effort in this process is showed as an advantage opposite other solutions.},
	author = {Marticorena, Raúl and López, Carlos and Crespo, Yania},
	keywords = {bad smell, metrics, refactoring inference, software evolution}
}

@mastersthesis{mathur_java_2011,
	title = {Java Smell Detector},
	url = {http://scholarworks.sjsu.edu/etd_projects/173},
	abstract = {``Code Smell" or ``Bad Smell", at the very least, is an indicator of badly written code and is often indicative of deeper problems in software design. In layman terms, it signals flaws in the core foundation or architecture of the software that can cause any number of more serious problems – from usability and runtime performance to supportability and enhancement. These problems can mostly be prevented by the systematic refactoring of the code. Refactoring is the process (and according to some, an ‘art’) of making incremental changes to existing source code to improve its nonfunctional attributes, without modifying its external functional behavior. Code smells are symptoms of deep-rooted problems in design, which, in most common cases, inhibit the understandability of the system for present and future programmers, hence rendering the program un-maintainable. The later these problems are identified, the costlier they are to correct as it is much harder to refactor a system in production and regression. Issues caused by refactoring can spiral out of control in advanced stages of the software development life cycle. So far, identification of these code smells has been thought of as an intuitive art rather than an exact science, as there are very few empirical measures or methodologies for doing so. In this project, I will examine each of the 22 code smells identified in prior research. I will implement Java Smell Detector ({JSD}), which will follow a scientific approach to detect five of these 22 code smells. {JSD} will give suggestions to refactor the code for all five of these smells. Further, the tool will provide an interactive process to refactor two of these cases; while for the rest, it will suggest an ideal refactoring technique that would need to be applied manually. I will be using Java code written by students of San Jose State University ({SJSU}) as test data for {JSD} and will compare its output against the code smells identified by the graduate students.},
	school = {San Jose State University},
	author = {Mathur, Mitin},
	year = {2011}
}

@inproceedings{miceli_metric_1999,
	title = {A metric based technique for design flaws detection and correction},
	url = {https://doi.org/10.1109/ASE.1999.802337},
	doi = {10.1109/ASE.1999.802337},
	abstract = {During the evolution of object-oriented ({OO}) systems, the preservation of correct design should be a permanent quest. However, for systems involving a large number of classes and which are subject to frequent modifications, the detection and correction of design flaws may be a complex and resource-consuming task. Automating the detection and correction of design flaws is a good solution to this problem. Various authors have proposed transformations that improve the quality of an {OO} system while preserving its behavior. In this paper, we propose a technique for automatically detecting situations where a particular transformation can be applied to improve the quality of a system. The detection process is based on analyzing the impact of various transformations on software metrics using quality estimation models},
	booktitle = {Automated Software Engineering, 1999. 14th {IEEE} International Conference on.},
	author = {Miceli, T. and Sahraoui, H.A. and Godin, R.},
	month = oct,
	year = {1999},
	keywords = {computer aided software engineering, error correction, error detection, object-oriented programming, object-oriented systems evolution, program debugging, program diagnostics, software design flaw correction, software design flaw detection, software metrics, software quality, software quality estimation models, software transformations, system behaviour preservation, system classes, system modifications},
	pages = {307--310}
}

@inproceedings{mihancea_towards_2005,
	title = {Towards the Optimization of Automatic Detection of Design Flaws in Object-Oriented Software Systems},
	url = {https://doi.org/10.1109/CSMR.2005.53},
	doi = {10.1109/CSMR.2005.53},
	abstract = {In order to increase the maintainability and the flexibility of a software, its design and implementation quality must be properly assessed. For this purpose a large number of metrics and several higher-level mechanisms based on metrics are defined in literature. But the accuracy of these quantification means is heavily dependent on the proper selection of threshold values, which is oftentimes totally empirical and unreliable. In this paper we present a novel method for establishing proper threshold values for metrics-based rules used to detect design flaws in object-oriented systems. The method, metaphorically called "tuning machine", is based on inferring the threshold values based on a set of reference examples, manually classified in "flawed" respectively "healthy" design entities (e.g., classes, methods). More precisely, the "tuning machine" searches, based on a genetic algorithm, for those thresholds which maximize the number of correctly classified entities. The paper also defines a repeatable process for collecting examples, and discusses the encouraging and intriguing results while applying the approach on two concrete metrics-based rules that quantify two well-known design flaws i.e., "God Class" and "Data Class".},
	booktitle = {Software Maintenance and Reengineering, 2005. {CSMR} 2005. Ninth European Conference on},
	author = {Mihancea, P.F. and Marinescu, R.},
	month = mar,
	year = {2005},
	keywords = {design flaws detection, genetic algorithm, genetic algorithms, metrics-based rules, object-oriented programming, object-oriented software system, optimization, program debugging, software maintenance, software metrics, threshold values, tuning machines},
	pages = {92--101}
}

@article{moha_decor:_2010,
	title = {{DECOR}: A Method for the Specification and Detection of Code and Design Smells},
	volume = {36},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2009.50},
	doi = {10.1109/TSE.2009.50},
	abstract = {Code and design smells are poor solutions to recurring implementation and design problems. They may hinder the evolution of a system by making it hard for software engineers to carry out changes. We propose three contributions to the research field related to code and design smells: (1) {DECOR}, a method that embodies and defines all the steps necessary for the specification and detection of code and design smells, (2) {DETEX}, a detection technique that instantiates this method, and (3) an empirical validation in terms of precision and recall of {DETEX}. The originality of {DETEX} stems from the ability for software engineers to specify smells at a high level of abstraction using a consistent vocabulary and domain-specific language for automatically generating detection algorithms. Using {DETEX}, we specify four well-known design smells: the antipatterns Blob, Functional Decomposition, Spaghetti Code, and Swiss Army Knife, and their 15 underlying code smells, and we automatically generate their detection algorithms. We apply and validate the detection algorithms in terms of precision and recall on {XERCES} v2.7.0, and discuss the precision of these algorithms on 11 open-source systems.},
	number = {1},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Moha, N. and Gu\'{e}h\'{e}neuc, Y.-G. and Duchien, L. and Le Meur, A.-F.},
	month = feb,
	year = {2010},
	keywords = {antipatterns Blob, code detection, code specification, {DECOR}, design smells, {DETEX}, domain-specific language, empirical validation, formal specification, functional decomposition, open-source systems, program verification, software quality, Spaghetti code, Swiss army knife},
	pages = {20--36}
}

@inproceedings{moha_automatic_2006,
	title = {Automatic Generation of Detection Algorithms for Design Defects},
	url = {https://doi.org/10.1109/ASE.2006.22},
	doi = {10.1109/ASE.2006.22},
	abstract = {Maintenance is recognised as the most difficult and expansive activity of the software development process. Numerous techniques and processes have been proposed to ease the maintenance of software. In particular, several authors published design defects formalising "bad" solutions to recurring design problems (e.g., anti-patterns, code smells). We propose a language and a framework to express design defects synthetically and to generate detection algorithms automatically. We show that this language is sufficient to describe some design defects and to generate detection algorithms, which have a good precision. We validate the generated algorithms on several programs},
	booktitle = {Automated Software Engineering, 2006. {ASE} '06. 21st {IEEE}/{ACM} International Conference on},
	author = {Moha, N. and Gu\'{e}h\'{e}neuc, Y.-G. and Leduc, P.},
	month = sep,
	year = {2006},
	keywords = {antipatterns, code smells, detection algorithm, formal specification, program debugging, program diagnostics, software design defects, software development, software maintenance},
	pages = {297--300}
}

@incollection{moha_domain_2008,
	series = {Lecture Notes in Computer Science},
	title = {A Domain Analysis to Specify Design Defects and Generate Detection Algorithms},
	volume = {4961},
	isbn = {978-3-540-78742-6},
	url = {http://dx.doi.org/10.1007/978-3-540-78743-3_20},
	abstract = {Quality experts often need to identify in software systems design defects, which are recurring design problems, that hinder development and maintenance. Consequently, several defect detection approaches and tools have been proposed in the literature. However, we are not aware of any approach that defines and reifies the process of generating detection algorithms from the existing textual descriptions of defects. In this paper, we introduce an approach to automate the generation of detection algorithms from specifications written using a domain-specific language. The domain-specific is defined from a thorough domain analysis. We specify several design defects, generate automatically detection algorithms using templates, and validate the generated detection algorithms in terms of precision and recall on Xerces v2.7.0, an open-source object-oriented system.},
	booktitle = {Fundamental Approaches to Software Engineering},
	publisher = {Springer Berlin / Heidelberg},
	author = {Moha, Naouel and Gu\'{e}h\'{e}neuc, Yann-Ga\"{e}l and Le Meur, Anne-Fran\c{c}oise and Duchien, Laurence},
	editor = {Fiadeiro, José and Inverardi, Paola},
	year = {2008},
	keywords = {Computer, Science},
	pages = {276--291}
}

@inproceedings{murphy-hill_seven_2008,
	address = {Atlanta, Georgia},
	series = {{RSSE} '08},
	title = {Seven habits of a highly effective smell detector},
	isbn = {978-1-60558-228-3},
	url = {http://doi.acm.org/10.1145/1454247.1454261},
	doi = {10.1145/1454247.1454261},
	abstract = {The process of refactoring code—changing its structure while preserving its meaning—has been identified as an important way of maintaining code quality over time. However, it is sometimes difficult for progammers to identify which pieces of code are in need of refactoring. "Smell detectors" are designed to help programmers in this task, but most smell detectors do not mesh well with "floss refactoring," the recommended tactic in which refactoring and programming are finely interleaved. In this paper we present a smell detector that we have built with floss refactoring in mind by combining seven habits that we postulate are important to consider when designing usable smell detectors. We hope that this combination can help the designers of future smell detectors build tools that align with the way that programmers refactor.},
	booktitle = {Proceedings of the 2008 international workshop on Recommendation systems for software engineering},
	publisher = {{ACM}},
	author = {Murphy-Hill, Emerson and Black, Andrew P.},
	year = {2008},
	keywords = {refactoring, smells, tools},
	pages = {36--40}
}

@inproceedings{perez_perspectives_2009,
	address = {Amsterdam, The Netherlands},
	series = {{IWPSE}-Evol '09},
	title = {Perspectives on automated correction of bad smells},
	isbn = {978-1-60558-678-6},
	url = {http://doi.acm.org/10.1145/1595808.1595827},
	doi = {10.1145/1595808.1595827},
	abstract = {Keeping a software system conformant with a desired architecture and consistent with good design principles is a recurring task during the software evolution process. Deviations from good design principles can manifest in the form of bad smells: problems in the system's structure that can negatively affect software quality factors. Many authors have worked in identifying bad smells and in removing them with refactorings: tools have been built to suggest refactorings; successful approaches to detect bad smells have been developed, etc.. We present a comprehensive and historical review on this subject, in order to model the current state of the art and to identify the open challenges, current trends and research opportunities. We also propose a technique based on automated planning, aimed at taking one step forward in the automatic improvement of a system's structure. This proposal will allow computing complex refactoring sequences which can be directed to the achievement of a certain objective, such as the correction of bad smells.},
	booktitle = {Proceedings of the joint international and annual {ERCIM} workshops on Principles of software evolution ({IWPSE}) and software evolution (Evol) workshops},
	publisher = {{ACM}},
	author = {P\'{e}rez, Javier and Crespo, Yania},
	year = {2009},
	keywords = {automated planning, bad smells, refactoring},
	pages = {99--108}
}

@book{pizka_straightening_????,
	title = {Straightening Spaghetti-Code with Refactoring?},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.61.8149},
	abstract = {Changes to software systems often entail a loss of quality, especially if they have to be accomplished under pressure of time. Long-term software projects must counter this phenomenon one way or the other to preserve long-term maintainability. This paper presents the results of a case study trying to improve an extensive low-quality code base by object-oriented and tool-supported refactoring. To obtain practically relevant experiences this case study was conducted within an on-going commercial...},
	author = {Pizka, Markus},
	keywords = {experience, refactoring}
}

@inproceedings{polasek_extended_2012,
	title = {On extended Similarity Scoring and Bit-vector Algorithms for design smell detection},
	url = {https://doi.org/10.1109/INES.2012.6249814},
	doi = {10.1109/INES.2012.6249814},
	abstract = {The occurrence of design smells or anti-patterns in software models complicate development process and reduce the software quality. The contribution proposes an extension to Similarity Scoring Algorithm and Bit-vector Algorithm, originally used for design patterns detection. This paper summarizes both original approaches, important differences between design patterns and anti-patterns structures, modifications and extensions of algorithms and their application to detect selected design smells.},
	booktitle = {Intelligent Engineering Systems ({INES}), 2012 {IEEE} 16th International Conference on},
	author = {Polasek, I. and Liska, P. and Kelemen, J. and Lang, J.},
	month = jun,
	year = {2012},
	keywords = {anti-pattern occurrence, bit-vector algorithm, design pattern detection, design smell detection, design smell occurrence, similarity scoring algorithm, software development process, software maintenance, software model, software quality},
	pages = {115--120}
}

@inproceedings{rapu_using_2004,
	title = {Using history information to improve design flaws detection},
	url = {https://doi.org/10.1109/CSMR.2004.1281423},
	doi = {10.1109/CSMR.2004.1281423},
	abstract = {As systems evolve and their structure decays, maintainers need accurate and automatic identification of the design problems. Current approaches for automatic detection of design problems are not accurate enough because they analyze only a single version of a system and consequently they miss essential information as design problems appear and evolve over time. Our approach is to use the historical information of the suspected flawed structure to increase the accuracy of the automatic problem detection. Our means is to define measurements which summarize how persistent the problem was and how much maintenance effort was spent on the suspected structure. We apply our approach on a large scale case study and show how it improves the accuracy of the detection of god classes and data classes, and additionally how it adds valuable semantical information about the evolution of flawed design structures.},
	booktitle = {Software Maintenance and Reengineering, 2004. {CSMR} 2004. Proceedings. Eighth European Conference on},
	author = {Ra\c{t}iu, D. and Ducasse, S. and Girba, T. and Marinescu, R.},
	month = mar,
	year = {2004},
	keywords = {data class, design flaws detection, god class, object-oriented programming, program debugging, quality assurance, software evolution, software maintenance, software metrics, software prototyping},
	pages = {223--232}
}

@article{ratiu_evolution-enriched_2004,
	title = {Evolution-enriched detection of god classes},
	journal = {Proc. of the 2nd {CAVIS}},
	author = {Ra\c{t}iu, D. and Marinescu, R. and Ducasse, S. and Girba, T.},
	year = {2004},
	pages = {3--7}
}

@phdthesis{roperia_jsmell:_2009,
	title = {{JSmell}: A Bad Smell Detection Tool for Java Systems},
	abstract = {Bad-Smells in software are patterns of poor design and bad programming. These patterns can be removed from the software system by using refactoring techniques which improve the readability, maintainability and comprehension of the software system. This thesis describes an automated bad smell detection process in the Java source-code by static analysis of code-structure. A prototype tool, {JSmell}, has been developed to detect the bad smell. Once the bad smell has been detected by the tool, various refactoring techniques are suggested to eliminate the smell. The developers can then focus on the elimination of poor design constructs. The analysis and detection process involves software-metrics evaluation and parsing technique, respectively. The success rate for bad smell detection process is 85\%-90\% when tested against seven different test cases for a single version of system. {JSmell} also represents the structural analysis of source code in terms of classes, methods and data fields which facilitates the developers in understanding the high level system architecture.},
	school = {California State University, Long Beach},
	author = {Roperia, Naveen},
	month = aug,
	year = {2009},
	keywords = {Bad-smell, code smell, design defects, Lexer, object-oriented design, Parser, refactoring, reverse engineering, software maintenance, software metrics, Source-code, taxonomy}
}

@inproceedings{salehie_metric-based_2006,
	author={Salehie, M. and Li, Shimin and Tahvildari, L.},
	booktitle={14th IEEE International Conference on Program Comprehension (ICPC'06)},
	title={A Metric-Based Heuristic Framework to Detect Object-Oriented Design Flaws},
	year={2006},
	volume={},
	number={},
	pages={159--168},
	keywords={object-oriented programming;program debugging;software maintenance;software metrics;software quality;systems re-engineering;JBoss application server;design quality;knowledge-base;metric-based heuristic framework;object-oriented design flaw detection;open source J2EE platform;software maintenance;software re-engineering;source code;Application software;Diagnostic expert systems;Medical diagnosis;Medical expert systems;Open source software;Phase detection;Phase measurement;Process design;Software design;Software systems},
	url = {https://doi.org/10.1109/ICPC.2006.6},
	doi = {10.1109/ICPC.2006.6},
	ISSN={1092-8138},
	month={},
}

@inproceedings{schumacher_building_2010,
	address = {Bolzano-Bozen, Italy},
	series = {{ESEM} '10},
	title = {Building empirical support for automated code smell detection},
	isbn = {978-1-4503-0039-1},
	url = {http://doi.acm.org/10.1145/1852786.1852797},
	doi = {10.1145/1852786.1852797},
	abstract = {Identifying refactoring opportunities in software systems is an important activity in today's agile development environments. The concept of code smells has been proposed to characterize different types of design shortcomings in code. Additionally, metric-based detection algorithms claim to identify the "smelly" components automatically. This paper presents results for an empirical study performed in a commercial environment. The study investigates the way professional software developers detect god class code smells, then compares these results to automatic classification. The results show that, even though the subjects perceive detecting god classes as an easy task, the agreement for the classification is low. Misplaced methods are a strong driver for letting subjects identify god classes as such. Earlier proposed metric-based detection approaches performed well compared to the human classification. These results lead to the conclusion that an automated metric-based pre-selection decreases the effort spent on manual code inspections. Automatic detection accompanied by a manual review increases the overall confidence in the results of metric-based classifiers.},
	booktitle = {Proceedings of the 2010 {ACM}-{IEEE} International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{ACM}},
	author = {Schumacher, Jan and Zazworka, Nico and Shull, Forrest and Seaman, Carolyn and Shaw, Michele},
	year = {2010},
	keywords = {code inspection, code smells, empirical study, god class, maintainability},
	pages = {8:1--8:10}
}

@article{slinger_code_2005,
	title = {Code Smell Detection in Eclipse},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.95.4897},
	abstract = {Refactoring is a software engineering technique that, by applying a series of small behavior-preserving transformations, can improve a software system’s design, readability and extensibility. Code smells are signs that indicate that source code might need refactoring. The goal of this thesis project was to develop a prototype of a code smell detection plug-in for the Eclipse {IDE} framework. In earlier research by Van Emden and Moonen, a tool was developed to detect code smells in Java source code and visualize them in graph views. {CodeNose}, the plug-in prototype created in this thesis project, presents code smells in the Tasks View in Eclipse, similar to the way compiler errors and warnings are presented. These code smell reports provide feedback about the quality of a software system. {CodeNose} uses the Eclipse {JDT} parser to build abstract syntax trees that represent the source code. A tree visitor detects primitive code smells and collects derived smell aspects, which are written to a fact database and},
	author = {Slinger, Stefan and Ing, Dr and Moonen, L. M. F.},
	year = {2005}
}

@inproceedings{trifu_diagnosing_2005,
	title = {Diagnosing design problems in object oriented systems},
	url = {https://doi.org/10.1109/WCRE.2005.15},
	doi = {10.1109/WCRE.2005.15},
	abstract = {Software decay is a phenomenon that plagues aging software systems. While in recent years, there has been significant progress in the area of automatic detection of "code smells" on one hand, and code refactorings on the other hand, we claim that existing restructuring practices are seriously hampered by their symptomatic and informal (non-repeatable) nature. This paper makes a clear distinction between structural problems and structural symptoms (also known as code smells), and presents a novel, causal approach to restructuring object oriented systems. Our approach is based on two innovations: the encapsulation of correlations of symptoms and additional contextual information into higher-level design problems, and the univocal, explicit mapping of problems to unique refactoring solutions. Due to its explicit, repeatable nature, the approach shows high potential for increased levels of automation in the restructuring process, and consequently a decrease in maintenance costs.},
	booktitle = {Reverse Engineering, 12th Working Conference on},
	author = {Trifu, A. and Marinescu, R.},
	month = nov,
	year = {2005},
	keywords = {aging software system, automatic code smell detection, code refactoring solution, contextual information, explicit mapping, object-oriented programming, object-oriented system design, object-oriented system diagnosis, object-oriented system restructuring, program diagnostics, software decay, software maintenance, structural symptom encapsulation},
	pages = {10}
}

@inproceedings{tsantalis_jdeodorant:_2008,
	title = {{JDeodorant}: Identification and Removal of Type-Checking Bad Smells},
	url = {https://doi.org/10.1109/CSMR.2008.4493342},
	doi = {10.1109/CSMR.2008.4493342},
	abstract = {In this demonstration, we present an Eclipse plug-in that automatically identifies type-checking bad smells in Java source code, and resolves them by applying the "replace conditional with polymorphism" or "replace type code with state/strategy " refactorings. To the best of our knowledge there is a lack of tools that identify type-checking bad smells. Moreover, none of the state-of-the-art {IDEs} support the refactorings that resolve such kind of bad smells.},
	booktitle = {Software Maintenance and Reengineering, 2008. {CSMR} 2008. 12th European Conference on},
	author = {Tsantalis, N. and Chaikalis, T. and Chatzigeorgiou, A.},
	month = apr,
	year = {2008},
	keywords = {Eclipse plug-in, Java, Java source code, {JDeodorant}, polymorphism, refactorings, software maintenance, software quality, source coding, type-checking bad smells},
	pages = {329--331}
}

@inproceedings{van_rompaey_characterizing_2006,
	title = {Characterizing the Relative Significance of a Test Smell},
	url = {http://dx.doi.org/10.1109/ICSM.2006.18},
	doi = {10.1109/ICSM.2006.18},
	abstract = {Test code, just like any other code we write, erodes when frequently changed. As such, refactoring, which has been shown to impact maintainability and comprehensibility, can be part of a solution to counter this erosion. We propose a metric-based heuristical approach, which allows to rank occurrences of so-called test smells (i.e. symptoms of poorly designed tests) according to their relative significance. This ranking can subsequently be used to start refactoring. Through an open-source case study, {ArgoUML}, we demonstrate that we are able to identify those test cases who violate unit test criteria},
	booktitle = {Software Maintenance, 2006. {ICSM} '06. 22nd {IEEE} International Conference on},
	author = {Van Rompaey, B. and Du Bois, B. and Demeyer, S.},
	month = sep,
	year = {2006},
	keywords = {{ArgoUML}, code comprehensibility, code maintainability, code refactoring, metric-based heuristical approach, open-source case study, poorly designed tests, software maintenance, software metrics, test code, test smell relative significance, Unified Modeling Language},
	pages = {391--400}
}

@inproceedings{tempero_qualitas_2010,
	title = {The {Qualitas} {Corpus}: {A} {Curated} {Collection} of {Java} {Code} for {Empirical} {Studies}},
	url = {https://doi.org/10.1109/APSEC.2010.46},
	doi = {10.1109/APSEC.2010.46},
	abstract = {In order to increase our ability to use measurement to support software development practise we need to do more analysis of code. However, empirical studies of code are expensive and their results are difficult to compare. We describe the Qualitas Corpus, a large curated collection of open source Java systems. The corpus reduces the cost of performing large empirical studies of code and supports comparison of measurements of the same artifacts. We discuss its design, organisation, and issues associated with its development.},
	booktitle = {Software {Engineering} {Conference} ({APSEC}), 2010 17th {Asia} {Pacific}},
	author = {Tempero, E. and Anslow, C. and Dietrich, J. and Han, T. and Li, Jing and Lumpe, M. and Melton, H. and Noble, J.},
	month = dec,
	year = {2010},
	keywords = {Benchmark testing, codes, curated code corpus, curated collection, empirical studies, experimental infrastructure, Java, Java code, libraries, open source Java systems, Pragmatics, Qualitas Corpus, Software, software development, software engineering},
	pages = {336--345}
}

@article{hall_code_2014,
	title = {Some {Code} {Smells} {Have} a {Significant} but {Small} {Effect} on {Faults}},
	volume = {23},
	issn = {1049331X},
	url = {https://doi.org/10.1145/2629648},
	doi = {10.1145/2629648},
	language = {en},
	number = {4},
	urldate = {2015-09-20},
	journal = {ACM Transactions on Software Engineering and Methodology},
	author = {Hall, Tracy and Zhang, Min and Bowes, David and Sun, Yi},
	month = sep,
	year = {2014},
	pages = {1--39}
}

@incollection{murgante_recognizing_2014,
	address = {Cham},
	title = {Recognizing {Antipatterns} and {Analyzing} {Their} {Effects} on {Software} {Maintainability}},
	volume = {8583},
	isbn = {978-3-319-09155-6 978-3-319-09156-3},
	url = {http://link.springer.com/10.1007/978-3-319-09156-3_25},
	urldate = {2015-09-20},
	booktitle = {Computational {Science} and {Its} {Applications} – {ICCSA} 2014},
	publisher = {Springer International Publishing},
	author = {B\'{a}n, D\'{e}nes and Ferenc, Rudolf},
	editor = {Murgante, Beniamino and Misra, Sanjay and Rocha, Ana Maria A. C. and Torre, Carmelo and Rocha, Jorge Gustavo and Falcão, Maria Irene and Taniar, David and Apduhan, Bernady O. and Gervasi, Osvaldo},
	year = {2014},
	pages = {337--352}
}

@article{van_rompaey_detection_2007,
	title = {On The Detection of Test Smells: A Metrics-Based Approach for General Fixture and Eager Test},
	volume = {33},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2007.70745},
	doi = {10.1109/TSE.2007.70745},
	abstract = {As a fine-grained defect detection technique, unit testing introduces a strong dependency on the structure of the code. Accordingly, test coevolution forms an additional burden on the software developer which can be tempered by writing tests in a manner that makes them easier to change. Fortunately, we are able to concretely express what a good test is by exploiting the specific principles underlying unit testing. Analogous to the concept of code smells, violations of these principles are termed test smells. In this paper, we clarify the structural deficiencies encapsulated in test smells by formalizing core test concepts and their characteristics. To support the detection of two such test smells, General Fixture and Eager Test, we propose a set of metrics defined in terms of unit test concepts. We compare their detection effectiveness using manual inspection and through a comparison with human reviewing. Although the latter is the traditional means for test quality assurance, our results indicate it is not a reliable means for test smell detection. This work thus stresses the need for a more reliable detection mechanism and provides an initial contribution through the validation of test smell metrics.},
	number = {12},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Van Rompaey, B. and Du Bois, B. and Demeyer, S. and Rieger, M.},
	month = dec,
	year = {2007},
	keywords = {code structure, eager test, fine-grained defect detection technique, general fixture, human review, manual inspection, metrics-based approach, program testing, reliable detection mechanism, software developer, software metrics, test quality assurance, test smell detection},
	pages = {800 --817}
}

@article{walter_multi-criteria_2005,
	title = {Multi-criteria Detection of Bad Smells in Code with {UTA} Method},
	volume = {3556},
	url = {http://dx.doi.org/10.1007/11499053_18},
	doi = {10.1007/11499053_18},
	abstract = {Bad smells are indicators of inappropriate code design and implementation. They suggest a need for refactoring, i.e. restructuring the program towards better readability, understandability and eligibility for changes. Smells are defined only in terms of general, subjective criteria, which makes them difficult for automatic identification. Existing approaches to smell detection base mainly on human intuition, usually supported by code metrics. Unfortunately, these models do not comprise the full spectrum of possible smell symptoms and still are uncertain. In the paper we propose a multi-criteria approach for detecting smells adopted from {UTA} method. It learns from programmer’s preferences, and then combines the signals coming from different sensors in the code and computes their utility functions. The final result reflects the intensity of an examined smell, which allows the programmer to make a ranking of most onerous odors.},
	journal = {Extreme Programming and Agile Processes in Software Engineering},
	author = {Walter, Bartosz and Pietrzak, Błażej},
	year = {2005},
	pages = {1159--1161}
}

@inproceedings{wettel_visually_2008,
	address = {Ammersee, Germany},
	series = {{SoftVis} '08},
	title = {Visually localizing design problems with disharmony maps},
	isbn = {978-1-60558-112-5},
	url = {http://doi.acm.org/10.1145/1409720.1409745},
	doi = {10.1145/1409720.1409745},
	abstract = {Assessing the quality of software design is difficult, as "design" is expressed through guidelines and heuristics, not rigorous rules. One successful approach to assess design quality is based on detection strategies, which are metrics-based composed logical conditions, by which design fragments with specific properties are detected in the source code. Such detection strategies, when executed on large software systems usually return large sets of artifacts, which potentially exhibit one or more "design disharmonies", which are then inspected manually, a cumbersome activity. In this article we present disharmony maps, a visualization-based approach to locate such flawed software artifacts in large systems. We display the whole system using a 3D visualization technique based on a city metaphor. We enrich such visualizations with the results returned by a number of detection strategies, and thus render both the static structure and the design problems that affect a subject system. We evaluate our approach on a number of open-source Java systems and report on our findings.},
	booktitle = {Proceedings of the 4th {ACM} symposium on Software visualization},
	publisher = {{ACM}},
	author = {Wettel, Richard and Lanza, Michele},
	year = {2008},
	keywords = {software design anomalies, software visualization},
	pages = {155--164}
}

@article{wong_detecting_????,
	title = {Detecting Design Rule Violations},
	author = {Wong, S. and Cai, Y. and Kim, M. and Dalton, M.}
}

@inproceedings{wong_detecting_2011,
	title = {Detecting software modularity violations},
	url = {http://dx.doi.org/10.1145/1985793.1985850},
	doi = {10.1145/1985793.1985850},
	abstract = {This paper presents Clio, an approach that detects modularity violations, which can cause software defects, modularity decay, or expensive refactorings. Clio computes the discrepancies between how components should change together based on the modular structure, and how components actually change together as revealed in version history. We evaluated Clio using 15 releases of Hadoop Common and 10 releases of Eclipse {JDT}. The results show that hundreds of violations identified using Clio were indeed recognized as design problems or refactored by the developers in later versions. The identified violations exhibit multiple symptoms of poor design, some of which are not easily detectable using existing approaches.},
	booktitle = {Software Engineering ({ICSE}), 2011 33rd International Conference on},
	author = {Wong, S. and Cai, Yuanfang and Kim, Miryung and Dalton, M.},
	month = may,
	year = {2011},
	keywords = {bad code smells, Clio, Cloning, Couplings, design structure matrix, expensive refactorings, Games, History, modularity decay, modularity violation detection, modular structure, refactoring, Software, software defect, software maintenance, software modularity violation, Unified Modeling Language, {USA} Councils},
	pages = {411--420}
}

@misc{_omg_2011,
	title = {{OMG} {Unified} {Modeling} {Language}\texttrademark\ ({OMG} {UML}), {Infrastructure}},
	url = {http://www.omg.org/spec/UML/2.4.1/Infrastructure/PDF/},
	publisher = {Object Management Group},
	month = aug,
	year = {2011}
}

@misc{omg_ocl_2014,
	title = {{Object} {Constraint} {Language}},
	url = {http://www.omg.org/spec/OCL/2.4/PDF/},
	publisher = {Object Management Group},
	month = feb,
	year = {2014}
}

@article{zhang_code_2011,
	title = {Code Bad Smells: a review of current knowledge},
	volume = {23},
	url = {http://dx.doi.org/10.1002/smr.521},
	doi = {10.1002/smr.521},
	abstract = {Fowler et al. identified 22 Code Bad Smells to direct the effective refactoring of code. These are increasingly being taken up by software engineers. However, the empirical basis of using Code Bad Smells to direct refactoring and to address 'trouble' in code is not clear, i.e., we do not know whether using Code Bad Smells to target code improvement is effective. This paper aims to identify what is currently known about Code Bad Smells. We have performed a systematic literature review of 319 papers published since Fowler et al. identified Code Bad Smells (2000 to June 2009). We analysed in detail 39 of the most relevant papers. Our findings indicate that Duplicated Code receives most research attention, whereas some Code Bad Smells, e.g., Message Chains, receive little. This suggests that our knowledge of some Code Bad Smells remains insufficient. Our findings also show that very few studies report on the impact of using Code Bad Smells, with most studies instead focused on developing tools and methods to automatically detect Code Bad Smells. This indicates an important gap in the current knowledge of Code Bad Smells. Overall this review suggests that there is little evidence currently available to justify using Code Bad Smells. Copyright \copyright 2010 John Wiley \& Sons, Ltd.},
	number = {3},
	journal = {J. Softw. Maint. Evol.: Res. Pract.},
	author = {Zhang, Min and Hall, Tracy and Baddoo, Nathan},
	year = {2011},
	keywords = {code bad smells, empirical software engineering, refactoring, Systematic Literature Review},
	pages = {179--202}
}

@article{marinescu_assessing_2012,
	title = {Assessing and Improving Object-Oriented Design},
	author = {Marinescu, Radu},
	year = {2012}
}

@inproceedings{ligu_identification_2013,
	title = {Identification of Refused Bequest Code Smells},
	isbn = {978-0-7695-4981-1},
	url = {https://doi.org/10.1109/ICSM.2013.55},
	doi = {10.1109/ICSM.2013.55},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Ligu, Elvis and Chatzigeorgiou, Alexander and Chaikalis, Theodore and Ygeionomakis, Nikolaos},
	month = sep,
	year = {2013},
	pages = {392--395}
}

@inproceedings{roubtsov_detecting_2010,
	title = {Detecting Modularity "Smells" in Dependencies Injected with Java Annotations},
	isbn = {978-1-61284-369-8},
	url = {https://doi.org/10.1109/CSMR.2010.45},
	doi = {10.1109/CSMR.2010.45},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Roubtsov, S and Serebrenik, A and van den Brand, M},
	month = mar,
	year = {2010},
	pages = {244--247}
}

@inproceedings{oliveto_numerical_2010,
	title = {Numerical Signatures of Antipatterns: An Approach Based on B-Splines},
	isbn = {978-1-61284-369-8},
	shorttitle = {Numerical Signatures of Antipatterns},
	url = {https://doi.org/10.1109/CSMR.2010.47},
	doi = {10.1109/CSMR.2010.47},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Oliveto, R and Khomh, F and Antoniol, G and Gu\'{e}h\'{e}neuc, Y},
	month = mar,
	year = {2010},
	pages = {248--251}
}

@inproceedings{arnaoudova_new_2013,
	title = {A New Family of Software Anti-patterns: Linguistic Anti-patterns},
	isbn = {978-0-7695-4948-4, 978-1-4673-5833-0},
	shorttitle = {A New Family of Software Anti-patterns},
	url = {https://doi.org/10.1109/CSMR.2013.28},
	doi = {10.1109/CSMR.2013.28},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Arnaoudova, Venera and Di Penta, Massimiliano and Antoniol, Giuliano and Gu\'{e}h\'{e}neuc, Yann-Gael},
	month = mar,
	year = {2013},
	pages = {187--196}
}

@inproceedings{trifu_automated_2004,
	title = {Automated design flaw correction in object-oriented systems},
	isbn = {0-7695-2107-X},
	url = {https://doi.org/10.1109/CSMR.2004.1281418},
	doi = {10.1109/CSMR.2004.1281418},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Trifu, A. and Seng, O. and Genssler, T.},
	year = {2004},
	pages = {174--183}
}

@inproceedings{_assuring_2012,
	title = {Assuring software quality by code smell detection},
	isbn = {978-0-7695-4891-3, 978-1-4673-4536-1},
	url = {https://doi.org/10.1109/WCRE.2012.69},
	doi = {10.1109/WCRE.2012.69},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	month = oct,
	year = {2012},
	pages = {xix--xix}
}

@inproceedings{abebe_lexicon_2009,
	title = {Lexicon Bad Smells in Software},
	isbn = {978-0-7695-3867-9},
	url = {https://doi.org/10.1109/WCRE.2009.26},
	doi = {10.1109/WCRE.2009.26},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Abebe, Surafel Lemma and Haiduc, Sonia and Tonella, Paolo and Marcus, Andrian},
	year = {2009},
	pages = {95--99}
}

@inproceedings{zazworka_codevizard:_2010,
	address = {Bolzano-Bozen, Italy},
	series = {{ESEM} '10},
	title = {{CodeVizard}: a tool to aid the analysis of software evolution},
	isbn = {978-1-4503-0039-1},
	url = {http://doi.acm.org/10.1145/1852786.1852865},
	doi = {10.1145/1852786.1852865},
	abstract = {This extended poster abstract presents a software visualization tool ({CodeVizard}) that helps researchers and managers to analyze software repository data. The tool focuses on identifying areas of risks in software development projects, such as: Code Smells, degrading architectures, increasing software complexity, lack of documentation, process violations, and issues of code ownership. {CodeVizard} has been used to support six empirical studies, whose results have been published. This extended abstract gives a short summary of the important empirical results and features.},
	booktitle = {Proceedings of the 2010 {ACM}-{IEEE} International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{ACM}},
	author = {Zazworka, Nico and Ackermann, Christopher},
	year = {2010},
	keywords = {code ownership, code smells, process violations, software evolution, software repositories, software visualization},
	pages = {63:1--63:1}
}

@inproceedings{arnaoudova_improving_2010,
	title = {Improving Source Code Quality through the Definition of Linguistic Antipatterns},
	isbn = {978-1-4244-8911-4},
	url = {https://doi.org/10.1109/WCRE.2010.41},
	doi = {10.1109/WCRE.2010.41},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Arnaoudova, Venera},
	month = oct,
	year = {2010},
	pages = {285--288}
}

@inproceedings{dambros_relationship_2009,
	title = {On the Relationship Between Change Coupling and Software Defects},
	isbn = {978-0-7695-3867-9},
	url = {https://doi.org/10.1109/WCRE.2009.19},
	doi = {10.1109/WCRE.2009.19},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {D'Ambros, Marco and Lanza, Michele and Robbes, Romain},
	year = {2009},
	pages = {135--144}
}

@inproceedings{rieger_insights_2004,
	title = {Insights into system-wide code duplication},
	isbn = {0-7695-2243-2},
	url = {https://10.1109/WCRE.2004.25},
	doi = {10.1109/WCRE.2004.25},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Rieger, M. and Ducasse, S. and Lanza, M.},
	year = {2004},
	pages = {100--109}
}

@inproceedings{palomba_detecting_2013,
	title = {Detecting bad smells in source code using change history information},
	isbn = {978-1-4799-0215-6},
	url = {https://doi.org/10.1109/ASE.2013.6693086},
	doi = {10.1109/ASE.2013.6693086},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea and Poshyvanyk, Denys},
	month = nov,
	year = {2013},
	pages = {268--278}
}

@inproceedings{binkley_dependence_2008,
	title = {Dependence Anti Patterns},
	isbn = {978-1-4244-2776-5},
	url = {https://doi.org/10.1109/ASEW.2008.4686318},
	doi = {10.1109/ASEW.2008.4686318},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Binkley, David and Gold, Nicolas and Harman, Mark and Li, Zheng and Mahdavi, Kiarash and Wegener, Joachim},
	month = sep,
	year = {2008},
	pages = {25--34}
}

@inproceedings{fontana_code_2013,
	title = {Code Smell Detection: Towards a Machine Learning-Based Approach},
	isbn = {978-0-7695-4981-1},
	shorttitle = {Code Smell Detection},
	url = {https://doi.org/10.1109/ICSM.2013.56},
	doi = {10.1109/ICSM.2013.56},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Fontana, Francesca Arcelli and Zanoni, Marco and Marino, Alessandro and Mantyla, Mika V.},
	month = sep,
	year = {2013},
	pages = {396--399}
}

@article{arcelli_fontana_comparing_2015,
	title = {Comparing and experimenting machine learning techniques for code smell detection},
	issn = {1382-3256, 1573-7616},
	url = {http://link.springer.com/10.1007/s10664-015-9378-4},
	doi = {10.1007/s10664-015-9378-4},
	language = {en},
	urldate = {2015-09-21},
	journal = {Empirical Software Engineering},
	author = {Arcelli Fontana, Francesca and Mäntylä, Mika V. and Zanoni, Marco and Marino, Alessandro},
	month = jun,
	year = {2015}
}

@inproceedings{bakota_clone_2007,
	title = {Clone Smells in Software Evolution},
	isbn = {978-1-4244-1255-6, 978-1-4244-1256-3},
	url = {https://doi.org/10.1109/ICSM.2007.4362615},
	doi = {10.1109/ICSM.2007.4362615},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Bakota, Tibor and Ferenc, Rudolf and Gyimothy, Tibor},
	month = oct,
	year = {2007},
	pages = {24--33}
}

@inproceedings{bakota_probabilistic_2011,
	title = {A probabilistic software quality model},
	isbn = {978-1-4577-0664-6 978-1-4577-0663-9 978-1-4577-0662-2},
	url = {https://doi.org/10.1109/ICSM.2011.6080791},
	doi = {10.1109/ICSM.2011.6080791},
	urldate = {2014-10-09},
	publisher = {IEEE},
	author = {Bakota, Tibor and Hegedus, Peter and Kortvelyesi, Peter and Ferenc, Rudolf and Gyimothy, Tibor},
	month = sep,
	year = {2011},
	pages = {243--252}
}

@inproceedings{tie_feng_software_2004,
	title = {Software design improvement through anti-patterns identification},
	isbn = {0-7695-2213-0},
	url = {https://doi.org/10.1109/ICSM.2004.1357866},
	doi = {10.1109/ICSM.2004.1357866},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {{Tie Feng} and {Jiachen Zhang} and {Hongyuan Wang} and {Xian Wang}},
	year = {2004},
	pages = {524--524}
}

@inproceedings{bertran_detecting_2011,
	title = {Detecting architecturally-relevant code smells in evolving software systems},
	isbn = {9781450304450},
	url = {https://doi.org/10.1145/1985793.1986003},
	doi = {10.1145/1985793.1986003},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Bertran, Isela Macia},
	year = {2011},
	pages = {1090}
}

@inproceedings{munro_product_2005,
	title = {Product Metrics for Automatic Identification of "Bad Smell" Design Problems in Java Source-Code},
	isbn = {0-7695-2371-4},
	url = {https://doi.org/10.1109/METRICS.2005.38},
	doi = {10.1109/METRICS.2005.38},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Munro, M.J.},
	year = {2005},
	pages = {15--15}
}

@inproceedings{wohlin_understanding_2000,
	title = {Understanding the sources of software defects: a filtering approach},
	isbn = {0-7695-0656-9},
	shorttitle = {Understanding the sources of software defects},
	url = {https://doi.org/10.1109/WPC.2000.852475},
	doi = {10.1109/WPC.2000.852475},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Wohlin, C. and Host, M. and Ohlsson, M.C.},
	year = {2000},
	pages = {9--17}
}

@inproceedings{balint_how_2006,
	title = {How Developers Copy},
	isbn = {0-7695-2601-2},
	url = {https://doi.org/10.1109/ICPC.2006.25},
	doi = {10.1109/ICPC.2006.25},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Balint, M. and Marinescu, R. and Girba, T.},
	year = {2006},
	pages = {56--68}
}

@inproceedings{wagner_model_2006,
	title = {A model and sensitivity analysis of the quality economics of defect-detection techniques},
	isbn = {1595932631},
	url = {https://doi.org/10.1145/1146238.1146247},
	doi = {10.1145/1146238.1146247},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Wagner, Stefan},
	year = {2006},
	pages = {73}
}

@book{wagner_software_2013,
	address = {Berlin, Heidelberg},
	title = {Software {Product} {Quality} {Control}},
	isbn = {978-3-642-38570-4 978-3-642-38571-1},
	url = {http://link.springer.com/10.1007/978-3-642-38571-1},
	language = {en},
	urldate = {2015-03-31},
	publisher = {Springer Berlin Heidelberg},
	author = {Wagner, Stefan},
	year = {2013}
}

@article{ouni_maintainability_2013,
	title = {Maintainability defects detection and correction: a multi-objective approach},
	volume = {20},
	issn = {0928-8910, 1573-7535},
	shorttitle = {Maintainability defects detection and correction},
	url = {http://link.springer.com/10.1007/s10515-011-0098-8},
	doi = {10.1007/s10515-011-0098-8},
	language = {en},
	number = {1},
	urldate = {2014-09-28},
	journal = {Automated Software Engineering},
	author = {Ouni, Ali and Kessentini, Marouane and Sahraoui, Houari and Boukadoum, Mounir},
	month = mar,
	year = {2013},
	pages = {47--79}
}

@article{khomh_bdtex:_2011,
	title = {{BDTEX}: A {GQM}-based Bayesian approach for the detection of antipatterns},
	volume = {84},
	issn = {01641212},
	shorttitle = {{BDTEX}},
	url = {https://doi.org/10.1016/j.jss.2010.11.921},
	doi = {10.1016/j.jss.2010.11.921},
	language = {en},
	number = {4},
	urldate = {2014-09-28},
	journal = {Journal of Systems and Software},
	author = {Khomh, Foutse and Vaucher, Stephane and Guéhéneuc, Yann-Gaël and Sahraoui, Houari},
	month = apr,
	year = {2011},
	pages = {559--572}
}

@article{figueiredo_applying_2012,
	title = {Applying and evaluating concern-sensitive design heuristics},
	volume = {85},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2011.09.060},
	doi = {10.1016/j.jss.2011.09.060},
	language = {en},
	number = {2},
	urldate = {2014-09-28},
	journal = {Journal of Systems and Software},
	author = {Figueiredo, Eduardo and Sant’Anna, Claudio and Garcia, Alessandro and Lucena, Carlos},
	month = feb,
	year = {2012},
	pages = {227--243}
}

@article{yamashita_what_2013,
	title = {To what extent can maintenance problems be predicted by code smell detection? – An empirical study},
	volume = {55},
	issn = {09505849},
	shorttitle = {To what extent can maintenance problems be predicted by code smell detection?},
	url = {https://doi.org/10.1016/j.infsof.2013.08.002},
	doi = {10.1016/j.infsof.2013.08.002},
	language = {en},
	number = {12},
	urldate = {2014-09-28},
	journal = {Information and Software Technology},
	author = {Yamashita, Aiko and Moonen, Leon},
	month = dec,
	year = {2013},
	pages = {2223--2242}
}

@article{santos_how_????,
	title = {How developers deal with Code Smells: the case of the {SourceMiner} Evolution team},
	author = {Santos, Alcemir Rodrigues and de Freitas Farias, Mário André and de Almeida, Eduardo Santana and Mendonça, Manoel and Sant’Anna, Claudio}
}

@article{palomba_they_????,
	title = {Do they Really Smell Bad? A Study on Developers’ Perception of Bad Code Smells},
	author = {Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea}
}

@article{santos_identifying_????,
	title = {Identifying strategies on god class detection in two controlled experiments},
	author = {Santos, José Amancio M and de Mendonça, Manoel G}
}

@article{ferme_is_????,
	title = {Is it a Real Code Smell to be Removed or not?},
	author = {Ferme, Vincenzo and Marino, Alessandro and Fontana, Francesca Arcelli}
}

@article{ouni_prioritizing_2014,
	title = {Prioritizing code-smells correction tasks using chemical reaction optimization},
	issn = {0963-9314, 1573-1367},
	url = {http://link.springer.com/10.1007/s11219-014-9233-7},
	doi = {10.1007/s11219-014-9233-7},
	language = {en},
	urldate = {2014-10-13},
	journal = {Software Quality Journal},
	author = {Ouni, Ali and Kessentini, Marouane and Bechikh, Slim and Sahraoui, Houari},
	month = apr,
	year = {2014}
}

@inproceedings{fontana_investigating_2011,
	title = {On Investigating Code Smells Correlations},
	url = {https://doi.org/10.1109/ICSTW.2011.14},
	doi = {10.1109/ICSTW.2011.14},
	abstract = {Code smells are characteristics of the software that may indicate a code or design problem that can make software hard to evolve and maintain. Detecting and removing code smells, when necessary, improves the quality and maintainability of a system. Usually detection techniques are based on the computation of a particular set of combined metrics, or standard object-oriented metrics or metrics defined ad hoc for the smell detection. The paper investigates the direct and indirect correlations existing between smells. If one code smell exists, this can imply the existence of another code smell, or if one smell exists, another one cannot be there, or perhaps it could observe that some code smells tend to go together.},
	booktitle = {Software Testing, Verification and Validation Workshops ({ICSTW}), 2011 {IEEE} Fourth International Conference on},
	author = {Fontana, F.A. and Zanoni, M.},
	month = mar,
	year = {2011},
	keywords = {code smell correlation, code smell detection, code smell removal, object-oriented metrics, software maintenance, software metrics, software quality, system maintainability, system quality},
	pages = {474--475}
}

@inproceedings{khomh_exploratory_2009,
	title = {An Exploratory Study of the Impact of Code Smells on Software Change-proneness},
	url = {https://doi.org/10.1109/WCRE.2009.28},
	doi = {10.1109/WCRE.2009.28},
	abstract = {Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities.},
	booktitle = {Reverse Engineering, 2009. {WCRE} '09. 16th Working Conference on},
	author = {Khomh, F. and Di Penta, M. and Gu\'{e}h\'{e}neuc, Y.-G.},
	month = oct,
	year = {2009},
	keywords = {Azureus, class code smell detection, code smell specification, data mining, design pattern, Eclipse, empirical software engineering, hypothesis testing, object-oriented programming, object-oriented software evolution, object-oriented system, program diagnostics, program testing, quality assurance, software change-proneness, software maintenance, software quality, software refactoring, software repository mining, statistical testing, testing activity},
	pages = {75--84}
}

@incollection{pietrzak_leveraging_2006,
	series = {Lecture Notes in Computer Science},
	title = {Leveraging Code Smell Detection with Inter-smell Relations},
	volume = {4044},
	isbn = {978-3-540-35094-1},
	url = {http://dx.doi.org/10.1007/11774129_8},
	abstract = {The variety of code smells deserves a numerous set of detectors capable of sensing them. There exist several sources of data that may be examined: code metrics, existence of particular elements in an abstract syntax tree, specific code behavior or subsequent changes in the code. Another factor that can be used for this purpose is the knowledge of other, already detected or rejected smells. In the paper we define and analyze different relations that exist among smells and provide tips how they could be exploited to alleviate detection of other smells.},
	booktitle = {Extreme Programming and Agile Processes in Software Engineering},
	publisher = {Springer Berlin / Heidelberg},
	author = {Pietrzak, Błażej and Walter, Bartosz},
	editor = {Abrahamsson, Pekka and Marchesi, Michele and Succi, Giancarlo},
	year = {2006},
	keywords = {Computer, Science},
	pages = {75--84}
}

@inproceedings{vaucher_tracking_2009,
	title = {Tracking Design Smells: Lessons from a Study of God Classes},
	url = {http://dx.doi.org/10.1109/WCRE.2009.23},
	doi = {10.1109/WCRE.2009.23},
	abstract = {"God class" is a term used to describe a certain type of large classes which "know too much or do too much". Often a God class ({GC}) is created by accident as functionalities are incrementally added to a central class over the course of its evolution. {GCs} are generally thought to be examples of bad code that should be detected and removed to ensure software quality. However, in some cases, a {GC} is created by design as the best solution to a particular problem because, for example, the problem is not easily decomposable or strong requirements on efficiency exist. In this paper, we study in two open-source systems the "life cycle" of {GCs}: how they arise, how prevalent they are, and whether they remain or they are removed as the systems evolve over time, through a number of versions. We show how to detect the degree of "godliness" of classes automatically. Then, we show that by identifying the evolution of "godliness", we can distinguish between those classes that are so by design (good code) from those that occurred by accident (bad code). This methodology can guide software quality teams in their efforts to implement prevention and correction mechanisms.},
	booktitle = {Reverse Engineering, 2009. {WCRE} '09. 16th Working Conference on},
	author = {Vaucher, S. and Khomh, F. and Moha, N. and Gu\'{e}h\'{e}neuc, Y.-G.},
	month = oct,
	year = {2009},
	keywords = {configuration management, design smell tracking, {GC}, god class, open-source system, software evolution, software maintenance, software quality, systems version},
	pages = {145--154}
}

@inproceedings{olbrich_are_2010,
	title = {Are all code smells harmful? A study of God Classes and Brain Classes in the evolution of three open source systems},
	url = {https://doi.org/10.1109/ICSM.2010.5609564},
	doi = {10.1109/ICSM.2010.5609564},
	abstract = {Code smells are particular patterns in object-oriented systems that are perceived to lead to difficulties in the maintenance of such systems. It is held that to improve maintainability, code smells should be eliminated by refactoring. It is claimed that classes that are involved in certain code smells are liable to be changed more frequently and have more defects than other classes in the code. We investigated the extent to which this claim is true for God Classes and Brain Classes, with and without normalizing the effects with respect to the class size. We analyzed historical data from 7 to 10 years of the development of three open-source software systems. The results show that God and Brain Classes were changed more frequently and contained more defects than other kinds of class. However, when we normalized the measured effects with respect to size, then God and Brain Classes were less subject to change and had fewer defects than other classes. Hence, under the assumption that God and Brain Classes contain on average as much functionality per line of code as other classes, the presence of God and Brain Classes is not necessarily harmful; in fact, such classes may be an efficient way of organizing code.},
	booktitle = {Software Maintenance ({ICSM}), 2010 {IEEE} International Conference on},
	author = {Olbrich, S.M. and Cruzes, D.S. and Sj{\o}berg, D.I.K.},
	month = sep,
	year = {2010},
	keywords = {brain classes, change frequency, code smells, Data analysis, defects, detection strategies, {FAA}, God classes, Instruments, maintainability, object-oriented programming, object-oriented systems, open source, open source systems, public domain software, Software, software evolution, software maintenance},
	pages = {1--10}
}

@inproceedings{yamashita_exploring_2013,
	title = {Exploring the impact of inter-smell relations on software maintainability: An empirical study},
	isbn = {978-1-4673-3076-3, 978-1-4673-3073-2},
	shorttitle = {Exploring the impact of inter-smell relations on software maintainability},
	url = {https://doi.org/10.1109/ICSE.2013.6606614},
	doi = {10.1109/ICSE.2013.6606614},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Yamashita, Aiko and Moonen, Leon},
	month = may,
	year = {2013},
	pages = {682--691}
}

@inproceedings{guo_domain-specific_2010,
	address = {Cape Town, South Africa},
	series = {{ICSE} '10},
	title = {Domain-specific tailoring of code smells: an empirical study},
	isbn = {978-1-60558-719-6},
	url = {http://doi.acm.org/10.1145/1810295.1810321},
	doi = {10.1145/1810295.1810321},
	abstract = {Code smells refer to commonly occurring patterns in source code that indicate poor programming practices or code decay. Detecting code smells helps developers find design problems that can cause trouble in future maintenance. Detection rules for code smells, based on software metrics, have been proposed, but they do not take domain-specific characteristics into consideration. In this study we investigate whether such generic heuristics can be tailored to include domain-specific factors. Input into these domain-specific heuristics comes from an iterative empirical field study in a software maintenance project. The results yield valuable insight into code smell detection.},
	booktitle = {Proceedings of the 32nd {ACM}/{IEEE} International Conference on Software Engineering - Volume 2},
	publisher = {{ACM}},
	author = {Guo, Yuepu and Seaman, Carolyn and Zazworka, Nico and Shull, Forrest},
	year = {2010},
	keywords = {code smells, domain-specific, empirical study},
	pages = {167--170}
}

@inproceedings{chatzigeorgiou_investigating_2010,
	title = {Investigating the Evolution of Bad Smells in Object-Oriented Code},
	url = {https://doi.org/10.1109/QUATIC.2010.16},
	doi = {10.1109/QUATIC.2010.16},
	abstract = {Software design problems are known and perceived under many different terms such as bad smells, flaws, non-compliance to design principles, violation of heuristics, excessive metric values and antipatterns, signifying the importance of handling them in the construction and maintenance of software. Once a design problem is identified, it can be removed by applying an appropriate refactoring, improving in most cases several aspects of quality such as maintainability, comprehensibility and reusability. This paper, taking advantage of recent advances and tools in the identification of non-trivial bad smells, explores the presence and evolution of such problems by analyzing past versions of code. Several interesting questions can be investigated such as whether the number of problems increases with the passage of software generations, whether problems vanish by time or only by targeted human intervention, whether bad smells occur in the course of evolution of a module or exist right from the beginning and whether refactorings targeting at smell removal are frequent. In contrast to previous studies that investigate the application of refactorings in the history of a software project, we attempt to study the subject from the point of view of the problems themselves distinguishing deliberate maintenance activities from the removal of design problems as a side effect of software evolution. Results are discussed for two open-source systems and three bad smells.},
	booktitle = {Quality of Information and Communications Technology ({QUATIC}), 2010 Seventh International Conference on the},
	author = {Chatzigeorgiou, A. and Manakos, A.},
	month = oct,
	year = {2010},
	keywords = {bad smells, comprehensibility, maintainability, object-oriented code, object-oriented programming, open-source systems, reusability, software design, software evolution, software generations, software maintenance, software project, software reusability},
	pages = {106--115}
}

@inproceedings{garcia_toward_2009,
	address = {East Stroudsburg, {PA}, {USA}},
	series = {{QoSA} '09},
	title = {Toward a Catalogue of Architectural Bad Smells},
	isbn = {978-3-642-02350-7},
	url = {http://dx.doi.org/10.1007/978-3-642-02351-4_10},
	doi = {10.1007/978-3-642-02351-4_10},
	abstract = {An {\textless}em{\textgreater}architectural bad smell{\textless}/em{\textgreater} is a commonly (although not always intentionally) used set of architectural design decisions that negatively impacts system lifecycle properties, such as understandability, testability, extensibility, and reusability. In our previous short paper, we introduced the notion of architectural bad smells and outlined a few common smells. In this paper, we significantly expand upon that work. In particular, we describe in detail four representative architectural smells that emerged from reverse-engineering and re-engineering two large industrial systems and from our search through case studies in research literature. For each of the four architectural smells, we provide illustrative examples and demonstrate the smell's impact on system lifecycle properties. Our experiences indicate the need to identify and catalog architectural smells so that software architects can discover and eliminate them from system designs.},
	booktitle = {Proceedings of the 5th International Conference on the Quality of Software Architectures: Architectures for Adaptive Software Systems},
	publisher = {Springer-Verlag},
	author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad},
	year = {2009},
	keywords = {codesmell},
	pages = {146--162}
}

@book{mohamed_el-wakil_ali_el-bastawisi_mokhtar_boshra_object-oriented_????,
	title = {Object-Oriented Design Quality Models A Survey and Comparison},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.59.1254},
	abstract = {Since 1994, many Object-Oriented Design ({OOD}) quality models had appeared. {OOD} quality models aim is assessing {OOD} quality characteristics, such as maintainability, in a quantitative way through establishing relationships between {OOD} quality characteristics, and metrics computable from {OOD} diagrams, such as Depth of Inheritance Tree ({DIT}). This paper presents the results of our survey of the major {OOD} quality models appeared in literature since the {MOOSE} model in 1994, till the {QMOOD} model in...},
	author = {Mohamed El-Wakil, Ali El-Bastawisi, MOkhtar Boshra and Fahmy, Ali},
	keywords = {Information Systems quality, Object-Oriented Information Systems, Object Oriented Metrics, Object-Oriented quality models, quality assessment, {UML}}
}

@article{s._counsell_r._m._hierons_h._hamza_s._black_exploring_2010,
	title = {Exploring the Eradication of Code Smells: An Empirical and Theoretical Perspective},
	volume = {2010},
	url = {http://dx.doi.org/10.1155/2010/820103},
	doi = {10.1155/2010/820103},
	journal = {Advances in Software Engineering},
	author = {S. Counsell, R. M. Hierons, H. Hamza, S. Black and Durrand, M.},
	year = {2010},
	pages = {12}
}

@inproceedings{kataoka_quantitative_2002,
	title = {A quantitative evaluation of maintainability enhancement by refactoring},
	isbn = {0-7695-1819-2},
	url = {https://doi.org/10.1109/ICSM.2002.1167822},
	doi = {10.1109/ICSM.2002.1167822},
	urldate = {2014-09-27},
	publisher = {{IEEE} Comput. Soc},
	author = {Kataoka, Y. and Imai, T. and Andou, H. and Fukaya, T.},
	year = {2002},
	pages = {576--585}
}

@inproceedings{peters_evaluating_2012,
	title = {Evaluating the Lifespan of Code Smells using Software Repository Mining},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	url = {https://doi.org/10.1109/CSMR.2012.79},
	doi = {10.1109/CSMR.2012.79},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Peters, Ralph and Zaidman, Andy},
	month = mar,
	year = {2012},
	pages = {411--416}
}

@inproceedings{abbes_empirical_2011,
	title = {An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension},
	isbn = {978-1-61284-259-2},
	url = {https://doi.org/10.1109/CSMR.2011.24},
	doi = {10.1109/CSMR.2011.24},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Abbes, Marwen and Khomh, Foutse and Gu\'{e}h\'{e}neuc, Yann-Gael and Antoniol, Giuliano},
	month = mar,
	year = {2011},
	pages = {181--190}
}

@inproceedings{romano_analyzing_2012,
	title = {Analyzing the Impact of Antipatterns on Change-Proneness Using Fine-Grained Source Code Changes},
	isbn = {978-0-7695-4891-3, 978-1-4673-4536-1},
	url = {https://doi.org/10.1109/WCRE.2012.53},
	doi = {10.1109/WCRE.2012.53},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Romano, Daniele and Raila, Paulius and Pinzger, Martin and Khomh, Foutse},
	month = oct,
	year = {2012},
	pages = {437--446}
}

@inproceedings{martin_design_1994,
	title = {OO Design Quality Metrics--An Analysis of Dependencies},
	author = {Martin, R.C.},
	month = oct,
	year = {1994},
	series = {{OOPSLA} '94},
	booktitle = {Proceedings of the Workshop Pragmatic and Theoretical Directions in Object-Oriented Software Metrics}
}

@inproceedings{briand_measuring_1993,
	author={Briand, L.C. and Morasca, S. and Basili, V.R.},
	booktitle={1993 Conference on Software Maintenance},
	title={Measuring and assessing maintainability at the end of high level design},
	year={1993},
	volume={},
	number={},
	pages={88--87},
	keywords={object-oriented programming;software maintenance;software metrics;systems analysis;cohesion;coupling;high level design;language independent;object-oriented design principles;software architecture;software maintainability;software metrics;visibility;Computer languages;Computer science;Educational institutions;NASA;Predictive models;Software architecture;Software design;Software maintenance;Software systems;Software testing},
	doi={10.1109/ICSM.1993.366952},
	url={https://doi.org/10.1109/ICSM.1993.366952},
	ISSN={},
	month={Sep},
}

@inproceedings{marinescu_quantifying_2004,
	title = {Quantifying the quality of object-oriented design: the factor-strategy model},
	isbn = {0-7695-2243-2},
	shorttitle = {Quantifying the quality of object-oriented design},
	url = {https://doi.org/10.1109/WCRE.2004.31},
	doi = {10.1109/WCRE.2004.31},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Marinescu, R. and Ra\c{t}iu, D.},
	year = {2004},
	pages = {192--201}
}

@inproceedings{fontana_investigating_2013,
	title = {Investigating the Impact of Code Smells on System's Quality: An Empirical Study on Systems of Different Application Domains},
	isbn = {978-0-7695-4981-1},
	shorttitle = {Investigating the Impact of Code Smells on System's Quality},
	url = {https://doi.org/10.1109/ICSM.2013.37},
	doi = {10.1109/ICSM.2013.37},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Marino, Alessandro and Walter, Bartosz and Martenka, Pawel},
	month = sep,
	year = {2013},
	pages = {260--269}
}

@inproceedings{yamashita_how_2013,
	title = {How Good Are Code Smells for Evaluating Software Maintainability? Results from a Comparative Case Study},
	isbn = {978-0-7695-4981-1},
	shorttitle = {How Good Are Code Smells for Evaluating Software Maintainability?},
	url = {https://doi.org/10.1109/ICSM.2013.97},
	doi = {10.1109/ICSM.2013.97},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Yamashita, Aiko},
	month = sep,
	year = {2013},
	pages = {566--571}
}

@inproceedings{yamashita_code_2012,
	title = {Do code smells reflect important maintainability aspects?},
	isbn = {978-1-4673-2312-3, 978-1-4673-2313-0},
	url = {https://doi.org/10.1109/ICSM.2012.6405287},
	doi = {10.1109/ICSM.2012.6405287},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Yamashita, Aiko and Moonen, Leon},
	month = sep,
	year = {2012},
	pages = {306--315}
}

@inproceedings{olbrich_evolution_2009,
	title = {The evolution and impact of code smells: A case study of two open source systems},
	isbn = {978-1-4244-4842-5},
	shorttitle = {The evolution and impact of code smells},
	url = {https://doi.org/10.1109/ESEM.2009.5314231},
	doi = {10.1109/ESEM.2009.5314231},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Olbrich, Steffen and Cruzes, Daniela S. and Basili, Victor and Zazworka, Nico},
	month = oct,
	year = {2009},
	pages = {390--400}
}

@article{khomh_exploratory_2012,
	title = {An exploratory study of the impact of antipatterns on class change- and fault-proneness},
	volume = {17},
	issn = {1382-3256, 1573-7616},
	url = {http://link.springer.com/10.1007/s10664-011-9171-y},
	doi = {10.1007/s10664-011-9171-y},
	language = {en},
	number = {3},
	urldate = {2014-09-28},
	journal = {Empirical Software Engineering},
	author = {Khomh, Foutse and Penta, Massimiliano Di and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
	month = jun,
	year = {2012},
	pages = {243--275}
}

@article{yamashita_assessing_2014,
	title = {Assessing the capability of code smells to explain maintenance problems: an empirical study combining quantitative and qualitative data},
	volume = {19},
	issn = {1382-3256, 1573-7616},
	shorttitle = {Assessing the capability of code smells to explain maintenance problems},
	url = {http://link.springer.com/10.1007/s10664-013-9250-3},
	doi = {10.1007/s10664-013-9250-3},
	language = {en},
	number = {4},
	urldate = {2014-09-28},
	journal = {Empirical Software Engineering},
	author = {Yamashita, Aiko},
	month = aug,
	year = {2014},
	pages = {1111--1143}
}

@article{yamashita_code_2013,
	title = {Code smells as system-level indicators of maintainability: An empirical study},
	volume = {86},
	issn = {01641212},
	shorttitle = {Code smells as system-level indicators of maintainability},
	url = {https://doi.org/10.1016/j.jss.2013.05.007},
	doi = {10.1016/j.jss.2013.05.007},
	language = {en},
	number = {10},
	urldate = {2014-09-28},
	journal = {Journal of Systems and Software},
	author = {Yamashita, Aiko and Counsell, Steve},
	month = oct,
	year = {2013},
	pages = {2639--2653}
}

@article{sjoberg_quantifying_2013,
	title = {Quantifying the Effect of Code Smells on Maintenance Effort},
	volume = {39},
	issn = {0098-5589, 1939-3520},
	url = {https://doi.org/10.1109/TSE.2012.89},
	doi = {10.1109/TSE.2012.89},
	number = {8},
	urldate = {2014-09-28},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Sj{\o}berg, Dag I.K. and Yamashita, Aiko and Anda, Bente C.D. and Mockus, Audris and Dyba, Tore},
	month = aug,
	year = {2013},
	pages = {1144--1156}
}

@inproceedings{izurieta_testing_2008,
	title = {Testing Consequences of Grime Buildup in Object Oriented Design Patterns},
	url = {https://doi.org/10.1109/ICST.2008.27},
	doi = {10.1109/ICST.2008.27},
	abstract = {Evidence suggests that as software ages the original realizations of design patterns remain in place, and participants in design pattern realizations accumulate "grime" - non-pattern-related code. This research examines the consequences that grime buildup has on the testability of general purpose design patterns. Test cases put in place during the design phase and initial implementation of a project can become ineffective as the system matures. The evolution of a design due to added functionality or defect fixing increases the coupling and dependencies between many classes that must be tested. We show that as systems age, the growth of grime and the appearance of anti-patterns increase testing requirements. Early recognition and removal of grime and anti-patterns can potentially improve system testability.},
	booktitle = {Software Testing, Verification, and Validation, 2008 1st International Conference on},
	author = {Izurieta, C. and Bieman, J.M.},
	month = apr,
	year = {2008},
	keywords = {consequence testing, grime buildup, nonpattern-related code, object oriented design patterns, object-oriented programming, program testing, software design patterns, system testability},
	pages = {171--179}
}

@inproceedings{dale_impacts_2014-1,
	title = {Impacts of design pattern decay on system quality},
	isbn = {9781450327749},
	url = {https://doi.org/10.1145/2652524.2652560},
	doi = {10.1145/2652524.2652560},
	language = {en},
	urldate = {2014-09-24},
	publisher = {{ACM} Press},
	author = {Dale, Melissa R. and Izurieta, Clemente},
	year = {2014},
	pages = {1--4}
}

@inproceedings{griffith_design_2014,
	title = {Design pattern decay: the case for class grime},
	isbn = {9781450327749},
	shorttitle = {Design pattern decay},
	url = {https://doi.org/10.1145/2652524.2652570},
	doi = {10.1145/2652524.2652570},
	language = {en},
	urldate = {2014-09-24},
	publisher = {{ACM} Press},
	author = {Griffith, Isaac and Izurieta, Clemente},
	year = {2014},
	pages = {1--4}
}

@inproceedings{izurieta_how_2007,
	title = {How Software Designs Decay: A Pilot Study of Pattern Evolution},
	url = {https://doi.org/10.1109/ESEM.2007.55},
	doi = {10.1109/ESEM.2007.55},
	abstract = {A common belief is that software designs decay as systems evolve. This research examines the extent to which software designs actually decay by studying the aging of design patterns in successful object oriented systems. Aging of design patterns is measured using various types of decay indices developed for this research. Decay indices track the internal structural changes of a design pattern realization and the code that surrounds the realization. Hypotheses for each kind of decay are tested. We found that the original design pattern functionality remains, and pattern decay is due to the "grime ", non-pattern code, that grows around the pattern realization.},
	booktitle = {Empirical Software Engineering and Measurement, 2007. {ESEM} 2007. First International Symposium on},
	author = {Izurieta, C. and Bieman, J.M.},
	month = sep,
	year = {2007},
	keywords = {Aging, Computer science, Cost function, Decay, design, design pattern realization, Evolution, object-oriented programming, object oriented systems, Open source software, pattern evolution, Permission, Software, software design, software designs decay, software engineering, Software Grime Buildup., software measurement, software systems, Testing},
	pages = {449--451}
}

@article{izurieta_multiple_2012,
	title = {A multiple case study of design pattern decay, grime, and rot in evolving software systems},
	issn = {0963-9314},
	url = {http://dx.doi.org/10.1007/s11219-012-9175-x},
	doi = {10.1007/s11219-012-9175-x},
	abstract = {Software designs decay as systems, uses, and operational environments evolve. Decay can involve the design patterns used to structure a system. Classes that participate in design pattern realizations accumulate grime—non-pattern-related code. Design pattern realizations can also rot, when changes break the structural or functional integrity of a design pattern. Design pattern rot can prevent a pattern realization from fulfilling its responsibilities, and thus represents a fault. Grime buildup does not break the structural integrity of a pattern but can reduce system testability and adaptability. This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems. We generated {UML} models from the three implementations and employed a multiple case study methodology to analyze the evolution of the designs. We found no evidence of design pattern rot in these systems. However, we found considerable evidence of pattern decay due to grime. Dependencies between design pattern components increased without regard for pattern intent, reducing pattern modularity, and decreasing testability and adaptability. The study of decay and grime showed that the grime that builds up around design patterns is mostly due to increases in coupling.},
	language = {English},
	journal = {Software Quality Journal},
	author = {Izurieta, Clemente and Bieman, JamesM.},
	year = {2012},
	keywords = {Decay, Design concepts, Design patterns, Grime, Multiple case study, Object-oriented design methods, software evolution, technical debt},
	pages = {1--35}
}

@phdthesis{izurieta_decay_2009,
	title = {Decay and grime buildup in evolving object oriented design patterns},
	school = {Colorado State University},
	author = {Izurieta, Clemente},
	year = {2009}
}

@techreport{joint_task_force_transformation_initiative_security_2013,
	title = {Security and {Privacy} {Controls} for {Federal} {Information} {Systems} and {Organizations}},
	url = {http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf},
	number = {NIST SP 800-53r4},
	urldate = {2015-06-30},
	institution = {National Institute of Standards and Technology},
	author = {{Joint Task Force Transformation Initiative}},
	month = apr,
	year = {2013}
}

@inproceedings{schanz_object_2010,
	address = {Bolzano-Bozen, Italy},
	series = {{ESEM} '10},
	title = {Object oriented design pattern decay: a taxonomy},
	isbn = {978-1-4503-0039-1},
	url = {http://doi.acm.org/10.1145/1852786.1852796},
	doi = {10.1145/1852786.1852796},
	abstract = {Software designs decay over time. While most studies focus on decay at the system level, this research studies design decay on well understood micro architectures, design patterns. Formal definitions of design patterns provide a homogeneous foundation that can be used to measure deviations as pattern realizations evolve. Empirical studies have shown modular grime to be a significant contributor to design pattern decay. Modular grime is observed when increases in the coupling of design pattern classes occur in ways unintended by the original designer. Further research is necessary to formally categorize distinct forms of modular grime. We identify three properties of coupling relationships that are used to classify subsets of modular grime. A taxonomy is presented which uses these properties to group modular grime into six disjoint categories. Illustrative examples of grime build-up are provided to demonstrate the taxonomy. A pilot study is used to validate the taxonomy and provide initial empirical evidence of the proposed classification.},
	booktitle = {Proceedings of the 2010 {ACM}-{IEEE} International Symposium on Empirical Software Engineering and Measurement},
	publisher = {{ACM}},
	author = {Schanz, Travis and Izurieta, Clemente},
	year = {2010},
	keywords = {object oriented design patterns, software architectures, software decay, software evolution},
	pages = {7:1--7:8}
}

@book{gamma_design_1994,
	title = {Design Patterns: Elements of Reusable Object-Oriented Languages and Systems},
	publisher = {Addison-Wesley},
	author = {Gamma, E. and Helm, R. and Johnson, R. and Vlissides, J.},
	year = {1994}
}

@book{pree_design_1995,
	address = {Wokingham, England ; Reading, Mass},
	title = {Design patterns for object-oriented software development},
	isbn = {0201422948},
	publisher = {Addison-Wesley Pub. Co},
	author = {Pree, Wolfgang},
	year = {1995},
	keywords = {Computer software, Development, Object-oriented programming (Computer science), Software patterns}
}

@inproceedings{duell_looking_1999,
	title = {Looking beyond software to understand software design patterns},
	isbn = {0-7695-0368-3},
	url = {https://doi.org/10.1109/CMPSAC.1999.812724},
	doi = {10.1109/CMPSAC.1999.812724},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Duell, M.},
	year = {1999},
	pages = {312--313}
}

@inproceedings{el_boussaidi_model-driven_2007,
	title = {A model-driven framework for representing and applying design patterns},
	isbn = {0-7695-2870-8},
	url = {https://doi.org/10.1109/COMPSAC.2007.31},
	doi = {10.1109/COMPSAC.2007.31},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {El Boussaidi, Ghizlane and Mili, Hafedh},
	month = jul,
	year = {2007},
	pages = {97--100}
}

@inproceedings{beck_industrial_1996,
	title = {Industrial experience with design patterns},
	isbn = {0-8186-7247-1},
	url = {https://doi.org/10.1109/ICSE.1996.493406},
	doi = {10.1109/ICSE.1996.493406},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc. Press},
	author = {Beck, K. and Crocker, R. and Meszaros, G. and Coplien, J.O. and Dominick, L. and Paulisch, F. and Vlissides, J.},
	year = {1996},
	pages = {103--114}
}

@inproceedings{briand_guiding_2006,
	title = {Guiding the Application of Design Patterns Based on {UML} Models},
	isbn = {0-7695-2354-4},
	url = {https://doi.org/10.1109/ICSM.2006.30},
	doi = {10.1109/ICSM.2006.30},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Briand, Lionel and Labiche, Yvan and Sauve, Alexandre},
	month = sep,
	year = {2006},
	pages = {234--243}
}

@inproceedings{demeyer_object-oriented_2005,
	title = {Object-oriented reengineering: patterns and techniques},
	isbn = {0-7695-2368-4},
	shorttitle = {Object-oriented reengineering},
	url = {https://doi.org/10.1109/ICSM.2005.67},
	doi = {10.1109/ICSM.2005.67},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Demeyer, S. and Ducasse, S. and Nierstrasz, O.},
	year = {2005},
	pages = {723--724}
}

@article{riehle_design_2009,
	title = {Design pattern density defined},
	volume = {44},
	issn = {03621340},
	url = {https://doi.org/10.1145/1639949.1640125},
	doi = {10.1145/1639949.1640125},
	language = {en},
	number = {10},
	urldate = {2014-09-29},
	journal = {{ACM} {SIGPLAN} Notices},
	author = {Riehle, Dirk},
	month = oct,
	year = {2009},
	pages = {469}
}

@article{ampatzoglou_research_2013,
	title = {Research state of the art on {GoF} design patterns: A mapping study},
	volume = {86},
	issn = {01641212},
	shorttitle = {Research state of the art on {GoF} design patterns},
	url = {https://doi.org/10.1016/j.jss.2013.03.063},
	doi = {10.1016/j.jss.2013.03.063},
	language = {en},
	number = {7},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Ampatzoglou, Apostolos and Charalampidou, Sofia and Stamelos, Ioannis},
	month = jul,
	year = {2013},
	pages = {1945--1964}
}

@article{budgen_design_2013,
	title = {Design Patterns: Magic or Myth?},
	volume = {30},
	issn = {0740-7459},
	shorttitle = {Design Patterns},
	url = {https://doi.org/10.1109/MS.2013.26},
	doi = {10.1109/MS.2013.26},
	number = {2},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Budgen, David},
	month = mar,
	year = {2013},
	pages = {87--90}
}

@article{manolescu_growing_2007,
	title = {The Growing Divide in the Patterns World},
	volume = {24},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2007.120},
	doi = {10.1109/MS.2007.120},
	number = {4},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Manolescu, Dragos and Kozaczynski, Wojtek and Miller, Ade and Hogg, Jason},
	month = jul,
	year = {2007},
	pages = {61--67}
}

@article{buschmann_past_2007,
	title = {Past, Present, and Future Trends in Software Patterns},
	volume = {24},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2007.115},
	doi = {10.1109/MS.2007.115},
	number = {4},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Buschmann, Frank and Henney, Kevlin and Schmidt, Douglas C.},
	month = jul,
	year = {2007},
	pages = {31--37}
}

@article{booch_small_2006,
	title = {From small to gargantuan [software development patterns},
	volume = {23},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2006.102},
	doi = {10.1109/MS.2006.102},
	number = {4},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Booch, G.},
	month = jul,
	year = {2006},
	pages = {14--15}
}

@article{mellor_why_1997,
	title = {Why Explore Object Mathods, Patterns, and Architectures?},
	volume = {14},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.1997.566424},
	doi = {10.1109/MS.1997.566424},
	number = {1},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Mellor, S.J. and Johnson, R.},
	month = jan,
	year = {1997},
	pages = {27--29}
}

@article{dong_visualizing_2007,
	title = {Visualizing Design Patterns in Their Applications and Compositions},
	volume = {33},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2007.1012},
	doi = {10.1109/TSE.2007.1012},
	number = {7},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Dong, Jing and Yang, Sheng and Zhang, Kang},
	month = jul,
	year = {2007},
	pages = {433--453}
}

@article{macdonald_deferring_2009,
	title = {Deferring design pattern decisions and automating structural pattern changes using a design-pattern-based programming system},
	volume = {31},
	issn = {01640925},
	url = {https://doi.org/10.1145/1498926.1498927},
	doi = {10.1145/1498926.1498927},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {{ACM} Transactions on Programming Languages and Systems},
	author = {MacDonald, Steve and Tan, Kai and Schaeffer, Jonathan and Szafron, Duane},
	month = apr,
	year = {2009},
	pages = {1--49}
}

@article{bouhours_spoiled_2014,
	title = {Spoiled patterns: how to extend the {GoF}},
	issn = {0963-9314, 1573-1367},
	shorttitle = {Spoiled patterns},
	url = {http://link.springer.com/10.1007/s11219-014-9249-z},
	doi = {10.1007/s11219-014-9249-z},
	language = {en},
	urldate = {2014-10-13},
	journal = {Software Quality Journal},
	author = {Bouhours, Cédric and Leblanc, Hervé and Percebois, Christian},
	month = aug,
	year = {2014}
}

@inproceedings{bouhours_sharing_2010,
	title = {Sharing bad practices in design to improve the use of patterns},
	isbn = {978-1-4503-0107-7},
	url = {https://doi.org/10.1145/2493288.2493310},
	doi = {10.1145/2493288.2493310},
	language = {en},
	urldate = {2015-09-19},
	publisher = {ACM Press},
	author = {Bouhours, Cédric and Leblanc, Hervé and Percebois, Christian},
	year = {2010},
	pages = {1--24}
}

@article{bouhours:hal-00522587,
  TITLE = {{Bad smells in design and design patterns}},
  AUTHOR = {Bouhours, C{\'e}dric and Leblanc, Herv{\'e} and Percebois, Christian},
  URL = {https://hal.archives-ouvertes.fr/hal-00522587},
  JOURNAL = {{Journal of Object Technology}},
  PUBLISHER = {{Chair of Software Engineering}},
  VOLUME = {8},
  NUMBER = {3},
  PAGES = {43--63},
  YEAR = {2009},
  PDF = {https://hal.archives-ouvertes.fr/hal-00522587/file/Article.pdf},
  HAL_ID = {hal-00522587},
  HAL_VERSION = {v1},
}

@phdthesis{kim_meta-modeling_2004,
	title = {A Meta-Modeling Approach to Specifying Patterns},
	school = {Colorado State University},
	author = {Kim, Dae-Kyoo},
	year = {2004}
}

@inproceedings{soon-kyeong_kim_using_2004,
	title = {Using Integrated Metamodeling to Define {OO} Design Patterns with Object-Z and {UML}},
	isbn = {0-7695-2245-9},
	url = {https://doi.org/10.1109/APSEC.2004.108},
	doi = {10.1109/APSEC.2004.108},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {{Soon-Kyeong Kim} and Carrington, D.},
	year = {2004},
	pages = {257--264}
}

@inproceedings{dae-kyoo_kim_role-based_2003,
	title = {A role-based metamodeling approach to specifying design patterns},
	isbn = {0-7695-2020-0},
	url = {https://doi.org/10.1109/CMPSAC.2003.1245379},
	doi = {10.1109/CMPSAC.2003.1245379},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Kim, Dae-Kyoo and France, R. and Ghosh, S. and Song, Eunjee},
	year = {2003},
	pages = {452--457}
}

@inproceedings{mak_precise_2004,
	title = {Precise modeling of design patterns in {UML}},
	isbn = {0-7695-2163-0},
	url = {https://doi.org/10.1109/ICSE.2004.1317447},
	doi = {10.1109/ICSE.2004.1317447},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Mak, J.K.H. and Choy, C.S.T. and Lun, D.P.K.},
	year = {2004},
	pages = {252--261}
}

@inproceedings{soundarajan_responsibilities_2004,
	title = {Responsibilities and rewards: specifying design patterns},
	isbn = {0-7695-2163-0},
	shorttitle = {Responsibilities and rewards},
	url = {https://doi.org/10.1109/ICSE.2004.1317488},
	doi = {10.1109/ICSE.2004.1317488},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Soundarajan, N. and Hallstrom, J.O.},
	year = {2004},
	pages = {666--675}
}

@inproceedings{eide_static_2002,
	title = {Static and dynamic structure in design patterns},
	isbn = {158113472X},
	url = {https://doi.org/10.1145/581339.581367},
	doi = {10.1145/581339.581367},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Eide, Eric and Reid, Alastair and Regehr, John and Lepreau, Jay},
	year = {2002},
	pages = {208}
}

@inproceedings{mikkonen_formalizing_1998,
	title = {Formalizing design patterns},
	isbn = {0-8186-8368-6},
	url = {https://doi.org/10.1109/ICSE.1998.671108},
	doi = {10.1109/ICSE.1998.671108},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Mikkonen, T.},
	year = {1998},
	pages = {115--124}
}

@inproceedings{gueheneuc_y-g_fingerprinting_2004,
	title = {Fingerprinting design patterns},
	isbn = {0-7695-2243-2},
	url = {https://doi.org/10.1109/WCRE.2004.21},
	doi = {10.1109/WCRE.2004.21},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {{Gu\'{e}h\'{e}neuc Y-G} and Sahraoui, H. and Zaidi, F.},
	year = {2004},
	pages = {172--181}
}

@inproceedings{eden_precise_1997,
	title = {Precise specification and automatic application of design patterns},
	isbn = {0-8186-7961-1},
	url = {https://doi.org/10.1109/ASE.1997.632834},
	doi = {10.1109/ASE.1997.632834},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Eden, A.H. and Yehudai, A. and Gil, J.},
	year = {1997},
	pages = {143--152}
}

@article{levendovszky_supporting_2009,
	title = {Supporting domain-specific model patterns with metamodeling},
	volume = {8},
	issn = {1619-1366, 1619-1374},
	url = {http://link.springer.com/10.1007/s10270-009-0118-3},
	doi = {10.1007/s10270-009-0118-3},
	language = {en},
	number = {4},
	urldate = {2014-09-29},
	journal = {Software \& Systems Modeling},
	author = {Levendovszky, Tiham\'{e}r and Lengyel, L\'{a}szl\'{o} and M\'{e}sz\'{a}ros, Tam\'{a}s},
	month = sep,
	year = {2009},
	pages = {501--520}
}

@article{taibi_formal_2003,
	title = {Formal specification of design pattern combination using {BPSL}},
	volume = {45},
	issn = {09505849},
	url = {https://doi.org/10.1016/S0950-5849(02)000195-7},
	doi = {10.1016/S0950-5849(02)000195-7},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {Information and Software Technology},
	author = {Taibi, Toufik and Ngo, David Chek Ling},
	month = mar,
	year = {2003},
	pages = {157--170}
}

@article{loo_uml_2012,
	title = {{UML} Extension for Defining the Interaction Variants of Design Patterns},
	volume = {29},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2012.20},
	doi = {10.1109/MS.2012.20},
	number = {5},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Loo, Keen Ngee and Lee, Sai Peck and Chiew, Thiam Kian},
	month = sep,
	year = {2012},
	pages = {64--72}
}

@article{france_uml-based_2004,
	title = {A {UML}-based pattern specification technique},
	volume = {30},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2004.1271174},
	doi = {10.1109/TSE.2004.1271174},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {France, R. B. and Kim, Dae-Kyoo and Ghosh, S. and {Eunjee Song}},
	month = mar,
	year = {2004},
	pages = {193--206}
}

@article{kim_uml-based_2004,
	title = {A {UML}-based language for specifying domain-specific patterns},
	volume = {15},
	issn = {1045926X},
	url = {https://doi.org/10.1016/j.jvlc.2004.01.004},
	doi = {10.1016/j.jvlc.2004.01.004},
	language = {en},
	number = {3-4},
	urldate = {2014-09-30},
	journal = {Journal of Visual Languages \& Computing},
	author = {Kim, Dae-Kyoo and France, Robert and Ghosh, Sudipto},
	month = jun,
	year = {2004},
	pages = {265--289}
}

@inproceedings{dae-kyoo_kim_using_2002,
	title = {Using Role-Based Modeling Language ({RBML}) to characterize model families},
	isbn = {0-7695-1757-9},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1181503},
	doi = {10.1109/ICECCS.2002.1181503},
	urldate = {2014-09-30},
	publisher = {{IEEE} Comput. Soc},
	author = {Kim, Dae-Kyoo and France, R. and Ghosh, S. and {Eunjee Song}},
	year = {2002},
	pages = {107--116}
}

@incollection{kilov_using_2003,
	address = {Dordrecht},
	title = {Using Roles to Characterize Model Families},
	isbn = {978-90-481-6367-0, 978-94-017-2740-2},
	url = {http://link.springer.com/10.1007/978-94-017-2740-2_9},
	language = {en},
	urldate = {2014-09-30},
	booktitle = {Practical Foundations of Business System Specifications},
	publisher = {Springer Netherlands},
	author = {France, Robert B. and Kim, Dae-Kyoo and Song, Eunjee and Ghosh, Sudipto},
	editor = {Kilov, Haim and Baclawski, Kenneth},
	year = {2003},
	pages = {179--195}
}

@book{taibi_design_2007,
	title = {Design Pattern Formalization Techniques:},
	isbn = {9781599042190, 9781599042213},
	shorttitle = {Design Pattern Formalization Techniques},
	url = {http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/978-1-59904-219-0},
	urldate = {2014-09-30},
	publisher = {{IGI} Global},
	editor = {Taibi, Toufik},
	month = apr,
	year = {2007}
}

@article{kim_approach_2007,
	title = {An approach to precisely specifying the problem domain of design patterns},
	volume = {18},
	issn = {1045926X},
	url = {https://doi.org/10.1016/j.jvlc.2007.02.009},
	doi = {10.1016/j.jvlc.2007.02.009},
	language = {en},
	number = {6},
	urldate = {2014-09-30},
	journal = {Journal of Visual Languages \& Computing},
	author = {Kim, Dae-Kyoo and El Khawand, Charbel},
	month = dec,
	year = {2007},
	pages = {560--591}
}

@inproceedings{strasser2011automated,
  title={An automated software tool for validating design patterns},
  author={Strasser, Shane and Frederickson, Colt and Fenger, Kevin and Izurieta, Clemente},
  booktitle={ISCA 24th International Conference on Computer Applications in Industry and Engineering. CAINE},
  volume={11},
  year={2011}
}

@article{kim_evaluating_2008,
	title = {Evaluating pattern conformance of {UML} models: a divide-and-conquer approach and case studies},
	volume = {16},
	issn = {0963-9314, 1573-1367},
	shorttitle = {Evaluating pattern conformance of {UML} models},
	url = {http://link.springer.com/10.1007/s11219-008-9048-5},
	doi = {10.1007/s11219-008-9048-5},
	language = {en},
	number = {3},
	urldate = {2014-09-30},
	journal = {Software Quality Journal},
	author = {Kim, Dae-Kyoo and Shen, Wuwei},
	month = sep,
	year = {2008},
	pages = {329--359}
}

@inproceedings{kim_approach_2007-1,
	title = {An approach to evaluating structural pattern conformance of {UML} models},
	isbn = {1595934804},
	url = {https://doi.org/10.1145/1244002.1244305},
	doi = {10.1145/1244002.1244305},
	language = {en},
	urldate = {2014-09-30},
	publisher = {{ACM} Press},
	author = {Kim, Dae-Kyoo and Shen, Wuwei},
	year = {2007},
	pages = {1404}
}

@inproceedings{kim_generating_2005,
	title = {Generating {UML} models from domain patterns},
	isbn = {0-7695-2297-1},
	url = {https://doi.org/10.1109/SERA.2005.44},
	doi = {10.1109/SERA.2005.44},
	urldate = {2014-09-30},
	publisher = {{IEEE}},
	author = {Kim, D.-K. and Whittle, J.},
	year = {2005},
	pages = {166--173}
}

@inproceedings{lu_required_2011,
	title = {Required Behavior of Sequence Diagrams: Semantics and Refinement},
	isbn = {978-1-61284-853-2},
	shorttitle = {Required Behavior of Sequence Diagrams},
	url = {https://doi.org/10.1109/ICECCS.2011.20},
	doi = {10.1109/ICECCS.2011.20},
	urldate = {2014-09-30},
	publisher = {{IEEE}},
	author = {Lu, Lunjin and Kim, Dae-Kyoo},
	month = apr,
	year = {2011},
	pages = {127--136}
}

@inproceedings{dae-kyoo_kim_evaluating_2005,
	title = {Evaluating Conformance of {UML} Models to Design Patterns},
	isbn = {0-7695-2284-X},
	url = {https://doi.org/10.1109/ICECCS.2005.38},
	doi = {10.1109/ICECCS.2005.38},
	urldate = {2014-09-30},
	publisher = {{IEEE}},
	author = {{Dae-Kyoo Kim}},
	year = {2005},
	pages = {30--31}
}

@article{lu_required_2014,
	title = {Required behavior of sequence diagrams: Semantics and conformance},
	volume = {23},
	issn = {1049331X},
	shorttitle = {Required behavior of sequence diagrams},
	url = {https://doi.org/10.1145/2523108},
	doi = {10.1145/2523108},
	language = {en},
	number = {2},
	urldate = {2014-09-30},
	journal = {{ACM} Transactions on Software Engineering and Methodology},
	author = {Lu, Lunjin and Kim, Dae-Kyoo},
	month = mar,
	year = {2014},
	pages = {1--28}
}

@inproceedings{kim_software_2008,
	title = {Software {Quality} {Improvement} via {Pattern}-{Based} {Model} {Refactoring}},
	isbn = {978-0-7695-3482-4},
	url = {https://doi.org/10.1109/HASE.2008.10},
	doi = {10.1109/HASE.2008.10},
	urldate = {2015-09-22},
	publisher = {IEEE},
	author = {Kim, Dae-Kyoo},
	month = dec,
	year = {2008},
	pages = {293--302}
}

@article{kim_design_2013,
	title = {Design pattern based model transformation with tool support: {DESIGN} {PATTERN} {BASED} {MODEL} {TRANSFORMATION} {AND} {TOOL} {SUPPORT}},
	issn = {00380644},
	shorttitle = {Design pattern based model transformation with tool support},
	url = {http://doi.wiley.com/10.1002/spe.2238},
	doi = {10.1002/spe.2238},
	language = {en},
	urldate = {2014-09-30},
	journal = {Software: Practice and Experience},
	author = {Kim, Dae-Kyoo},
	month = nov,
	year = {2013},
}

@inproceedings{park_pattern-based_2012,
	title = {Pattern-Based Model Transformation Using {QVT}},
	isbn = {978-1-4673-4930-7, 978-0-7695-4922-4},
	url = {https://doi.org/10.1109/APSEC.2012.44},
	doi = {10.1109/APSEC.2012.44},
	urldate = {2014-09-30},
	publisher = {{IEEE}},
	author = {Park, Sunuk and Kim, Dae-Kyoo and Park, Sooyong},
	month = dec,
	year = {2012},
	pages = {472--481}
}

@inproceedings{streitferdt_searching_2005,
	title = {Searching Design Patterns in Source Code},
	volume = {2},
	isbn = {0-7695-2413-3},
	url = {https://doi.org/10.1109/COMPSAC.2005.135},
	doi = {10.1109/COMPSAC.2005.135},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Streitferdt, D. and Heller, C. and Philippow, I.},
	year = {2005},
	pages = {33--34}
}

@inproceedings{yu_sub-patterns_2013,
	title = {From Sub-patterns to Patterns: An Approach to the Detection of Structural Design Pattern Instances by Subgraph Mining and Merging},
	isbn = {978-0-7695-4986-6},
	shorttitle = {From Sub-patterns to Patterns},
	url = {https://doi.org/10.1109/COMPSAC.2013.92},
	doi = {10.1109/COMPSAC.2013.92},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Yu, Dongjin and Zhang, Yanyan and Ge, Jianlin and Wu, Wei},
	month = jul,
	year = {2013},
	pages = {579--588}
}

@inproceedings{lebon_fine-grained_2012,
	title = {Fine-Grained Design Pattern Detection},
	isbn = {978-1-4673-1990-4, 978-0-7695-4736-7},
	url = {http://doi.org/10.1109/COMPSAC.2012.37},
	doi = {10.1109/COMPSAC.2012.37},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Lebon, Maurice and Tzerpos, Vassilios},
	month = jul,
	year = {2012},
	pages = {267--272}
}

@inproceedings{lungu_package_2006,
	title = {Package patterns for visual architecture recovery},
	isbn = {0-7695-2536-9},
	url = {https://doi.org/10.1109/CSMR.2006.39},
	doi = {10.1109/CSMR.2006.39},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Lungu, M. and Lanza, M. and G\^{i}rba, T.},
	year = {2006},
	pages = {10 pp.--196}
}

@inproceedings{kaczor_efficient_2006,
	title = {Efficient identification of design patterns with bit-vector algorithm},
	isbn = {0-7695-2536-9},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1602369},
	doi = {10.1109/CSMR.2006.25},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Kaczor, O. and Gu\'{e}h\'{e}neuc, Y.-G. and Hamel, S.},
	year = {2006},
	pages = {10 pp.--184}
}

@inproceedings{fulop_towards_2008,
	title = {Towards a Benchmark for Evaluating Design Pattern Miner Tools},
	isbn = {978-1-4244-2157-2},
	url = {https://doi.org/10.1109/CSMR.2008.4493309},
	doi = {10.1109/CSMR.2008.4493309},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Fulop, Lajos Jeno and Ferenc, Rudolf and Gyimothy, Tibor},
	month = apr,
	year = {2008},
	pages = {143--152}
}

@inproceedings{de_lucia_two_2007,
	title = {A Two Phase Approach to Design Pattern Recovery},
	isbn = {0-7695-2802-3},
	url = {https://doi.org/10.1109/CSMR.2007.10},
	doi = {10.1109/CSMR.2007.10},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {De Lucia, Andrea and Deufemia, Vincenzo and Gravino, Carmine and Risi, Michele},
	year = {2007},
	pages = {297--306}
}

@inproceedings{kniesel_dpdx--towards_2010,
	title = {{DPDX}--Towards a Common Result Exchange Format for Design Pattern Detection Tools},
	isbn = {978-1-61284-369-8},
	url = {https://doi.org/10.1109/CSMR.2010.40},
	doi = {10.1109/CSMR.2010.40},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Kniesel, G\"{u}nter and Binun, Alexander and Heged\"{u}s, P\'{e}ter and F\"{u}l\"{o}p, Lajos Jeno and Chatzigeorgiou, Alexander and Gu\'{e}h\'{e}neuc, Yann-Gael and Tsantalis, Nikolaos},
	month = mar,
	year = {2010},
	pages = {232--235}
}

@inproceedings{costagliola_design_2005,
	title = {Design Pattern Recovery by Visual Language Parsing},
	isbn = {0-7695-2304-8},
	url = {https://doi.org/10.1109/CSMR.2005.23},
	doi = {10.1109/CSMR.2005.23},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Costagliola, G. and De Lucia, A. and Deufemia, V. and Gravino, C. and Risi, M.},
	year = {2005},
	pages = {102--111}
}

@inproceedings{binun_dpjf_2012,
	title = {{DPJF} - Design Pattern Detection with High Accuracy},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	url = {https://doi.org/10.1109/CSMR.2012.82},
	doi = {10.1109/CSMR.2012.82},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Binun, Alexander and Kniesel, Günter},
	month = mar,
	year = {2012},
	pages = {245--254}
}

@inproceedings{lucia_behavioral_2009,
	title = {Behavioral Pattern Identification through Visual Language Parsing and Code Instrumentation},
	isbn = {978-1-4244-3755-9, 978-0-7695-3589-0},
	url = {https://doi.org/10.1109/CSMR.2009.29},
	doi = {10.1109/CSMR.2009.29},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Lucia, Andrea De and Deufemia, Vincenzo and Gravino, Carmine and Risi, Michele},
	year = {2009},
	pages = {99--108}
}

@inproceedings{fontana_dpb:_2012,
	title = {{DPB}: A Benchmark for Design Pattern Detection Tools},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	shorttitle = {{DPB}},
	url = {https://doi.org/10.1109/CSMR.2012.32},
	doi = {10.1109/CSMR.2012.32},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Fontana, Francesca Arcelli and Caracciolo, Andrea and Zanoni, Marco},
	month = mar,
	year = {2012},
	pages = {235--244}
}

@inproceedings{sartipi_architectural_2000,
	title = {Architectural design recovery using data mining techniques},
	isbn = {0-7695-0546-5},
	url = {https://doi.org/10.1109/CSMR.2000.827321},
	doi = {10.1109/CSMR.2000.827321},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Sartipi, K. and Kontogiannis, K. and Mavaddat, F.},
	year = {2000},
	pages = {129--139}
}

@inproceedings{belderrar_sub-graph_2011,
	title = {Sub-graph Mining: Identifying Micro-architectures in Evolving Object-Oriented Software},
	isbn = {978-1-61284-259-2},
	shorttitle = {Sub-graph Mining},
	url = {https://doi.org/10.1109/CSMR.2011.23},
	doi = {10.1109/CSMR.2011.23},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Belderrar, Ahmed and Kpodjedo, Segla and Gu\'{e}h\'{e}neuc, Yann-Gael and Antoniol, Giuliano and Galinier, Philippe},
	month = mar,
	year = {2011},
	pages = {171--180}
}

@inproceedings{keller_pattern-based_1999,
	title = {Pattern-based reverse-engineering of design components},
	isbn = {1581130740},
	url = {https://doi.org/10.1145/302405.302622},
	doi = {10.1145/302405.302622},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Keller, Rudolf K. and Schauer, Reinhard and Robitaille, Sébastien and Pagé, Patrick},
	year = {1999},
	pages = {226--235}
}

@inproceedings{niere_towards_2002,
	title = {Towards pattern-based design recovery},
	isbn = {158113472X},
	url = {https://doi.org/10.1145/581339.581382},
	doi = {10.1145/581339.581382},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Niere, J\"{o}rg and Sch\"{a}fer, Wilhelm and Wadsack, Jörg P. and Wendehals, Lothar and Welsh, Jim},
	year = {2002},
	pages = {338}
}

@inproceedings{baniassad_design_2003,
	title = {Design pattern rationale graphs: linking design to source},
	isbn = {0-7695-1877-X},
	shorttitle = {Design pattern rationale graphs},
	url = {https://doi.org/10.1109/ICSE.2003.1201214},
	doi = {10.1109/ICSE.2003.1201214},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Baniassad, E.L.A. and Murphy, G.C. and Schwanninger, C.},
	year = {2003},
	pages = {352--362}
}

@inproceedings{kramer_design_1996,
	title = {Design recovery by automated search for structural design patterns in object-oriented software},
	isbn = {0-8186-7674-4},
	url = {https://doi.org/10.1109/WCRE.1996.558905},
	doi = {10.1109/WCRE.1996.558905},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc. Press},
	author = {Kramer, C. and Prechelt, L.},
	year = {1996},
	pages = {208--215}
}

@inproceedings{arcelli_design_2006,
	title = {Design Pattern Detection for Reverse Engineering},
	isbn = {0-7695-2719-1},
	url = {https://doi.org/10.1109/WCRE.2006.23},
	doi = {10.1109/WCRE.2006.23},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Arcelli, Francesca and Raibulet, Claudia and Gu\'{e}h\'{e}neuc, Yann-gael and Antoniol, Giuliano and Smith, Jason},
	year = {2006},
	pages = {316--316}
}

@inproceedings{bernardi_model-driven_2013,
	title = {A model-driven graph-matching approach for design pattern detection},
	isbn = {978-1-4799-2931-3},
	url = {https://doi.org/10.1109/WCRE.2013.6671292},
	doi = {10.1109/WCRE.2013.6671292},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Bernardi, Mario Luca and Cimitile, Marta and Di Lucca, Giuseppe Antonio},
	month = oct,
	year = {2013},
	pages = {172--181}
}

@inproceedings{tonella_augmenting_1996,
	title = {Augmenting pattern-based architectural recovery with flow analysis: Mosaic-a case study},
	isbn = {0-8186-7674-4},
	shorttitle = {Augmenting pattern-based architectural recovery with flow analysis},
	url = {https://doi.org/10.1109/WCRE.1996.558904},
	doi = {10.1109/WCRE.1996.558904},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc. Press},
	author = {Tonella, P. and Fiutem, R. and Antoniol, G. and Merlo, E.},
	year = {1996},
	pages = {198--207}
}

@inproceedings{albin-amiot_instantiating_2001,
	title = {Instantiating and detecting design patterns: putting bits and pieces together},
	isbn = {0-7695-1426-X},
	shorttitle = {Instantiating and detecting design patterns},
	url = {https://doi.org/10.1109/ASE.2001.989802},
	doi = {10.1109/ASE.2001.989802},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Albin-Amiot, H. and Cointe, P. and Gu\'{e}h\'{e}neuc, Y.-G. and Jussien, N.},
	year = {2001},
	pages = {166--173}
}

@inproceedings{wegrzynowicz_towards_2009,
	title = {Towards a Comprehensive Test Suite for Detectors of Design Patterns},
	isbn = {978-1-4244-5259-0},
	url = {https://doi.org/10.1109/ASE.2009.85},
	doi = {10.1109/ASE.2009.85},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Wegrzynowicz, Patrycja and Stencel, Krzysztof},
	month = nov,
	year = {2009},
	pages = {103--110}
}

@inproceedings{shi_reverse_2006,
	title = {Reverse Engineering of Design Patterns from Java Source Code},
	isbn = {0-7695-2579-2},
	url = {https://doi.org/10.1109/ASE.2006.57},
	doi = {10.1109/ASE.2006.57},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Shi, Nija and Olsson, Ronald},
	year = {2006},
	pages = {123--134}
}

@inproceedings{smith_spqr:_2003,
	title = {{SPQR}: flexible automated design pattern extraction from source code},
	isbn = {0-7695-2035-9},
	shorttitle = {{SPQR}},
	url = {https://doi.org/10.1109/ASE.2003.1240309},
	doi = {10.1109/ASE.2003.1240309},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Smith, J.M. and Stotts, D.},
	year = {2003},
	pages = {215--224}
}

@inproceedings{heuzeroth_generating_2003,
	title = {Generating design pattern detectors from pattern specifications},
	isbn = {0-7695-2035-9},
	url = {https://doi.org/10.1109/ASE.2003.1240313},
	doi = {10.1109/ASE.2003.1240313},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Heuzeroth, D. and Mandel, S. and Lowe, W.},
	year = {2003},
	pages = {245--248}
}

@inproceedings{balanyi_mining_2003,
	title = {Mining design patterns from C++ source code},
	isbn = {0-7695-1905-9},
	url = {https://doi.org/10.1109/ICSM.2003.1235436},
	doi = {10.1109/ICSM.2003.1235436},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Balanyi, Z. and Ferenc, R.},
	year = {2003},
	pages = {305--314}
}

@inproceedings{bernardi_model-driven_2010,
	title = {Model-driven detection of Design Patterns},
	isbn = {978-1-4244-8630-4},
	url = {https://doi.org/10.1109/ICSM.2010.5609740},
	doi = {10.1109/ICSM.2010.5609740},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Bernardi, Mario Luca and Di Lucca, Giuseppe Antonio},
	month = sep,
	year = {2010},
	pages = {1--5}
}

@inproceedings{ferenc_design_2005,
	title = {Design pattern mining enhanced by machine learning},
	isbn = {0-7695-2368-4},
	url = {https://doi.org/10.1109/ICSM.2005.40},
	doi = {10.1109/ICSM.2005.40},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Ferenc, R. and Beszedes, A. and Fulop, L. and Lele, J.},
	year = {2005},
	pages = {295--304}
}

@inproceedings{sartipi_graph_2001,
	title = {A graph pattern matching approach to software architecture recovery},
	isbn = {0-7695-1189-9},
	url = {https://doi.org/10.1109/ICSM.2001.972754},
	doi = {10.1109/ICSM.2001.972754},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Sartipi, K. and Kontogiannis, K.},
	year = {2001},
	pages = {408--419}
}

@inproceedings{de_lucia_eclipse_2010,
	title = {An Eclipse plug-in for the detection of design pattern instances through static and dynamic analysis},
	isbn = {978-1-4244-8630-4},
	url = {https://doi.org/10.1109/ICSM.2010.5609707},
	doi = {10.1109/ICSM.2010.5609707},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {De Lucia, Andrea and Deufemia, Vincenzo and Gravino, Carmine and Risi, Michele},
	month = sep,
	year = {2010},
	pages = {1--6}
}

@inproceedings{antoniol_using_1998,
	title = {Using metrics to identify design patterns in object-oriented software},
	isbn = {0-8186-9201-4},
	url = {https://doi.org/10.1109/METRIC.1998.731224},
	doi = {10.1109/METRIC.1998.731224},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Antoniol, G. and Fiutem, R. and Cristoforetti, L.},
	year = {1998},
	pages = {23--34}
}

@inproceedings{kniesel_standing_2009,
	title = {Standing on the shoulders of giants - A data fusion approach to design pattern detection},
	isbn = {978-1-4244-3998-0},
	url = {https://doi.org/10.1109/ICPC.2009.5090044},
	doi = {10.1109/ICPC.2009.5090044},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Kniesel, Gunter and Binun, Alexander},
	month = may,
	year = {2009},
	pages = {208--217}
}

@inproceedings{heuzeroth_automatic_2003,
	title = {Automatic design pattern detection},
	isbn = {0-7695-1883-4},
	url = {https://doi.org/10.1109/WPC.2003.1199193},
	doi = {10.1109/WPC.2003.1199193},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Heuzeroth, D. and Holl, T. and Hogstrom, G. and Lowe, W.},
	year = {2003},
	pages = {94--103}
}

@inproceedings{antoniol_design_1998,
	title = {Design pattern recovery in object-oriented software},
	isbn = {0-8186-8560-3},
	url = {https://doi.org/10.1109/WPC.1998.693342},
	doi = {10.1109/WPC.1998.693342},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Antoniol, G. and Fiutem, R. and Cristoforetti, L.},
	year = {1998},
	pages = {153--160}
}

@inproceedings{beyer_crocopat:_2003,
	title = {{CrocoPat}: efficient pattern analysis in object-oriented programs},
	isbn = {0-7695-1883-4},
	shorttitle = {{CrocoPat}},
	url = {https://doi.org/10.1109/WPC.2003.1199220},
	doi = {10.1109/WPC.2003.1199220},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Beyer, D. and Lewerentz, C.},
	year = {2003},
	pages = {294--295}
}

@inproceedings{pettersson_non-conservative_2007,
	title = {A Non-conservative Approach to Software Pattern Detection},
	isbn = {0-7695-2860-0},
	url = {https://doi.org/10.1109/ICPC.2007.8},
	doi = {10.1109/ICPC.2007.8},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Pettersson, N. and Lowe, W.},
	month = jun,
	year = {2007},
	pages = {189--198}
}

@article{elaasar_vpml:_2013,
	title = {{VPML}: an approach to detect design patterns of {MOF}-based modeling languages},
	issn = {1619-1366, 1619-1374},
	shorttitle = {{VPML}},
	url = {http://link.springer.com/10.1007/s10270-013-0325-9},
	doi = {10.1007/s10270-013-0325-9},
	language = {en},
	urldate = {2014-09-29},
	journal = {Software \& Systems Modeling},
	author = {Elaasar, Maged and Briand, Lionel C. and Labiche, Yvan},
	month = mar,
	year = {2013}
}

@article{arcelli_fontana_understanding_2011,
	title = {Understanding the relevance of micro-structures for design patterns detection},
	volume = {84},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2011.07.006},
	doi = {10.1016/j.jss.2011.07.006},
	language = {en},
	number = {12},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Arcelli Fontana, F. and Maggioni, S. and Raibulet, C.},
	month = dec,
	year = {2011},
	pages = {2334--2347}
}

@article{hasheminejad_design_2012,
	title = {Design patterns selection: An automatic two-phase method},
	volume = {85},
	issn = {01641212},
	shorttitle = {Design patterns selection},
	url = {https://doi.org/10.1016/j.jss.2011.08.031},
	doi = {10.1016/j.jss.2011.08.031},
	language = {en},
	number = {2},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Hasheminejad, Seyed Mohammad Hossein and Jalili, Saeed},
	month = feb,
	year = {2012},
	pages = {408--424}
}

@inproceedings{moha_naouel_taxonomy_2005,
	address = {Budapest, Hungary},
	title = {A {Taxonomy} and a {First} {Study} of {Design} {Pattern} {Defects}},
	booktitle = {{IEEE} {International} {Workshop} on {Software} {Technology} and {Engineering} {Practice}},
	publisher = {IEEE Computer Society},
	author = {{Moha, Naouel} and {Huynh, Duc-loc} and {Gu\'{e}h\'{e}neuc Y-G}},
	year = {2005},
	pages = {225--229}
}

@article{lucia_design_2009,
	title = {Design pattern recovery through visual language parsing and source code analysis},
	volume = {82},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2009.02.012},
	doi = {10.1016/j.jss.2009.02.012},
	language = {en},
	number = {7},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Lucia, Andrea De and Deufemia, Vincenzo and Gravino, Carmine and Risi, Michele},
	month = jul,
	year = {2009},
	pages = {1177--1193}
}

@article{antoniol_object-oriented_2001,
	title = {Object-oriented design patterns recovery},
	volume = {59},
	issn = {01641212},
	url = {https://doi.org/10.1016/S0164-1212(01)00061-9},
	doi = {10.1016/S0164-1212(01)00061-9},
	language = {en},
	number = {2},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Antoniol, G. and Casazza, G. and Di Penta, M. and Fiutem, R.},
	month = nov,
	year = {2001},
	pages = {181--196}
}

@article{huang_practical_2005,
	title = {A practical pattern recovery approach based on both structural and behavioral analysis},
	volume = {75},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2003.11.018},
	doi = {10.1016/j.jss.2003.11.018},
	language = {en},
	number = {1-2},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Huang, Heyuan and Zhang, Shensheng and Cao, Jian and Duan, Yonghong},
	month = feb,
	year = {2005},
	pages = {69--87}
}

@article{rasool_design_2010,
	title = {Design pattern recovery based on annotations},
	volume = {41},
	issn = {09659978},
	url = {https://doi.org/10.1016/j.advengsoft.2009.10.014},
	doi = {10.1016/j.advengsoft.2009.10.014},
	language = {en},
	number = {4},
	urldate = {2014-09-29},
	journal = {Advances in Engineering Software},
	author = {Rasool, Ghulam and Philippow, Ilka and Mäder, Patrick},
	month = apr,
	year = {2010},
	pages = {519--526}
}

@article{nicholson_automated_2014,
	title = {Automated verification of design patterns: A case study},
	volume = {80},
	issn = {01676423},
	shorttitle = {Automated verification of design patterns},
	url = {https://doi.org/10.1016/j.scico.2013.05.007},
	doi = {10.1016/j.scico.2013.05.007},
	language = {en},
	urldate = {2014-09-29},
	journal = {Science of Computer Programming},
	author = {Nicholson, Jon and Eden, Amnon H. and Gasparis, Epameinondas and Kazman, Rick},
	month = feb,
	year = {2014},
	pages = {211--222}
}

@article{gueheneuc_demima_2008,
	title = {{DeMIMA}: A Multilayered Approach for Design Pattern Identification},
	volume = {34},
	issn = {0098-5589},
	shorttitle = {{DeMIMA}},
	url = {https://doi.org/10.1109/TSE.2008.48},
	doi = {10.1109/TSE.2008.48},
	number = {5},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Gu\'{e}h\'{e}neuc, Y.-G. and Antoniol, G.},
	month = sep,
	year = {2008},
	pages = {667--684}
}

@article{pettersson_evaluation_2010,
	title = {Evaluation of Accuracy in Design Pattern Occurrence Detection},
	volume = {36},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2009.92},
	doi = {10.1109/TSE.2009.92},
	number = {4},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Pettersson, Niklas and Löwe, Welf and Nivre, Joakim},
	month = jul,
	year = {2010},
	pages = {575--590}
}

@article{tsantalis_design_2006,
	title = {Design Pattern Detection Using Similarity Scoring},
	volume = {32},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2006.112},
	doi = {10.1109/TSE.2006.112},
	number = {11},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Tsantalis, Nikolaos and Chatzigeorgiou, Alexander and Stephanides, George and Halkidis, Spyros},
	month = nov,
	year = {2006},
	pages = {896--909}
}

@article{zanoni_pattern_2014,
	title = {Pattern detection for conceptual schema recovery in data-intensive systems: {DETECTION} {FOR} {CONCEPTUAL} {SCHEMA} {RECOVERY} {IN} {DATA}-{INTENSIVE} {SYSTEMS}},
	issn = {20477473},
	shorttitle = {Pattern detection for conceptual schema recovery in data-intensive systems},
	url = {http://doi.wiley.com/10.1002/smr.1656},
	doi = {10.1002/smr.1656},
	language = {en},
	urldate = {2014-09-29},
	journal = {Journal of Software: Evolution and Process},
	author = {Zanoni, Marco and Perin, Fabrizio and Fontana, Francesca Arcelli and Viscusi, Gianluigi},
	month = jul,
	year = {2014},
}

@inproceedings{asencio_relating_2002,
	title = {Relating expectations to automatically recovered design patterns},
	isbn = {0-7695-1799-4},
	url = {https://doi.org/10.1109/WCRE.2002.1173067},
	doi = {10.1109/WCRE.2002.1173067},
	urldate = {2014-12-19},
	publisher = {{IEEE} Comput. Soc},
	author = {Asencio, A. and Cardman, S. and Harris, D. and Laderman, E.},
	year = {2002},
	pages = {87--96}
}

@article{bansiya_automating_1998,
	title = {Automating design-pattern identification},
	volume = {23},
	number = {6},
	journal = {Dr. Dobb's journal},
	author = {Bansiya, Jagdish},
	year = {1998}
}

@inproceedings{beyer_simple_2003,
	title = {Simple and efficient relational querying of software structures},
	isbn = {0-7695-2027-8},
	url = {https://doi.org/10.1109/WCRE.2003.1287252},
	doi = {10.1109/WCRE.2003.1287252},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Beyer, D. and Noack, A. and Lewerentz, C.},
	year = {2003},
	pages = {216--225}
}

@inproceedings{blewitt_automatic_2001,
	title = {Automatic verification of Java design patterns},
	isbn = {0-7695-1426-X},
	url = {https://doi.org/10.1109/ASE.2001.989821},
	doi = {10.1109/ASE.2001.989821},
	urldate = {2014-12-19},
	publisher = {{IEEE} Comput. Soc},
	author = {Blewitt, A. and Bundy, A. and Stark, I.},
	year = {2001},
	pages = {324--327}
}

@inproceedings{costagliola_case_2006,
	title = {Case studies of visual language based design patterns recovery},
	isbn = {0-7695-2536-9},
	url = {https://doi.org/10.1109/CSMR.2006.14},
	doi = {10.1109/CSMR.2006.14},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Costagliola, G. and De Lucia, A. and Deufemia, V. and Gravino, C. and Risi, M.},
	year = {2006},
	pages = {10 pp.--174}
}

@inproceedings{dong_dp-miner:_2007,
	title = {{DP}-Miner: Design Pattern Discovery Using Matrix},
	isbn = {0-7695-2772-8},
	shorttitle = {{DP}-Miner},
	url = {https://doi.org/10.1109/ECBS.2007.33},
	doi = {10.1109/ECBS.2007.33},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Dong, Jing and Lad, Dushyant S. and Zhao, Yajing},
	month = mar,
	year = {2007},
	pages = {371--380}
}

@inproceedings{dong_experiments_2007,
	title = {Experiments on Design Pattern Discovery},
	isbn = {0-7695-2954-2},
	url = {https://doi.org/10.1109/PROMISE.2007.6},
	doi = {10.1109/PROMISE.2007.6},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Dong, Jing and Zhao, Yajing},
	month = may,
	year = {2007},
	pages = {12--12}
}

@article{huang_practical_2005-1,
	title = {A practical pattern recovery approach based on both structural and behavioral analysis},
	volume = {75},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2003.11.018},
	doi = {10.1016/j.jss.2003.11.018},
	language = {en},
	number = {1-2},
	urldate = {2014-12-19},
	journal = {Journal of Systems and Software},
	author = {Huang, Heyuan and Zhang, Shensheng and Cao, Jian and Duan, Yonghong},
	month = feb,
	year = {2005},
	pages = {69--87}
}

@inproceedings{hong_jbooret_2001,
	title = {{JBOORET}: an automated tool to recover {OO} design and source models},
	isbn = {0-7695-1372-7},
	shorttitle = {{JBOORET}},
	url = {https://doi.org/10.1109/CMPSAC.2001.960600},
	doi = {10.1109/CMPSAC.2001.960600},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Hong, M. and Xie, Tao and Yang, Fuqing},
	year = {2001},
	pages = {71--76},
}

@inproceedings{niere_handling_2003,
	title = {Handling large search space in pattern-based reverse engineering},
	isbn = {0-7695-1883-4},
	url = {https://doi.org/10.1109/WPC.2003.1199212},
	doi = {10.1109/WPC.2003.1199212},
	urldate = {2014-12-19},
	publisher = {{IEEE} Comput. Soc},
	author = {Niere, J. and Wadsack, J.P. and Wendehals, L.},
	year = {2003},
	pages = {274--279}
}

@article{seemann_pattern-based_1998,
	title = {Pattern-based design recovery of Java software},
	volume = {23},
	issn = {01635948},
	url = {https://doi.org/10.1145/291252.288207},
	doi = {10.1145/291252.288207},
	language = {en},
	number = {6},
	urldate = {2014-12-19},
	journal = {{ACM} {SIGSOFT} Software Engineering Notes},
	author = {Seemann, Jochen and von Gudenberg, Jürgen Wolff},
	month = nov,
	year = {1998},
	pages = {10--16}
}

@inproceedings{tonella_object_1999,
	title = {Object oriented design pattern inference},
	isbn = {0-7695-0016-1},
	url = {https://doi.org/10.1109/ICSM.1999.792619},
	doi = {10.1109/ICSM.1999.792619},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Tonella, P. and Antoniol, G.},
	year = {1999},
	pages = {230--238}
}

@inproceedings{wei_wang_design_2005,
	title = {Design Pattern Detection in Eiffel Systems},
	isbn = {0-7695-2474-5},
	url = {https://doi.org/10.1109/WCRE.2005.14},
	doi = {10.1109/WCRE.2005.14},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {{Wei Wang} and Tzerpos, V.},
	year = {2005},
	pages = {165--174}
}

@inproceedings{wendehals_improving_2003,
	title = {Improving design pattern instance recognition by dynamic analysis},
	booktitle = {Proc. of the {ICSE} 2003 Workshop on Dynamic Analysis ({WODA}), Portland, {USA}},
	author = {Wendehals, Lothar},
	year = {2003},
	pages = {29--32}
}

@inproceedings{zhi-xiang_zhang_new_2004,
	title = {A new method for design pattern mining},
	volume = {4},
	isbn = {0-7803-8403-2},
	url = {https://doi.org/10.1109/ICMLC.2004.1382059},
	doi = {10.1109/ICMLC.2004.1382059},
	urldate = {2014-12-19},
	publisher = {{IEEE}},
	author = {Zhang, Zhi-Xiang and Li, Qing-Hua and Ben, Ke-Rong},
	year = {2004},
	pages = {1755--1759}
}

@inproceedings{gueheneuc_using_2001,
	title = {Using explanations for design-patterns identification},
	volume = {1},
	booktitle = {{IJCAI}},
	publisher = {Citeseer},
	author = {Gu\'{e}h\'{e}neuc, Yann-Gael and Jussien, Narendra},
	year = {2001},
	pages = {57--64}
}

@inproceedings{mcnatt_coupling_2001,
	title = {Coupling of design patterns: common practices and their benefits},
	isbn = {0-7695-1372-7},
	shorttitle = {Coupling of design patterns},
	url = {https://doi.org/10.1109/CMPSAC.2001.960670},
	doi = {10.1109/CMPSAC.2001.960670},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {McNatt, W.B. and Bieman, J.M.},
	year = {2001},
	pages = {574--579}
}

@inproceedings{clarke_composition_2001,
	title = {Composition patterns: an approach to designing reusable},
	isbn = {0-7695-1050-7},
	shorttitle = {Composition patterns},
	url = {https://doi.org/10.1109/ICSE.2001.919076},
	doi = {10.1109/ICSE.2001.919076},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Clarke, S. and Walker, R.J.},
	year = {2001},
	pages = {5--14}
}

@inproceedings{lorenz_tiling_1997,
	title = {Tiling design patterns---a case study using the interpreter pattern},
	isbn = {0897919084},
	url = {https://doi.org/10.1145/263698.263737},
	doi = {10.1145/263698.263737},
	language = {en},
	urldate = {2014-09-29},
	publisher = {{ACM} Press},
	author = {Lorenz, David H.},
	year = {1997},
	pages = {206--217}
}

@book{lorenz_object-oriented_1994,
	address = {Englewood Cliffs, NJ},
	series = {Prentice {Hall} object-oriented series},
	title = {Object-oriented software metrics: a practical guide},
	isbn = {978-0-13-179292-0},
	shorttitle = {Object-oriented software metrics},
	publisher = {PTR Prentice Hall},
	author = {Lorenz, Mark and Kidd, Jeff},
	year = {1994},
	keywords = {Object-oriented programming (Computer science), Software measurement}
}

@article{riehle_composite_1997,
	title = {Composite design patterns},
	volume = {32},
	issn = {03621340},
	url = {https://doi.org/10.1145/263700.263739},
	doi = {10.1145/263700.263739},
	language = {en},
	number = {10},
	urldate = {2014-09-29},
	journal = {{ACM} {SIGPLAN} Notices},
	author = {Riehle, Dirk},
	month = oct,
	year = {1997},
	pages = {218--228}
}

@inproceedings{klosch_improving_1996,
	title = {Improving program understanding by unfolding layers of interacting patterns},
	isbn = {0-8186-7283-8},
	url = {https://doi.org/10.1109/WPC.1996.501135},
	doi = {10.1109/WPC.1996.501135},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc. Press},
	author = {Klosch, R.R. and Mittermeir, R.T.},
	year = {1996},
	pages = {208--217}
}

@article{folmer_bridging_2006,
	title = {Bridging patterns: An approach to bridge gaps between {SE} and {HCI}},
	volume = {48},
	issn = {09505849},
	shorttitle = {Bridging patterns},
	url = {https://doi.org/10.1016/j.infsof.2005.02.005},
	doi = {10.1016/j.infsof.2005.02.005},
	language = {en},
	number = {2},
	urldate = {2014-09-29},
	journal = {Information and Software Technology},
	author = {Folmer, Eelke and Welie, Martijn van and Bosch, Jan},
	month = feb,
	year = {2006},
	pages = {69--89}
}

@article{bieman_evaluating_2004,
	title = {Evaluating the Strength and Impact of Design Pattern Coupling},
	author = {Bieman, J.M. and Wang, H.},
	year = {2004}
}

@techreport{bieman_design_2006,
	title = {Design Pattern Coupling, Change Proneness, and Change Coupling: A Pilot Study},
	institution = {Colorado State University},
	author = {Bieman, J.M. and Wang, H.},
	year = {2006}
}

@inproceedings{marinescu_incode:_2010,
	title = {{InCode}: Continuous Quality Assessment and Improvement},
	url = {https://doi.org/10.1109/CSMR.2010.44},
	doi = {10.1109/CSMR.2010.44},
	abstract = {While significant progress has been made over the last ten years in the research field of quality assessment, developers still can't take full advantage of the benefits of these new tools and technique. We believe that there at least two main causes for this lack of adoption: (i) the lack of integration in mainstream {IDEs} and (ii) the lack of support for a continuous (daily) usage of {QA} tools. In this context we created {INCODE} as an Eclipe plug in that would transform quality assessment and code inspections from a standalone activity, into a continuous, agile process, fully integrated in the development life-cycle. But {INCODE} not only assesses continuously the quality of Java systems, it also assists developers in taking restructuring decisions, and even supports them in triggering refactorings.},
	booktitle = {Software Maintenance and Reengineering ({CSMR}), 2010 14th European Conference on},
	author = {Marinescu, R. and Ganea, G. and Verebi, I.},
	month = mar,
	year = {2010},
	keywords = {agile process, code inspection, continuous quality assessment, continuous quality improvement, development life-cycle, Eclipe plugin, {IDE}, {InCode}, Java, Java system, life cycle costing, {QA} tool, software prototyping, software quality, software tools},
	pages = {274--275}
}

@inproceedings{tahvildari_quality-driven_2004,
	title = {Quality-driven object-oriented code restructuring},
	booktitle = {Proceedings of Proceedings of {ICSE} Workshop on Software Quality ({ICSE})},
	author = {Tahvildari, L. and Kontogiannis, K.},
	year = {2004},
	pages = {47--52}
}

@inproceedings{tahvildari_metric-based_2003,
	title = {A metric-based approach to enhance design quality through meta-pattern transformations},
	isbn = {0-7695-1902-4},
	url = {https://doi.org/10.1109/CSMR.2003.1192426},
	doi = {10.1109/CSMR.2003.1192426},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Tahvildari, L. and Kontogiannis, K.},
	year = {2003},
	pages = {183--192}
}

@inproceedings{khomh_squad:_2009,
	title = {{SQUAD}: Software Quality Understanding through the Analysis of Design},
	isbn = {978-0-7695-3867-9},
	shorttitle = {{SQUAD}},
	url = {https://doi.org/10.1109/WCRE.2009.22},
	doi = {10.1109/WCRE.2009.22},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Khomh, Foutse},
	year = {2009},
	pages = {303--306}
}

@inproceedings{marinescu_measurement_2005,
	title = {Measurement and quality in object-oriented design},
	isbn = {0-7695-2368-4},
	url = {https://doi.org/10.1109/ICSM.2005.63},
	doi = {10.1109/ICSM.2005.63},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Marinescu, R.},
	year = {2005},
	pages = {701--704}
}

@inproceedings{hsueh_quality_2007,
	title = {A Quality Verification Model for Design Pattern},
	isbn = {0-7695-2870-8},
	url = {https://doi.org/10.1109/COMPSAC.2007.36},
	doi = {10.1109/COMPSAC.2007.36},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Hsueh, Nien-Lin and Chu, Peng-Hua and Lee, Jonathan and Chu, William},
	month = jul,
	year = {2007},
	pages = {531--534}
}

@inproceedings{khomh_design_2008,
	title = {Do Design Patterns Impact Software Quality Positively?},
	isbn = {978-1-4244-2157-2},
	url = {https://doi.org/10.1109/CSMR.2008.4493325},
	doi = {10.1109/CSMR.2008.4493325},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Khomh, Foutse and Gu\'{e}h\'{e}neuc, Yann-Gael},
	month = apr,
	year = {2008},
	pages = {274--278}
}

@inproceedings{tahvildari_role_2002,
	title = {On the role of design patterns in quality-driven re-engineering},
	isbn = {0-7695-1438-3},
	url = {https://doi.org/10.1109/CSMR.2002.995810},
	doi = {10.1109/CSMR.2002.995810},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Tahvildari, L. and Kontogiannis, K.},
	year = {2002},
	pages = {230--240}
}

@unpublished{schwanke_measuring_2013,
	title = {Measuring Architecture Quality by Structure Plus History Analysis},
	author = {Schwanke, Robert and Xiao, Lu and Cai, Yuangfang},
	year = {2013}
}

@inproceedings{gatrell_design_2009,
	title = {Design Patterns and Change Proneness: A Replication Using Proprietary C\# Software},
	isbn = {978-0-7695-3867-9},
	shorttitle = {Design Patterns and Change Proneness},
	url = {https://doi.org/10.1109/WCRE.2009.31},
	doi = {10.1109/WCRE.2009.31},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Gatrell, Matt and Counsell, Steve and Hall, Tracy},
	year = {2009},
	pages = {160--164}
}

@inproceedings{di_penta_empirical_2008,
	title = {An empirical study of the relationships between design pattern roles and class change proneness},
	isbn = {978-1-4244-2613-3},
	url = {https://doi.org/10.1109/ICSM.2008.4658070},
	doi = {10.1109/ICSM.2008.4658070},
	urldate = {2014-09-29},
	publisher = {{IEEE}},
	author = {Di Penta, Massimiliano and Cerulo, Luigi and Gu\'{e}h\'{e}neuc, Yann-Gael and Antoniol, Giuliano},
	month = sep,
	year = {2008},
	pages = {217--226}
}

@inproceedings{agerbo_how_1998,
	title = {How to preserve the benefits of design patterns},
	isbn = {1581130058},
	url = {https://doi.org/10.1145/286936.286952},
	doi = {10.1145/286936.286952},
	language = {en},
	urldate = {2014-09-29},
	publisher = {{ACM} Press},
	author = {Agerbo, Ellen and Cornils, Aino},
	year = {1998},
	pages = {134--143}
}

@inproceedings{bieman_design_2003,
	title = {Design patterns and change proneness: an examination of five evolving systems},
	isbn = {0-7695-1987-3},
	shorttitle = {Design patterns and change proneness},
	url = {https://doi.org/10.1109/METRIC.2003.1232454},
	doi = {10.1109/METRIC.2003.1232454},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Bieman, J.M. and Straw, G. and Wang, H. and Munger, P.W. and Alexander, R.T.},
	year = {2003},
	pages = {40--49}
}

@article{vokac_controlled_2004,
	title = {A Controlled Experiment Comparing the Maintainability of Programs Designed with and without Design Patterns—A Replication in a Real Programming Environment},
	volume = {9},
	issn = {1382-3256},
	url = {http://link.springer.com/10.1023/B:EMSE.0000027778.69251.1f},
	doi = {10.1023/B:EMSE.0000027778.69251.1f},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {Empirical Software Engineering},
	author = {Vok\'{a}\v{c}, Marek and Tichy, Walter and Sj{\o}berg, Dag I. K. and Arisholm, Erik and Aldrin, Magne},
	month = sep,
	year = {2004},
	pages = {149--195}
}

@article{posnett_empirical_2011,
	title = {An empirical study on the influence of pattern roles on change-proneness},
	volume = {16},
	issn = {1382-3256, 1573-7616},
	url = {http://link.springer.com/10.1007/s10664-010-9148-2},
	doi = {10.1007/s10664-010-9148-2},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {Empirical Software Engineering},
	author = {Posnett, Daryl and Bird, Christian and D\'{e}vanbu, Prem},
	month = jun,
	year = {2011},
	pages = {396--423}
}

@article{cepeda_porras_empirical_2010,
	title = {An empirical study on the efficiency of different design pattern representations in {UML} class diagrams},
	volume = {15},
	issn = {1382-3256, 1573-7616},
	url = {http://link.springer.com/10.1007/s10664-009-9125-9},
	doi = {10.1007/s10664-009-9125-9},
	language = {en},
	number = {5},
	urldate = {2014-09-29},
	journal = {Empirical Software Engineering},
	author = {Cepeda Porras, Gerardo and Gu\'{e}h\'{e}neuc, Yann-Gaël},
	month = oct,
	year = {2010},
	pages = {493--522}
}

@article{balaban_pattern-based_2014,
	title = {A pattern-based approach for improving model quality},
	issn = {1619-1366, 1619-1374},
	url = {http://link.springer.com/10.1007/s10270-013-0390-0},
	doi = {10.1007/s10270-013-0390-0},
	language = {en},
	urldate = {2014-09-29},
	journal = {Software \& Systems Modeling},
	author = {Balaban, Mira and Maraee, Azzam and Sturm, Arnon and Jelnov, Pavel},
	month = jan,
	year = {2014}
}

@article{hsueh_quantitative_2008,
	title = {A quantitative approach for evaluating the quality of design patterns},
	volume = {81},
	issn = {01641212},
	url = {https://doi.org/10.1016/j.jss.2007.11.724},
	doi = {10.1016/j.jss.2007.11.724},
	language = {en},
	number = {8},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Hsueh, Nien-Lin and Chu, Peng-Hua and Chu, William},
	month = aug,
	year = {2008},
	pages = {1430--1439}
}

@article{huston_effects_2001,
	title = {The effects of design pattern application on metric scores},
	volume = {58},
	issn = {01641212},
	url = {https://doi.org/10.1016/S0164-1212(01)00043-7},
	doi = {10.1016/S0164-1212(01)00043-7},
	language = {en},
	number = {3},
	urldate = {2014-09-29},
	journal = {Journal of Systems and Software},
	author = {Huston, Brian},
	month = sep,
	year = {2001},
	pages = {261--269}
}

@article{rising_benefit_2010,
	title = {The Benefit of Patterns},
	volume = {27},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2010.127},
	doi = {10.1109/MS.2010.127},
	number = {5},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Rising, Linda},
	month = sep,
	year = {2010},
	pages = {15--17}
}

@article{hohpe_twenty_2013,
	title = {Twenty Years of Patterns' Impact},
	volume = {30},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2013.135},
	doi = {10.1109/MS.2013.135},
	number = {6},
	urldate = {2014-09-29},
	journal = {{IEEE} Software},
	author = {Hohpe, Gregor and Wirfs-Brock, Rebecca and Yoder, Joseph W. and Zimmermann, Olaf},
	month = nov,
	year = {2013},
	pages = {88--88}
}

@article{vokac_defect_2004,
	title = {Defect frequency and design patterns: an empirical study of industrial code},
	volume = {30},
	issn = {0098-5589},
	shorttitle = {Defect frequency and design patterns},
	url = {https://doi.org/10.1109/TSE.2004.99},
	doi = {10.1109/TSE.2004.99},
	language = {en},
	number = {12},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Vokac, M.},
	month = dec,
	year = {2004},
	pages = {904--917}
}

@article{zhang_what_2012,
	title = {What Do We Know about the Effectiveness of Software Design Patterns?},
	volume = {38},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2011.79},
	doi = {10.1109/TSE.2011.79},
	number = {5},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Zhang, Cheng and Budgen, David},
	month = sep,
	year = {2012},
	pages = {1213--1231}
}

@article{prechelt_controlled_2001,
	title = {A controlled experiment in maintenance: comparing design patterns to simpler solutions},
	volume = {27},
	issn = {00985589},
	shorttitle = {A controlled experiment in maintenance},
	url = {https://doi.org/10.1109/32.988711},
	doi = {10.1109/32.988711},
	number = {12},
	urldate = {2014-09-29},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Prechelt, L. and Unger, B. and Tichy, W.F. and Brossler, P. and Votta, L.G.},
	month = dec,
	year = {2001},
	pages = {1134--1144}
}

@inproceedings{griffith_evolution_2011,
	address = {Lawrence, Kansas, United States},
	series = {{MALETS} '11},
	title = {Evolution of legacy system comprehensibility through automated refactoring},
	isbn = {978-1-4503-1022-2},
	url = {http://doi.acm.org/10.1145/2070821.2070826},
	doi = {10.1145/2070821.2070826},
	abstract = {Software engineering is a continually evolving discipline, wherein researchers and members of industry are working towards defining and refining what are known as "best practices." Best practices are the set of known correct engineering techniques that lead to quality software. When a software artifact is produced, it becomes temporally locked into a single instantiation of these best practices at a given point in time. If such software is not maintained in such a way as to keep it current with the evolution of practice, then there is a good chance that subsequent engineers may not understand the design choices made. There are known techniques, called refactorings, which allow for structural changes to software without altering the outward appearance and behavior, thus maintaining the intent of the original design. Unfortunately, refactoring requires an engineer to both understand the techniques to be applied and the code to which they are applied to. This is not always feasible. We have developed an automated system utilizing Evolutionary Algorithms to manipulate refactorings correctly without requiring an underlying understanding of the software. This then allows for sustained levels of quality of evolving software systems. The understandability, maintainability, and reusability of the software regenerate as best practices evolve.},
	booktitle = {Proceedings of the International Workshop on Machine Learning Technologies in Software Engineering},
	publisher = {{ACM}},
	author = {Griffith, Isaac and Wahl, Scott and Izurieta, Clemente},
	year = {2011},
	keywords = {automation, code smell, measurement, refactoring, software engineering, software evolution},
	pages = {35--42}
}

@inproceedings{griffith_truerefactor_2011,
	address = {Honolulu, {HI}, {USA}},
	series = {{CAINE} '11},
	title = {{TrueRefactor}: An Automated Refactoring Tool to Improve Legacy System and Application Comprehensibility},
	booktitle = {24 International Conference on Computer Applications in Industry and Engineering},
	publisher = {{ISCA}},
	author = {Griffith, Isaac and Wahl, Scott and Izurieta, Clemente},
	month = nov,
	year = {2011}
}

@phdthesis{kataoka_toward_2006,
	title = {Toward practical application of program refactoring},
	school = {Osaka University},
	author = {Kataoka, Y.},
	year = {2006}
}

@inproceedings{liu_facilitating_2009,
	title = {Facilitating software refactoring with appropriate resolution order of bad smells},
	booktitle = {Proceedings of the the 7th joint meeting of the European software engineering conference and the {ACM} {SIGSOFT} symposium on The foundations of software engineering},
	author = {Liu, H. and Yang, L. and Niu, Z. and Ma, Z. and Shao, W.},
	year = {2009},
	pages = {265--268}
}

@inproceedings{marticorena_analysis_2005,
	title = {Analysis and definition of a language independent refactoring catalog},
	booktitle = {17th Conference on Advanced Information Systems Engineering ({CAiSE} 05). Doctoral Consortium, Porto, Portugal},
	author = {Marticorena, R.},
	year = {2005},
	pages = {8}
}

@article{mens_use_2006,
	title = {On the use of graph transformations for model refactoring},
	journal = {Generative and transformational techniques in software engineering},
	author = {Mens, T.},
	year = {2006},
	pages = {219--257}
}

@article{mens_survey_2004,
	title = {A survey of software refactoring},
	volume = {30},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2004.1265817},
	doi = {10.1109/TSE.2004.1265817},
	abstract = {We provide an extensive overview of existing research in the field of software refactoring. This research is compared and discussed based on a number of different criteria: the refactoring activities that are supported, the specific techniques and formalisms that are used for supporting these activities, the types of software artifacts that are being refactored, the important issues that need to be taken into account when building refactoring tool support, and the effect of refactoring on the software process. A running example is used to explain and illustrate the main concepts.},
	number = {2},
	journal = {Software Engineering, {IEEE} Transactions on},
	author = {Mens, T. and Tourwe, T.},
	month = feb,
	year = {2004},
	keywords = {bibliographies, coding technique, coding tools, construction tool, object-oriented programming, programming environment, programming environments, reverse engineering, software maintenance, software quality, software refactoring, software reusability},
	pages = {126--139}
}

@article{okeeffe_search-based_2008,
	title = {Search-based refactoring for software maintenance},
	volume = {81},
	issn = {0164-1212},
	url = {https://doi.org/10.1016/j.jss.2007.06.003},
	doi = {10.1016/j.jss.2007.06.003},
	abstract = {The high cost of software maintenance could be reduced by automatically improving the design of object-oriented programs without altering their behaviour. We have constructed a software tool capable of refactoring object-oriented programs to conform more closely to a given design quality model, by formulating the task as a search problem in the space of alternative designs. This novel approach is validated by two case studies, where programs are automatically refactored to increase flexibility, reusability and understandability as defined by a contemporary quality model. Both local and simulated annealing searches were found to be effective in this task.},
	number = {4},
	journal = {Journal of Systems and Software},
	author = {O'Keeffe, Mark and Cinn\'{e}ide, Mel \'{O}},
	year = {2008},
	note = {Selected papers from the 10th Conference on Software Maintenance and Reengineering ({CSMR} 2006)},
	keywords = {engineering, Search-based, Software},
	pages = {502--516}
}

@phdthesis{opdyke_refactoring_1992,
	title = {Refactoring object-oriented frameworks},
	school = {University of Illinois},
	author = {Opdyke, W.F.},
	year = {1992}
}

@article{pissanetzky_analytical_????,
	title = {An Analytical Method for Refactoring Object-Oriented Code},
	author = {Pissanetzky, S.}
}

@article{rizvi_analytical_????,
	title = {Analytical Report On Software Refactoring},
	author = {Rizvi, SAM and Khanam, Z.}
}

@phdthesis{roberts_practical_1999,
	address = {Champaign, {IL}, {USA}},
	title = {Practical analysis for refactoring},
	school = {University of Illinois at Urbana-Champaign},
	author = {Roberts, Donald Bradley},
	year = {1999},
	note = {{AAI}9944985}
}

@inproceedings{zhang_prioritising_2011,
	title = {Prioritising Refactoring Using Code Bad Smells},
	url = {https://doi.org/10.1109/ICSTW.2011.69},
	doi = {10.1109/ICSTW.2011.69},
	abstract = {We investigated the relationship between six of Fowler et al.'s Code Bad Smells (Duplicated Code, Data Clumps, Switch Statements, Speculative Generality, Message Chains, and Middle Man) and software faults. In this paper we discuss how our results can be used by software developers to prioritise refactoring. In particular we suggest that source code containing Duplicated Code is likely to be associated with more faults than source code containing the other five Code Bad Smells. As a consequence, Duplicated Code should be prioritised for refactoring. Source code containing Message Chains seems to be associated with a high number of faults in some situations. Consequently it is another Code Bad Smell which should be prioritised for refactoring. Source code containing only one of the Data Clumps, Switch Statements, Speculative Generality, or Middle Man Bad Smell is not likely to be fault-prone. As a result these Code Bad Smells could be put into a lower refactoring priority.},
	booktitle = {Software Testing, Verification and Validation Workshops ({ICSTW}), 2011 {IEEE} Fourth International Conference on},
	author = {Zhang, Min and Baddoo, N. and Wernick, P. and Hall, T.},
	month = mar,
	year = {2011},
	keywords = {code bad smells, data clumps, duplicated code, message chains, middle man, software engineering, software faults, source code, speculative generality, switch statements, system recovery},
	pages = {458--464}
}

@inproceedings{liu_initial_2012,
	title = {An Initial Study on Refactoring Tactics},
	isbn = {978-1-4673-1990-4, 978-0-7695-4736-7},
	url = {https://doi.org/10.1109/COMPSAC.2012.31},
	doi = {10.1109/COMPSAC.2012.31},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Liu, Hui and Gao, Yuan and Niu, Zhendong},
	month = jul,
	year = {2012},
	pages = {213--218}
}

@inproceedings{villavicencio_new_2012,
	title = {A New Software Maintenance Scenario Based on Refactoring Techniques},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	url = {https://doi.org/10.1109/CSMR.2012.41},
	doi = {10.1109/CSMR.2012.41},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Villavicencio, Gustavo},
	month = mar,
	year = {2012},
	pages = {341--346}
}

@inproceedings{simon_metrics_2001,
	title = {Metrics based refactoring},
	isbn = {0-7695-1028-0},
	url = {https://doi.org/10.1109/.2001.914965},
	doi = {10.1109/.2001.914965},
	urldate = {2014-09-27},
	publisher = {{IEEE} Comput. Soc},
	author = {Simon, F. and Steinbruckner, F. and Lewerentz, C.},
	year = {2001},
	pages = {30--38}
}

@inproceedings{bryton_modularity-oriented_2008,
	title = {Modularity-Oriented Refactoring},
	isbn = {978-1-4244-2157-2},
	url = {https://doi.org/10.1109/CSMR.2008.4493330},
	doi = {10.1109/CSMR.2008.4493330},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Bryton, Sergio and Abreu, Fernando Brito e},
	month = apr,
	year = {2008},
	pages = {294--297}
}

@inproceedings{joshi_microscopic_2006,
	title = {Microscopic coupling metrics for refactoring},
	isbn = {0-7695-2536-9},
	url = {https://doi.org/10.1109/CSMR.2006.32},
	doi = {10.1109/CSMR.2006.32},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Joshi, P. and Joshi, R.K.},
	year = {2006},
	pages = {8 pp.--152}
}

@inproceedings{terra_recommending_2012,
	title = {Recommending Refactorings to Reverse Software Architecture Erosion},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	url = {https://doi.org/10.1109/CSMR.2012.40},
	doi = {10.1109/CSMR.2012.40},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Terra, Ricardo and Valente, Marco Tulio and Czarnecki, Krzysztof and Bigonha, Roberto S.},
	month = mar,
	year = {2012},
	pages = {335--340}
}

@inproceedings{ge_reconciling_2012,
	title = {Reconciling manual and automatic refactoring},
	isbn = {978-1-4673-1067-3, 978-1-4673-1066-6, 978-1-4673-1065-9},
	url = {https://doi.org/10.1109/ICSE.2012.6227192},
	doi = {10.1109/ICSE.2012.6227192},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Ge, Xi and DuBose, Quinton L. and Murphy-Hill, Emerson},
	month = jun,
	year = {2012},
	pages = {211--221}
}

@inproceedings{steimann_refactoring_2011,
	title = {Refactoring to role objects},
	isbn = {9781450304450},
	url = {https://doi.org/10.1145/1985793.1985854},
	doi = {10.1145/1985793.1985854},
	language = {en},
	urldate = {2014-09-27},
	publisher = {{ACM} Press},
	author = {Steimann, Friedrich and Stolz, Fabian Urs},
	year = {2011},
	pages = {441}
}

@inproceedings{kim_empirical_2011,
	title = {An empirical investigation into the role of {API}-level refactorings during software evolution},
	isbn = {9781450304450},
	url = {https://doi.org/10.1145/1985793.1985815},
	doi = {10.1145/1985793.1985815},
	language = {en},
	urldate = {2014-09-27},
	publisher = {{ACM} Press},
	author = {Kim, Miryung and Cai, Dongxiang and Kim, Sunghun},
	year = {2011},
	pages = {151}
}

@inproceedings{murphy-hill_how_2009,
	title = {How we refactor, and how we know it},
	isbn = {978-1-4244-3453-4},
	url = {https://doi.org/10.1109/ICSE.2009.5070529},
	doi = {10.1109/ICSE.2009.5070529},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Murphy-Hill, Emerson and Parnin, Chris and Black, Andrew P.},
	year = {2009},
	pages = {287--297}
}

@inproceedings{bavota_playing_2010,
	title = {Playing with refactoring: Identifying extract class opportunities through game theory},
	isbn = {978-1-4244-8630-4},
	shorttitle = {Playing with refactoring},
	url = {https://doi.org/10.1109/ICSM.2010.5609739},
	doi = {10.1109/ICSM.2010.5609739},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Bavota, Gabriele and Oliveto, Rocco and De Lucia, Andrea and Antoniol, Giuliano and Gu\'{e}h\'{e}neuc, Yann-Gael},
	month = sep,
	year = {2010},
	pages = {1--5}
}

@inproceedings{oyetoyan_can_2013,
	title = {Can Refactoring Cyclic Dependent Components Reduce Defect-Proneness?},
	isbn = {978-0-7695-4981-1},
	url = {https://doi.org/10.1109/ICSM.2013.62},
	doi = {10.1109/ICSM.2013.62},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Oyetoyan, Tosin Daniel and Cruzes, Daniela Soares and Conradi, Reidar},
	month = sep,
	year = {2013},
	pages = {420--423}
}

@inproceedings{ouni_search-based_2012,
	title = {Search-based refactoring: Towards semantics preservation},
	isbn = {978-1-4673-2312-3, 978-1-4673-2313-0},
	shorttitle = {Search-based refactoring},
	url = {https://doi.org/10.1109/ICSM.2012.6405292},
	doi = {10.1109/ICSM.2012.6405292},
	urldate = {2014-09-27},
	publisher = {{IEEE}},
	author = {Ouni, Ali and Kessentini, Marouane and Sahraoui, Houari and Hamdi, Mohamed Salah},
	month = sep,
	year = {2012},
	pages = {347--356}
}

@inproceedings{du_bois_refactoring_2004,
	title = {Refactoring - improving coupling and cohesion of existing code},
	isbn = {0-7695-2243-2},
	url = {https://doi.org/10.1109/WCRE.2004.33},
	doi = {10.1109/WCRE.2004.33},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Du Bois, B. and Demeyer, S. and Verelst, J.},
	year = {2004},
	pages = {144--151}
}

@inproceedings{tokuda_evolving_1999,
	title = {Evolving object-oriented designs with refactorings},
	isbn = {0-7695-0415-9},
	url = {https://doi.org/10.1109/ASE.1999.802203},
	doi = {10.1109/ASE.1999.802203},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Tokuda, L. and Batory, D.},
	year = {1999},
	pages = {174--181}
}

@article{demeyer_finding_2000,
	title = {Finding refactorings via change metrics},
	volume = {35},
	issn = {03621340},
	url = {https://doi.org/10.1145/354222.353183},
	doi = {10.1145/354222.353183},
	language = {en},
	number = {10},
	urldate = {2014-09-28},
	journal = {{ACM} {SIGPLAN} Notices},
	author = {Demeyer, Serge and Ducasse, Stéphane and Nierstrasz, Oscar},
	month = oct,
	year = {2000},
	pages = {166--177}
}

@inproceedings{geppert_refactoring_2005,
	title = {Refactoring for Changeability: A Way to Go?},
	isbn = {0-7695-2371-4},
	shorttitle = {Refactoring for Changeability},
	url = {https://doi.org/10.1109/METRICS.2005.40},
	doi = {10.1109/METRICS.2005.40},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Geppert, B. and Mockus, A. and Rossler, F.},
	year = {2005},
	pages = {13--13}
}

@inproceedings{zibran_conflict-aware_2011,
	title = {Conflict-Aware Optimal Scheduling of Code Clone Refactoring: A Constraint Programming Approach},
	isbn = {978-1-61284-308-7},
	shorttitle = {Conflict-Aware Optimal Scheduling of Code Clone Refactoring},
	url = {https://doi.org/10.1109/ICPC.2011.45},
	doi = {10.1109/ICPC.2011.45},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Zibran, Minhaz F. and Roy, Chanchal K.},
	month = jun,
	year = {2011},
	pages = {266--269}
}

@article{misbhauddin_uml_2013,
	title = {{UML} model refactoring: a systematic literature review},
	issn = {1382-3256, 1573-7616},
	shorttitle = {{UML} model refactoring},
	url = {http://link.springer.com/10.1007/s10664-013-9283-7},
	doi = {10.1007/s10664-013-9283-7},
	language = {en},
	urldate = {2014-09-28},
	journal = {Empirical Software Engineering},
	author = {Misbhauddin, Mohammed and Alshayeb, Mohammad},
	month = oct,
	year = {2013}
}

@article{christopoulou_automated_2012,
	title = {Automated refactoring to the Strategy design pattern},
	volume = {54},
	issn = {09505849},
	url = {https://doi.org/10.1016/j.infsof.2012.05.004},
	doi = {10.1016/j.infsof.2012.05.004},
	language = {en},
	number = {11},
	urldate = {2014-09-28},
	journal = {Information and Software Technology},
	author = {Christopoulou, Aikaterini and Giakoumakis, E.A. and Zafeiris, Vassilis E. and Soukara, Vasiliki},
	month = nov,
	year = {2012},
	pages = {1202--1214}
}

@article{bruneliere_modisco_2014,
	title = {{MoDisco}: A model driven reverse engineering framework},
	volume = {56},
	issn = {09505849},
	shorttitle = {{MoDisco}},
	url = {https://doi.org/10.1016/j.infsof.2014.04.007},
	doi = {10.1016/j.infsof.2014.04.007},
	language = {en},
	number = {8},
	urldate = {2014-09-28},
	journal = {Information and Software Technology},
	author = {Bruneli\`{e}re, Hugo and Cabot, Jordi and Dup\'{e}, Gr\'{e}goire and Madiot, Fr\'{e}d\'{e}ric},
	month = aug,
	year = {2014},
	pages = {1012--1032}
}

@article{al_dallal_identifying_2014,
	title = {Identifying refactoring opportunities in object-oriented code: A systematic literature review},
	issn = {09505849},
	shorttitle = {Identifying refactoring opportunities in object-oriented code},
	url = {https://doi.org/10.1016/j.infsof.2014.08.002},
	doi = {10.1016/j.infsof.2014.08.002},
	language = {en},
	urldate = {2014-09-28},
	journal = {Information and Software Technology},
	author = {Al Dallal, Jehad},
	month = aug,
	year = {2014}
}

@article{kolahdouz-rahimi_evaluation_2014,
	title = {Evaluation of model transformation approaches for model refactoring},
	volume = {85},
	issn = {01676423},
	url = {https://doi.org/10.1016/j.scico.2013.07.013},
	doi = {10.1016/j.scico.2013.07.013},
	language = {en},
	urldate = {2014-09-28},
	journal = {Science of Computer Programming},
	author = {Kolahdouz-Rahimi, S. and Lano, K. and Pillay, S. and Troya, J. and Van Gorp, P.},
	month = jun,
	year = {2014},
	pages = {5--40}
}

@article{france_metamodeling_2003,
	title = {A metamodeling approach to pattern-based model refactoring},
	volume = {20},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2003.1231152},
	doi = {10.1109/MS.2003.1231152},
	language = {en},
	number = {5},
	urldate = {2014-09-28},
	journal = {{IEEE} Software},
	author = {France, R. and Chosh, S. and Song, E. and Kim, D.K.},
	month = sep,
	year = {2003},
	pages = {52--58}
}

@article{okeeffe_search-based_2008-1,
	title = {Search-based refactoring: an empirical study},
	issn = {1532060X, 15320618},
	shorttitle = {Search-based refactoring},
	url = {http://doi.wiley.com/10.1002/smr.378},
	doi = {10.1002/smr.378},
	language = {en},
	urldate = {2014-09-28},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {O'Keeffe, Mark and \'{O} Cinn\'{e}ide, Mel},
	year = {2008},
}

@inproceedings{tsantalis_ranking_2011,
	title = {Ranking Refactoring Suggestions Based on Historical Volatility},
	isbn = {978-1-61284-259-2},
	url = {https://doi.org/10.1109/CSMR.2011.7},
	doi = {10.1109/CSMR.2011.7},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Tsantalis, Nikolaos and Chatzigeorgiou, Alexander},
	month = mar,
	year = {2011},
	pages = {25--34}
}

@inproceedings{perez_refactoring_2013,
	title = {Refactoring Planning for Design Smell Correction: Summary, Opportunities and Lessons Learned},
	isbn = {978-0-7695-4981-1},
	shorttitle = {Refactoring Planning for Design Smell Correction},
	url = {https://doi.org/10.1109/ICSM.2013.98},
	doi = {10.1109/ICSM.2013.98},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Perez, Javier},
	month = sep,
	year = {2013},
	pages = {572--577}
}

@inproceedings{molitorisz_pattern-based_2013,
	title = {Pattern-Based Refactoring Process of Sequential Source Code},
	isbn = {978-0-7695-4948-4, 978-1-4673-5833-0},
	url = {https://doi.org/10.1109/CSMR.2013.49},
	doi = {10.1109/CSMR.2013.49},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Molitorisz, Korbinian},
	month = mar,
	year = {2013},
	pages = {357--360}
}

@article{neill_paying_2006,
	title = {Paying Down Design Debt with Strategic Refactoring},
	volume = {39},
	issn = {0018-9162},
	url = {https://doi.org/10.1109/MC.2006.435},
	doi = {10.1109/MC.2006.435},
	abstract = {Our studies indicate that strategic refactoring using design patterns is the most effective way to repair decaying code for object-oriented ({OO}) systems. However, applying a pattern-based approach to legacy system repair or even post-design pattern injection is often difficult and, in some cases if misapplied, detrimental},
	number = {12},
	journal = {Computer},
	author = {Neill, C.J. and Laplante, P.A.},
	year = {2006},
	keywords = {Application software, Computer architecture, design pattern, Feedback, Java, legacy system, Microarchitecture, object-oriented programming, object-oriented system, Pattern analysis, pattern-based approach, Process design, software maintenance, software systems, Software technologies, Stability, strategic refactoring},
	pages = {131--134}
}

@inproceedings{cinneide_automated_2000,
	title = {Automated refactoring to introduce design patterns},
	isbn = {1-58113-206-9},
	url = {https://doi.org/10.1109/ICSE.2000.870480},
	doi = {10.1109/ICSE.2000.870480},
	urldate = {2014-09-28},
	publisher = {{ACM}},
	author = {\'{O} Cinn\'{e}ide, M.},
	year = {2000},
	pages = {722--724}
}

@book{fowler_refactoring:_1999,
	title = {Refactoring: Improving the Design of Existing Programs},
	publisher = {Addison-Weseley},
	author = {Fowler, Martin and Beck, Kent and Brant, J and Opdyke, William and Roberts, Don},
	year = {1999}
}

@book{kerievsky_refactoring_2005,
	title = {Refactoring to patterns},
	publisher = {Pearson Deutschland {GmbH}},
	author = {Kerievsky, Joshua},
	year = {2005}
}

@article{silva_jextract:_????,
	title = {{JExtract}: An Eclipse Plug-in for Recommending Automated Extract Method Refactorings},
	author = {Silva, Danilo and Terra, Ricardo and Valente, Marco T\'{u}lio}
}

@article{kumar_refactoring_????,
	title = {Refactoring Framework for Instance Code Smell Detection},
	author = {Kumar, D. Raj and Chanakya, G.M.}
}

@inproceedings{mkaouer_recommendation_2014,
	title = {Recommendation system for software refactoring using innovization and interactive dynamic optimization},
	isbn = {9781450330138},
	url = {https://doi.org/10.1145/2642937.2642965},
	doi = {10.1145/2642937.2642965},
	language = {en},
	urldate = {2014-10-13},
	publisher = {{ACM} Press},
	author = {Mkaouer, Mohamed Wiem and Kessentini, Marouane and Bechikh, Slim and Deb, Kalyanmoy and \'{O} Cinn\'{e}ide, Mel},
	year = {2014},
	pages = {331--336}
}

@article{pauli_searching_????,
	title = {Searching for Refactoring Opportunities to apply the Strategy Pattern},
	author = {Pauli, Guinther de B and Piveta, Eduardo K}
}

@article{wang_clear:_2014,
	title = {{CLEAR}: Class Level Software Refactoring Using Evolutionary Algorithms},
	volume = {0},
	issn = {2191-026X, 0334-1860},
	shorttitle = {{CLEAR}},
	url = {https://doi.org/10.1515/jisys-2013-0058},
	doi = {10.1515/jisys-2013-0058},
	number = {0},
	urldate = {2014-10-13},
	journal = {Journal of Intelligent Systems},
	author = {Wang, Muchou and Pan, Weifeng and Jiang, Bo and Yuan, Chenxiang},
	month = jan,
	year = {2014}
}

@incollection{avgeriou_recommending_2014,
	address = {Cham},
	title = {Recommending Refactorings to Re-establish Architectural Consistency},
	volume = {8627},
	isbn = {978-3-319-09969-9, 978-3-319-09970-5},
	url = {http://link.springer.com/10.1007/978-3-319-09970-5_33},
	urldate = {2014-10-13},
	booktitle = {Software Architecture},
	publisher = {Springer International Publishing},
	author = {Herold, Sebastian and Mair, Matthias},
	editor = {Avgeriou, Paris and Zdun, Uwe},
	year = {2014},
	pages = {390--397}
}

@inproceedings{bavota_recommending_2014,
	title = {Recommending refactorings based on team co-maintenance patterns},
	isbn = {9781450330138},
	url = {https://doi.org/10.1145/2642937.2642948},
	doi = {10.1145/2642937.2642948},
	language = {en},
	urldate = {2014-10-13},
	publisher = {{ACM} Press},
	author = {Bavota, Gabriele and Panichella, Sebastiano and Tsantalis, Nikolaos and Di Penta, Massimiliano and Oliveto, Rocco and Canfora, Gerardo},
	year = {2014},
	pages = {337--342}
}

@incollection{le_goues_robust_2014,
	address = {Cham},
	title = {A Robust Multi-objective Approach for Software Refactoring under Uncertainty},
	volume = {8636},
	isbn = {978-3-319-09939-2, 978-3-319-09940-8},
	url = {http://link.springer.com/10.1007/978-3-319-09940-8_12},
	urldate = {2014-10-13},
	booktitle = {Search-Based Software Engineering},
	publisher = {Springer International Publishing},
	author = {Mkaouer, Mohamed Wiem and Kessentini, Marouane and Bechikh, Slim and \'{O} Cinn\'{e}ide, Mel},
	editor = {Le Goues, Claire and Yoo, Shin},
	year = {2014},
	pages = {168--183}
}

@incollection{le_goues_use_2014,
	address = {Cham},
	title = {On the Use of Machine Learning and Search-Based Software Engineering for Ill-Defined Fitness Function: A Case Study on Software Refactoring},
	volume = {8636},
	isbn = {978-3-319-09939-2, 978-3-319-09940-8},
	shorttitle = {On the Use of Machine Learning and Search-Based Software Engineering for Ill-Defined Fitness Function},
	url = {http://link.springer.com/10.1007/978-3-319-09940-8_3},
	urldate = {2014-10-13},
	booktitle = {Search-Based Software Engineering},
	publisher = {Springer International Publishing},
	author = {Amal, Boukhdhir and Kessentini, Marouane and Bechikh, Slim and Dea, Josselin and Said, Lamjed Ben},
	editor = {Le Goues, Claire and Yoo, Shin},
	year = {2014},
	pages = {31--45}
}

@incollection{van_der_aalst_are_2014,
	address = {Cham},
	title = {Are Refactoring Practices Related to Clusters in Java Software?},
	volume = {179},
	isbn = {978-3-319-06861-9, 978-3-319-06862-6},
	url = {http://link.springer.com/10.1007/978-3-319-06862-6_20},
	urldate = {2014-10-13},
	booktitle = {Agile Processes in Software Engineering and Extreme Programming},
	publisher = {Springer International Publishing},
	author = {Concas, Giulio and Monni, Cristina and Orrù, Matteo and Tonelli, Roberto},
	editor = {van der Aalst, Wil and Mylopoulos, John and Rosemann, Michael and Shaw, Michael J. and Szyperski, Clemens and Cantone, Giovanni and Marchesi, Michele},
	year = {2014},
	pages = {269--276}
}

@inproceedings{chen_refactoring_2014,
	title = {Refactoring planning and practice in agile software development: an empirical study},
	isbn = {9781450327541},
	shorttitle = {Refactoring planning and practice in agile software development},
	url = {https://doi.org/10.1145/2600821.2600829},
	doi = {10.1145/2600821.2600829},
	language = {en},
	urldate = {2014-10-13},
	publisher = {{ACM} Press},
	author = {Chen, Jie and Xiao, Junchao and Wang, Qing and Osterweil, Leon J. and Li, Mingshu},
	year = {2014},
	pages = {55--64}
}

@incollection{robillard_recommending_2014,
	address = {Berlin, Heidelberg},
	title = {Recommending Refactoring Operations in Large Software Systems},
	isbn = {978-3-642-45134-8, 978-3-642-45135-5},
	url = {http://link.springer.com/10.1007/978-3-642-45135-5_15},
	language = {en},
	urldate = {2014-10-13},
	booktitle = {Recommendation Systems in Software Engineering},
	publisher = {Springer Berlin Heidelberg},
	author = {Bavota, Gabriele and De Lucia, Andrea and Marcus, Andrian and Oliveto, Rocco},
	editor = {Robillard, Martin P. and Maalej, Walid and Walker, Robert J. and Zimmermann, Thomas},
	year = {2014},
	pages = {387--419}
}

@article{hochstein_combating_2005,
	title = {Combating architectural degeneration: a survey},
	volume = {47},
	issn = {0950-5849},
	url = {https://doi.org/10.1016/j.infsof.2004.11.005},
	doi = {10.1016/j.infsof.2004.11.005},
	abstract = {As software systems evolve over time, they invariably undergo changes that can lead to a degeneration of the architecture. Left unchecked, degeneration may reach a level where a complete redesign is necessary, a task that requires significant effort. In this paper, we present a survey of technologies developed by researchers that can be used to combat degeneration, that is, technologies that can be employed in identifying, treating and researching degeneration. We also discuss the various causes of degeneration and how it can be prevented.},
	number = {10},
	journal = {Information and Software Technology},
	author = {Hochstein, Lorin and Lindvall, Mikael},
	year = {2005},
	keywords = {architecture, Software},
	pages = {643--656}
}

@article{lehman_feedback_1996,
	title = {Feedback in the software evolution process},
	volume = {38},
	issn = {0950-5849},
	url = {https://doi.org/10.1016/0950-5849(96)01121-4},
	doi = {10.1016/0950-5849(96)01121-4},
	abstract = {Despite major advances in programming methodology, industry still faces major problems in developing and maintaining E-type software â€” software that implements computer applications in the real world. The paper suggests that a possible constraint on software process improvement arises from the fact that the global software process that includes technical, business, marketing, user and other activities constitutes a multi-loop, multi-level feedback system. To change the characteristics of such a system requires one to consider, design or adapt and tune both forward and feedback paths to achieve the desired changes in externally visible behaviour. It should, therefore, not come as a surprise that the overall improvements achieved fall far below expectations. After all, current world-wide process models and improvement activities focus primarily on the forward technical path and overlook the many feedback paths and the constraints that they impose on improvement of the project. A recently launched project, {FEAST}, based on a hypothesis by the same name, will investigate these observations and their consequences on the basis of an international collaborative investigation.},
	number = {11},
	journal = {Information and Software Technology},
	author = {Lehman, M.M.},
	year = {1996},
	keywords = {process, Software},
	pages = {681--686}
}

@inproceedings{dagenais_recommending_2008,
	title = {Recommending adaptive changes for framework evolution},
	isbn = {9781605580791},
	url = {https://doi.org/10.1145/1368088.1368154},
	doi = {10.1145/1368088.1368154},
	language = {en},
	urldate = {2014-09-27},
	publisher = {{ACM} Press},
	author = {Dagenais, Barth\'{e}l\'{e}my and Robillard, Martin P.},
	year = {2008},
	pages = {481}
}

@inproceedings{o_cinneide_experimental_2012,
	title = {Experimental assessment of software metrics using automated refactoring},
	isbn = {9781450310567},
	url = {https://doi.org/10.1145/2372251.2372260},
	doi = {10.1145/2372251.2372260},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {\'{O} Cinn\'{e}ide, Mel and Tratt, Laurence and Harman, Mark and Counsell, Steve and Hemati Moghadam, Iman},
	year = {2012},
	pages = {49}
}

@article{dig_how_2006,
	title = {How do {APIs} evolve? A story of refactoring},
	volume = {18},
	issn = {1532-060X, 1532-0618},
	shorttitle = {How do {APIs} evolve?},
	url = {http://doi.wiley.com/10.1002/smr.328},
	doi = {10.1002/smr.328},
	language = {en},
	number = {2},
	urldate = {2014-09-28},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {Dig, Danny and Johnson, Ralph},
	month = mar,
	year = {2006},
	pages = {83--107}
}

@inproceedings{gomes_extraction_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {An extraction method to collect data on defects and effort evolution in a constantly modified system},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985369},
	doi = {10.1145/1985362.1985369},
	abstract = {This paper describes a data extraction method that was carried out on a set of historical development documentation, related to a commercial software system for mobile platform. This method is part of a major project, which aims to identify evidences of technical debt via the analysis of the defect evolution and effort estimation deviation, verifying if there are relations between these concepts and project decisions during the cycles of development. We intend that a future analysis of such data supports the identification of patterns regarding specific decisions and variations of the defect number/frequency and effort deviation. Thus, such patterns could assist project managers during future project decisions, mainly regarding the maintenance and evolution stages.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Gomes, Rebeka and Siebra, Clauirton and Tonin, Graziela and Cavalcanti, Antonio and da Silva, Fabio Q.B. and Santos, Andre L.M. and Marques, Rafael},
	year = {2011},
	keywords = {decision making, effort estimation, evolution of defects},
	pages = {27--30}
}

@article{raja_modeling_2009,
	title = {Modeling software evolution defects: a time series approach},
	volume = {21},
	issn = {1532060X, 15320618},
	shorttitle = {Modeling software evolution defects},
	url = {http://doi.wiley.com/10.1002/smr.398},
	doi = {10.1002/smr.398},
	language = {en},
	number = {1},
	urldate = {2014-09-28},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {Raja, Uzma and Hale, David P. and Hale, Joanne E.},
	month = jan,
	year = {2009},
	pages = {49--71}
}

@inproceedings{kirbas_effect_2014,
	title = {The effect of evolutionary coupling on software defects: an industrial case study on a legacy system},
	isbn = {9781450327749},
	shorttitle = {The effect of evolutionary coupling on software defects},
	url = {https://doi.org/10.1145/2652524.2652577},
	doi = {10.1145/2652524.2652577},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Kirbas, Serkan and Sen, Alper and Caglayan, Bora and Bener, Ayse and Mahmutogullari, Rasim},
	year = {2014},
	pages = {1--7}
}

@inproceedings{rossi_evolution_2014,
	title = {Evolution of design patterns: a replication study},
	isbn = {9781450327749},
	shorttitle = {Evolution of design patterns},
	url = {https://doi.org/10.1145/2652524.2652563},
	doi = {10.1145/2652524.2652563},
	language = {en},
	urldate = {2014-09-28},
	publisher = {{ACM} Press},
	author = {Rossi, Bruno and Russo, Barbara},
	year = {2014},
	pages = {1--4}
}

@incollection{milev_design_2009,
	series = {{IFIP} Advances in Information and Communication Technology},
	title = {Design Evolution of an Open Source Project Using an Improved Modularity Metric},
	volume = {299},
	isbn = {978-3-642-02031-5},
	url = {http://dx.doi.org/10.1007/978-3-642-02032-2_4},
	booktitle = {Open Source Ecosystems: Diverse Communities Interacting},
	publisher = {Springer Berlin Heidelberg},
	author = {Milev, Roberto and Muegge, Steven and Weiss, Michael},
	editor = {Boldyreff, Cornelia and Crowston, Kevin and Lundell, Bj{\"o}rn and Wasserman, Anthony I.},
	year = {2009},
	pages = {20--33}
}

@inproceedings{gustafsson_architecture-centric_2002,
	title = {Architecture-centric software evolution by software metrics and design patterns},
	isbn = {0-7695-1438-3},
	url = {https://doi.org/10.1109/CSMR.2002.995795},
	doi = {10.1109/CSMR.2002.995795},
	urldate = {2014-09-28},
	publisher = {{IEEE} Comput. Soc},
	author = {Gustafsson, J. and Paakki, J. and Nenonen, L. and Verkamo, A.I.},
	year = {2002},
	pages = {108--115}
}

@inproceedings{lehman_metrics_1997,
	title = {Metrics and laws of software evolution-the nineties view},
	url = {https://doi.org/10.1109/METRIC.1997.637156},
	doi = {10.1109/METRIC.1997.637156},
	abstract = {The process of E-type software development and evolution has proven most difficult to improve, possibly due to the fact that the process is a multi-input, multi-output system involving feedback at many levels. This observation, first recorded in the early 1970s during an extended study of {OS}/360 evolution, was recently captured in a {FEAST} (Feedback, Evolution And Software Technology) hypothesis: a hypothesis being studied in on-going two-year project, {FEAST}/1. Preliminary conclusions based on a study of a financial transaction system-Logica's Fastwire ({FW})-are outlined and compared with those reached during the earlier {OS}/360 study. The new analysis supports, or better does not contradict, the laws of software evolution, suggesting that the 1970s approach to metric analysis of software evolution is still relevant today. It is hoped that {FEAST}/1 will provide a foundation for mastering the feedback aspects of the software evolution process, opening up new paths for process modelling and improvement},
	booktitle = {Software Metrics Symposium, 1997. Proceedings., Fourth International},
	author = {Lehman, M.M. and Ramil, J.F. and Wernick, P. D. and Perry, D.E. and Turski, W.M.},
	year = {1997},
	keywords = {Chaos, Data analysis, Dynamic programming, Educational institutions, E-type software development, {FEAST}/1 project, Feedback, financial data processing, {FW} financial transaction system, genetic programming, Informatics, Lehman's laws, Logica Fastwire, multi-input, multi-output system, Negative feedback, {OS}/360, project management, software evolution, software maintenance, software metrics, software process dynamics, software process improvement, software process modelling, software technology, transaction processing, Uniform resource locators, World Wide Web},
	pages = {20--32}
}

@inproceedings{sartipi_multi-view_2007,
	title = {A Multi-view Toolkit to Assist Software Integration and Evolution},
	isbn = {0-7695-2802-3},
	url = {https://doi.org/10.1109/CSMR.2007.8},
	doi = {10.1109/CSMR.2007.8},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Sartipi, Kamran},
	year = {2007},
	pages = {337--338}
}

@inproceedings{goulao_software_2012,
	title = {Software Evolution Prediction Using Seasonal Time Analysis: A Comparative Study},
	isbn = {978-0-7695-4666-7, 978-1-4673-0984-4},
	shorttitle = {Software Evolution Prediction Using Seasonal Time Analysis},
	url = {https://doi.org/10.1109/CSMR.2012.30},
	doi = {10.1109/CSMR.2012.30},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Goul\~{a}o, Miguel and Fonte, Nelson and Wermelinger, Michel and Brito e Abreu, Fernando},
	month = mar,
	year = {2012},
	pages = {213--222}
}

@article{ernst_dynamically_2001,
	title = {Dynamically discovering likely program invariants to support program evolution},
	volume = {27},
	issn = {00985589},
	url = {https://doi.org/10.1109/32.908957},
	doi = {10.1109/32.908957},
	number = {2},
	urldate = {2014-09-28},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Ernst, M.D. and Cockrell, J. and Griswold, W.G. and Notkin, D.},
	month = feb,
	year = {2001},
	pages = {99--123}
}

@inproceedings{mens_declarative_2001,
	title = {A declarative evolution framework for object-oriented design patterns},
	isbn = {0-7695-1189-9},
	url = {https://doi.org/10.1109/ICSM.2001.972774},
	doi = {10.1109/ICSM.2001.972774},
	urldate = {2014-09-29},
	publisher = {{IEEE} Comput. Soc},
	author = {Mens, T. and Tourwe, T.},
	year = {2001},
	pages = {570--579}
}

@inproceedings{land_software_2002,
	title = {Software Deterioration And Maintainability–A Model Proposal},
	booktitle = {Proceedings of Second Conference on Software Engineering Research and Practise in Sweden ({SERPS})},
	author = {Land, Rikard},
	year = {2002}
}

@inproceedings{brennan_adaptability_2010,
	title = {Adaptability performance trade-off: a controlled experiment},
	isbn = {9781450300391},
	shorttitle = {Adaptability performance trade-off},
	url = {https://doi.org/10.1145/1852786.1852857},
	doi = {10.1145/1852786.1852857},
	language = {en},
	urldate = {2014-09-29},
	publisher = {{ACM} Press},
	author = {Brennan, Adam and Greer, Des and McDaid, Kevin},
	year = {2010},
	pages = {1}
}

@inproceedings{aversano_empirical_2007,
	title = {An empirical study on the evolution of design patterns},
	isbn = {9781595938114},
	url = {https://doi.org/10.1145/1287624.1287680},
	doi = {10.1145/1287624.1287680},
	language = {en},
	urldate = {2014-09-29},
	publisher = {{ACM} Press},
	author = {Aversano, Lerina and Canfora, Gerardo and Cerulo, Luigi and Del Grosso, Concettina and Di Penta, Massimiliano},
	year = {2007},
	pages = {385}
}

@article{fontana_design_2013,
	title = {Design patterns: a survey on their micro-structures: Design Patterns: A Survey on Their Micro-Structures},
	volume = {25},
	issn = {20477473},
	shorttitle = {Design patterns},
	url = {http://doi.wiley.com/10.1002/smr.547},
	doi = {10.1002/smr.547},
	language = {en},
	number = {1},
	urldate = {2014-09-29},
	journal = {Journal of Software: Evolution and Process},
	author = {Fontana, Francesca Arcelli and Maggioni, Stefano and Raibulet, Claudia},
	month = jan,
	year = {2013},
	pages = {27--52}
}

@article{mal_coupling_2014,
	title = {Coupling Metric for Understandability and Modifiability of a Package in Object-Oriented Design},
	author = {Mal, Sandip and Rajnish, Kumar},
	year = {2014}
}

@incollection{lehman_laws_1996,
	series = {Lecture Notes in Computer Science},
	title = {Laws of software evolution revisited},
	volume = {1149},
	isbn = {978-3-540-61771-6},
	url = {http://dx.doi.org/10.1007/BFb0017737},
	booktitle = {Software Process Technology},
	publisher = {Springer Berlin Heidelberg},
	author = {Lehman, M.M.},
	editor = {Montangero, Carlo},
	year = {1996},
	pages = {108--124}
}

@inproceedings{rajlich_software_2014,
	title = {Software evolution and maintenance},
	isbn = {9781450328654},
	url = {https://doi.org/10.1145/2593882.2593893},
	doi = {10.1145/2593882.2593893},
	language = {en},
	urldate = {2014-10-13},
	publisher = {{ACM} Press},
	author = {Rajlich, Václav},
	year = {2014},
	pages = {133--144}
}

@article{kendall_new_1938,
	title = {A New Measure of Rank Correlation},
	volume = {30},
	issn = {00063444},
	url = {https://doi.org/10.2307/2332226},
	doi = {10.2307/2332226},
	number = {1/2},
	urldate = {2014-06-25},
	journal = {Biometrika},
	author = {Kendall, M. G.},
	month = jun,
	year = {1938},
	pages = {81}
}

@article{steel_multiple_1959,
	title = {A Multiple Comparison Sign Test: Treatments Versus Control},
	volume = {54},
	issn = {01621459},
	shorttitle = {A Multiple Comparison Sign Test},
	url = {https://doi.org/10.2307/2282500},
	doi = {10.2307/2282500},
	number = {288},
	urldate = {2014-12-01},
	journal = {Journal of the American Statistical Association},
	author = {Steel, Robert G. D.},
	month = dec,
	year = {1959},
	pages = {767}
}

@article{dunnett_multiple_1955,
	title = {A Multiple Comparison Procedure for Comparing Several Treatments with a Control},
	volume = {50},
	issn = {0162-1459, 1537-274X},
	url = {https://doi.org/10.1080/01621459.1955.10501294},
	doi = {10.1080/01621459.1955.10501294},
	language = {en},
	number = {272},
	urldate = {2014-10-29},
	journal = {Journal of the American Statistical Association},
	author = {Dunnett, Charles W.},
	month = dec,
	year = {1955},
	pages = {1096--1121}
}

@article{steel_multiple_1959-1,
	title = {A Multiple Comparison Rank Sum Test: Treatments versus Control},
	volume = {15},
	issn = {0006341X},
	shorttitle = {A Multiple Comparison Rank Sum Test},
	url = {https://doi.org/10.2307/2527654},
	doi = {10.2307/2527654},
	number = {4},
	urldate = {2014-10-29},
	journal = {Biometrics},
	author = {Steel, Robert G.D.},
	month = dec,
	year = {1959},
	pages = {560}
}

@article{lilliefors_kolmogorov-smirnov_1967,
	title = {On the Kolmogorov-Smirnov Test for Normality with Mean and Variance Unknown},
	volume = {62},
	issn = {0162-1459, 1537-274X},
	url = {https://doi.org/10.1080/01621459.1967.10482916},
	doi = {10.1080/01621459.1967.10482916},
	language = {en},
	number = {318},
	urldate = {2014-10-29},
	journal = {Journal of the American Statistical Association},
	author = {Lilliefors, Hubert W.},
	month = jun,
	year = {1967},
	pages = {399--402}
}

@article{shapiro_analysis_1965,
	title = {An Analysis of Variance Test for Normality (Complete Samples)},
	volume = {52},
	issn = {00063444},
	url = {https://doi.org/10.2307/2333709},
	doi = {10.2307/2333709},
	number = {3/4},
	urldate = {2014-10-29},
	journal = {Biometrika},
	author = {Shapiro, S. S. and Wilk, M. B.},
	month = dec,
	year = {1965},
	pages = {591}
}

@article{levene_robust_1960,
	title = {Robust tests for equality of variances1},
	volume = {2},
	journal = {Contributions to probability and statistics: Essays in honor of Harold Hotelling},
	author = {Levene, Howard},
	year = {1960},
	pages = {278--292}
}

@article{egan_signal_1975,
	title = {Signal detection theory and {ROC} analysis},
	journal = {Series in Cognition and Perception},
	author = {Egan, James P},
	year = {1975}
}

@article{mann_test_1947,
	title = {On a Test of Whether one of Two Random Variables is Stochastically Larger than the Other},
	volume = {18},
	copyright = {Copyright \textcopyright\ 1947 Institute of Mathematical Statistics},
	issn = {00034851},
	url = {https://doi.org/10.1007/978-3-642-02032-2_4},
	doi = {10.1007/978-3-642-02032-2_4},
	abstract = {Let x and y be two random variables with continuous cumulative distribution functions f and g. A statistic U depending on the relative ranks of the x's and y's is proposed for testing the hypothesis f = g. Wilcoxon proposed an equivalent test in the Biometrics Bulletin, December, 1945, but gave only a few points of the distribution of his statistic. Under the hypothesis f = g the probability of obtaining a given U in a sample of n x's and m y's is the solution of a certain recurrence relation involving n and m. Using this recurrence relation tables have been computed giving the probability of U for samples up to n = m = 8. At this point the distribution is almost normal. From the recurrence relation explicit expressions for the mean, variance, and fourth moment are obtained. The 2rth moment is shown to have a certain form which enabled us to prove that the limit distribution is normal if m, n go to infinity in any arbitrary manner. The test is shown to be consistent with respect to the class of alternatives \$f(x) {\textgreater} g(x)\$ for every x.},
	language = {English},
	number = {1},
	journal = {The Annals of Mathematical Statistics},
	author = {Mann, H. B. and Whitney, D. R.},
	year = {1947},
	pages = {50--60}
}

@article{box_analysis_1964,
	title = {An Analysis of Transformations},
	volume = {26},
	copyright = {Copyright \textcopyright\ 1964 Royal Statistical Society},
	issn = {00359246},
	url = {https://doi.org/10.1007/978-3-642-02032-2_4},
	doi = {10.1007/978-3-642-02032-2_4},
	abstract = {In the analysis of data it is often assumed that observations y$_{\textrm{1}}$, y$_{\textrm{2}}$, ..., y$_{\textrm{n}}$ are independently normally distributed with constant variance and with expectations specified by a model linear in a set of parameters θ. In this paper we make the less restrictive assumption that such a normal, homoscedastic, linear model is appropriate after some suitable transformation has been applied to the y's. Inferences about the transformation and about the parameters of the linear model are made by computing the likelihood function and the relevant posterior distribution. The contributions of normality, homoscedasticity and additivity to the transformation are separated. The relation of the present methods to earlier procedures for finding transformations is discussed. The methods are illustrated with examples.},
	language = {English},
	number = {2},
	journal = {Journal of the Royal Statistical Society. Series B (Methodological)},
	author = {Box, G. E. P. and Cox, D. R.},
	year = {1964},
	pages = {211--252}
}

@article{wilcoxon_individual_1945,
	title = {Individual Comparisons by Ranking Methods},
	volume = {1},
	issn = {00994987},
	url = {https://doi.org/10.2307/3001968},
	doi = {10.2307/3001968},
	number = {6},
	urldate = {2014-11-11},
	journal = {Biometrics Bulletin},
	author = {Wilcoxon, Frank},
	month = dec,
	year = {1945},
	pages = {80}
}

@article{massey_kolmogorov-smirnov_1951,
	title = {The Kolmogorov-Smirnov Test for Goodness of Fit},
	volume = {46},
	issn = {01621459},
	url = {https://doi.org/10.2307/2280095},
	doi = {10.2307/2280095},
	number = {253},
	urldate = {2014-11-11},
	journal = {Journal of the American Statistical Association},
	author = {Massey, Frank J.},
	month = mar,
	year = {1951},
	pages = {68}
}

@article{anderson_distribution_1962,
	title = {On the Distribution of the Two-Sample Cramer-von Mises Criterion},
	volume = {33},
	issn = {0003-4851},
	url = {https://doi.org/10.1214/aoms/1177704477},
	doi = {10.1214/aoms/1177704477},
	language = {en},
	number = {3},
	urldate = {2014-11-11},
	journal = {The Annals of Mathematical Statistics},
	author = {Anderson, T. W.},
	month = sep,
	year = {1962},
	pages = {1148--1159}
}

@article{siegel_nonparametric_1960,
	title = {A Nonparametric Sum of Ranks Procedure for Relative Spread in Unpaired Samples},
	volume = {55},
	issn = {0162-1459, 1537-274X},
	url = {https://doi.org/10.1080/01621459.1960.10482073},
	doi = {10.1080/01621459.1960.10482073},
	language = {en},
	number = {291},
	urldate = {2014-11-11},
	journal = {Journal of the American Statistical Association},
	author = {Siegel, Sidney and Tukey, John W.},
	month = sep,
	year = {1960},
	pages = {429--445}
}

@article{spearman_proof_1904,
	title = {The Proof and Measurement of Association between Two Things},
	volume = {15},
	issn = {00029556},
	url = {https://doi.org/10.2307/1412159},
	doi = {10.2307/1412159},
	number = {1},
	urldate = {2014-11-11},
	journal = {The American Journal of Psychology},
	author = {Spearman, C.},
	month = jan,
	year = {1904},
	pages = {72}
}

@article{box_general_1949,
	title = {A General Distribution Theory for a Class of Likelihood Criteria},
	volume = {36},
	issn = {00063444},
	url = {https://doi.org/10.2307/2332671},
	doi = {10.2307/2332671},
	number = {3/4},
	urldate = {2014-11-11},
	journal = {Biometrika},
	author = {Box, G. E. P.},
	month = dec,
	year = {1949},
	pages = {317}
}

@article{steel_rank_1960,
	title = {A Rank Sum Test for Comparing All Pairs of Treatments},
	volume = {2},
	issn = {0040-1706, 1537-2723},
	url = {https://doi.org/10.1080/00401706.1960.10489894},
	doi = {10.1080/00401706.1960.10489894},
	language = {en},
	number = {2},
	urldate = {2014-11-11},
	journal = {Technometrics},
	author = {Steel, Robert G. D.},
	month = may,
	year = {1960},
	pages = {197--207}
}

@article{douglas_distribution-free_1991,
	title = {On distribution-free multiple comparisons in the one-way analysis of variance},
	volume = {20},
	issn = {0361-0926, 1532-415X},
	url = {https://doi.org/10.1080/03610929108830487},
	doi = {10.1080/03610929108830487},
	language = {en},
	number = {1},
	urldate = {2014-11-11},
	journal = {Communications in Statistics - Theory and Methods},
	author = {Douglas, Critchlow E. and Michael, Fligner A.},
	month = jan,
	year = {1991},
	pages = {127--139}
}

@article{dwass_k-sample_1960,
	title = {Some k-sample rank-order tests},
	journal = {Contributions to probability and statistics},
	author = {Dwass, Meyer},
	year = {1960},
	pages = {198--202}
}

@article{jonckheere_test_1954,
	title = {A {TEST} {OF} {SIGNIFICANCE} {FOR} {THE} {RELATION} {BETWEEN} m {RANKINGS} {AND} k {RANKED} {CATEGORIES}},
	volume = {7},
	issn = {0950561X},
	url = {http://doi.wiley.com/10.1111/j.2044-8317.1954.tb00148.x},
	doi = {10.1111/j.2044-8317.1954.tb00148.x},
	language = {en},
	number = {2},
	urldate = {2014-11-11},
	journal = {British Journal of Statistical Psychology},
	author = {Jonckheere, A. R.},
	month = nov,
	year = {1954},
	pages = {93--100}
}

@article{anderson_test_1954,
	title = {A Test of Goodness of Fit},
	volume = {49},
	issn = {01621459},
	url = {https://doi.org/10.2307/2281537},
	doi = {10.2307/2281537},
	number = {268},
	urldate = {2014-11-11},
	journal = {Journal of the American Statistical Association},
	author = {Anderson, T. W. and Darling, D. A.},
	month = dec,
	year = {1954},
	pages = {765}
}

@article{brown_robust_1974,
	title = {Robust Tests for the Equality of Variances},
	volume = {69},
	issn = {0162-1459, 1537-274X},
	url = {https://doi.org/10.1080/01621459.1974.10482955},
	doi = {10.1080/01621459.1974.10482955},
	language = {en},
	number = {346},
	urldate = {2014-11-11},
	journal = {Journal of the American Statistical Association},
	author = {Brown, Morton B. and Forsythe, Alan B.},
	month = jun,
	year = {1974},
	pages = {364--367}
}

@article{ansari_rank-sum_1960,
	title = {Rank-Sum Tests for Dispersions},
	volume = {31},
	issn = {0003-4851},
	url = {https://doi.org/10.1214/aoms/1177705688},
	doi = {10.1214/aoms/1177705688},
	language = {en},
	number = {4},
	urldate = {2014-11-11},
	journal = {The Annals of Mathematical Statistics},
	author = {Ansari, A. R. and Bradley, R. A.},
	month = dec,
	year = {1960},
	pages = {1174--1189}
}

@article{clopper_use_1934,
	title = {{THE} {USE} {OF} {CONFIDENCE} {OR} {FIDUCIAL} {LIMITS} {ILLUSTRATED} {IN} {THE} {CASE} {OF} {THE} {BINOMIAL}},
	volume = {26},
	issn = {0006-3444, 1464-3510},
	url = {https://doi.org/10.1093/biomet/26.4.404},
	doi = {10.1093/biomet/26.4.404},
	language = {en},
	number = {4},
	urldate = {2014-11-11},
	journal = {Biometrika},
	author = {Clopper, C. J. and Pearson, E. S.},
	year = {1934},
	pages = {404--413}
}

@book{montgomery_design_2013,
	address = {Hoboken, {NJ}},
	edition = {Eighth edition},
	title = {Design and analysis of experiments},
	isbn = {9781118146927},
	publisher = {John Wiley \& Sons, Inc},
	author = {Montgomery, Douglas C.},
	year = {2013},
	keywords = {Experimental design, {TECHNOLOGY} \& {ENGINEERING} / Industrial Engineering}
}

@article{rhyne_tables_1965,
	title = {Tables for a Treatments versus Control Multiple Comparisons Sign Test},
	volume = {7},
	issn = {00401706},
	url = {https://doi.org/10.2307/1266590},
	doi = {10.2307/1266590},
	number = {3},
	urldate = {2014-12-01},
	journal = {Technometrics},
	author = {Rhyne, A. L. and Steel, R. G. D.},
	month = aug,
	year = {1965},
	pages = {293}
}

@inproceedings{brown_managing_2010,
	address = {Santa Fe, New Mexico, {USA}},
	series = {{FoSER} '10},
	title = {Managing technical debt in software-reliant systems},
	isbn = {978-1-4503-0427-6},
	url = {http://doi.acm.org/10.1145/1882362.1882373},
	doi = {10.1145/1882362.1882373},
	abstract = {Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a "debt": on which "interest" has to be paid and which the "principal" should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.},
	booktitle = {Proceedings of the {FSE}/{SDP} workshop on Future of software engineering research},
	publisher = {{ACM}},
	author = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and Sangwan, Raghvinder and Seaman, Carolyn and Sullivan, Kevin and Zazworka, Nico},
	year = {2010},
	keywords = {cost-benefit analysis, design decision trade-off, large-scale system development, software metrics, technical debt},
	pages = {47--52}
}

@book{stevens_applied_2009,
	address = {New York},
	edition = {5th ed},
	title = {Applied multivariate statistics for the social sciences},
	isbn = {978-0-8058-5901-0 978-0-8058-5903-4},
	publisher = {Routledge},
	author = {Stevens, James},
	year = {2009},
	keywords = {Multivariate analysis, Social sciences, Statistical methods},
}

@book{cryer_time_2008,
	address = {New York},
	edition = {2nd ed},
	series = {Springer texts in statistics},
	title = {Time series analysis: with applications in {R}},
	isbn = {978-0-387-75958-6 978-0-387-75959-3},
	shorttitle = {Time series analysis},
	publisher = {Springer},
	author = {Cryer, Jonathan D. and Chan, Kung-sik},
	year = {2008},
	keywords = {Data processing, R (Computer program language), Time-series analysis},
}

@book{fisher_statistical_1970,
	address = {Edinburgh},
	edition = {14th ed., revised and enlarged},
	title = {Statistical methods for research workers},
	isbn = {978-0-05-002170-5},
	publisher = {Oliver and Boyd},
	author = {Fisher, Ronald Aylmer},
	year = {1970},
	keywords = {Biometry, Statistics},
}

@article{tukey_comparing_1949,
	title = {Comparing {Individual} {Means} in the {Analysis} of {Variance}},
	volume = {5},
	issn = {0006341X},
	url = {https://doi.org/10.2307/3001913},
	doi = {10.2307/3001913},
	number = {2},
	urldate = {2015-09-18},
	journal = {Biometrics},
	author = {Tukey, John W.},
	month = jun,
	year = {1949},
	pages = {99},
}

@inproceedings{curtis_estimating_2012,
	title = {Estimating the size, cost, and types of Technical Debt},
	url = {https://doi.org/10.1109/MTD.2012.6226000},
	doi = {10.1109/MTD.2012.6226000},
	abstract = {This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Curtis, B. and Sappidi, J. and Szynkarski, A.},
	month = jun,
	year = {2012},
	pages = {49 --53}
}

@article{eisenberg_threshold_2012,
	title = {A threshold based approach to technical debt},
	volume = {37},
	issn = {0163-5948},
	url = {http://doi.acm.org/10.1145/2108144.2108151},
	doi = {10.1145/2108144.2108151},
	abstract = {Nearly two decades ago, Ward Cunningham introduced us to the term "technical debt" as a means of describing the long term costs associated with a suboptimal software design and implementation. For most programs, especially those with a large legacy code baseline, achieving zero absolute debt is an unnecessary and unrealistic goal. It is important to recall that a primary reason for managing and eliminating debt is to drive down maintenance costs and to reduce defects. A sufficiently low, manageable level of debt can minimize the long-term impact, i.e., "low debt interest payments". In this article, we define an approach for establishing program specific thresholds to define manageable levels of technical debt.},
	number = {2},
	journal = {{SIGSOFT} Softw. Eng. Notes},
	author = {Eisenberg, Robert J.},
	month = apr,
	year = {2012},
	keywords = {cost estimation, risk management, software quality, technical debt},
	pages = {1--6}
}

@inproceedings{fontana_investigating_2012,
	title = {Investigating the impact of code smells debt on quality code evaluation},
	url = {https://doi.org/10.1109/MTD.2012.6225993},
	doi = {10.1109/MTD.2012.6225993},
	abstract = {Different forms of technical debt exist that have to be carefully managed. In this paper we focus our attention on design debt, represented by code smells. We consider three smells that we detect in open source systems of different domains. Our principal aim is to give advice on which design debt has to be paid first, according to the three smells we have analyzed. Moreover, we discuss if the detection of these smells could be tailored to the specific application domain of a system.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Fontana, F.A. and Ferme, V. and Spinelli, S.},
	month = jun,
	year = {2012},
	keywords = {application domain, Application software, code smell refactoring, code smells debt, Complexity theory, design debt, Generators, measurement, open source system, Programming, public domain software, quality code evaluation, software maintenance, software metrics, software quality, software quality metrics, technical debt},
	pages = {15--22}
}

@article{neill_paying_2006-1,
	title = {Paying down design debt with strategic refactoring},
	volume = {39},
	issn = {0018-9162},
	url = {https://doi.org/10.1109/MC.2006.435},
	doi = {10.1109/MC.2006.435},
	abstract = {Our studies indicate that strategic refactoring using design patterns is the most effective way to repair decaying code for object-oriented ({OO}) systems. However, applying a pattern-based approach to legacy system repair or even post-design pattern injection is often difficult and, in some cases if misapplied, detrimental},
	number = {12},
	journal = {Computer},
	author = {Neill, C.J. and Laplante, P.A.},
	year = {2006},
	keywords = {Application software, Computer architecture, design pattern, Feedback, Java, legacy system, Microarchitecture, object-oriented programming, object-oriented system, Pattern analysis, pattern-based approach, Process design, software maintenance, software systems, Software technologies, Stability, strategic refactoring},
	pages = {131--134}
}

@inproceedings{de_groot_what_2012,
	title = {What is the value of your software?},
	url = {https://doi.org/10.1109/MTD.2012.6225998},
	doi = {10.1109/MTD.2012.6225998},
	abstract = {Assessment of the economic value of software systems is useful in contexts such as capitalization on the balance sheet and due diligence prior to acquisition. Current accounting practice in determining software value is based on the cost spent in software development. This approach fails to account for the efficiency with which software has been produced or the quality of the product. This paper proposes three alternative models for determining the production value of software, based on the notions of technical debt and interest. We applied the models to 367 proprietary systems developed by a range of different organisations using a range of different programming languages. We present the valuation results and discuss the weaknesses and strengths of the models.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {de Groot, J. and Nugroho, A. and Back, T. and Visser, J.},
	month = jun,
	year = {2012},
	keywords = {balance sheet capitalization, cost accounting, cost spent, economic indicators, economic value assessment, product development, production value, product quality, programming languages, software development, software quality, software systems, software value, technical debt, technical interest},
	pages = {37--44}
}

@inproceedings{guo_portfolio_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {A portfolio approach to technical debt management},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985370},
	doi = {10.1145/1985362.1985370},
	abstract = {Technical debt describes the effect of immature software artifacts on software maintenance - the potential of extra effort required in future as if paying interest for the incurred debt. The uncertainty of interest payment further complicates the problem of what debt should be incurred or repaid and when. To help software managers make informed decisions, a portfolio approach is proposed in this paper. The approach leverages the portfolio management theory in the finance domain to determine the optimal collection of technical debt items that should be incurred or held. We expect this approach could provide a new perspective for technical debt management.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Guo, Yuepu and Seaman, Carolyn},
	year = {2011},
	keywords = {decision making, portfolio, software maintenance, software risk, technical debt},
	pages = {31--34}
}

@inproceedings{izurieta_organizing_2012,
	title = {Organizing the technical debt landscape},
	url = {https://doi.org/10.1109/MTD.2012.6225995},
	doi = {10.1109/MTD.2012.6225995},
	abstract = {To date, several methods and tools for detecting source code and design anomalies have been developed. While each method focuses on identifying certain classes of source code anomalies that potentially relate to technical debt ({TD}), the overlaps and gaps among these classes and {TD} have not been rigorously demonstrated. We propose to construct a seminal technical debt landscape as a way to visualize and organize research on the subject.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Izurieta, C. and Vetro, A. and Zazworka, N. and Cai, Yuanfang and Seaman, C. and Shull, F.},
	month = jun,
	year = {2012},
	keywords = {classes, design anomalies, object-oriented programming, seminal technical debt landscape, source code anomalies},
	pages = {23--26}
}

@inproceedings{klinger_enterprise_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {An enterprise perspective on technical debt},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985371},
	doi = {10.1145/1985362.1985371},
	abstract = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
	year = {2011},
	keywords = {extended stakeholders, leverage, technical debt},
	pages = {35--38}
}

@inproceedings{letouzey_sqale_2012,
	title = {The {SQALE} method for evaluating Technical Debt},
	url = {https://doi.org/10.1109/MTD.2012.6225997},
	doi = {10.1109/MTD.2012.6225997},
	abstract = {This paper presents the {SQALE} (Software Quality Assessment Based on Lifecycle Expectations) method. We describe its Quality Model and Analysis Model which is used to estimate the Quality and the Technical Debt of an application source code. We provide recommendations and guidelines for using the {SQALE} indicators in order to analyse the structure and the impact of the Technical Debt.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Letouzey, J.L.},
	month = jun,
	year = {2012},
	keywords = {analysis model, application source code, lifecycle expectations, quality model, software maintenance, software quality, software quality assessment, software reliability, {SQALE} method, technical debt},
	pages = {31--36}
}

@techreport{mcconnell_managing_2008,
	type = {Best Practices White Paper},
	title = {Managing Technical Debt},
	number = {1},
	institution = {Construx},
	author = {McConnell, Steve},
	year = {2008}
}

@article{mccabe_complexity_1976,
	author={McCabe, T.J.},
	journal={IEEE Transactions on Software Engineering},
	title={A Complexity Measure},
	year={1976},
	volume={SE-2},
	number={4},
	pages={308--320},
	keywords={Basis;complexity measure;control flow;decomposition;graph theory;independence;linear;modularization;programming;reduction;software;testing;Fluid flow measurement;Graph theory;Linear programming;National security;Software engineering;Software maintenance;Software measurement;Software systems;Software testing;System testing;Basis;complexity measure;control flow;decomposition;graph theory;independence;linear;modularization;programming;reduction;software;testing},
	doi={10.1109/TSE.1976.233837},
	url={https://doi.org/10.1109/TSE.1976.233837},
	ISSN={0098-5589},
	month={Dec},
}


@inproceedings{morgenthaler_searching_2012,
	title = {Searching for build debt: Experiences managing technical debt at Google},
	doi = {10.1109/MTD.2012.6225994},
	url = {https://doi.org/10.1109/MTD.2012.6225994},
	abstract = {With a large and rapidly changing codebase, Google software engineers are constantly paying interest on various forms of technical debt. Google engineers also make efforts to pay down that debt, whether through special Fixit days, or via dedicated teams, variously known as janitors, cultivators, or demolition experts. We describe several related efforts to measure and pay down technical debt found in Google's {BUILD} files and associated dead code. We address debt found in dependency specifications, unbuildable targets, and unnecessary command line flags. These efforts often expose other forms of technical debt that must first be managed.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Morgenthaler, J.D. and Gridnev, M. and Sauciuc, R. and Bhansali, S.},
	month = jun,
	year = {2012},
	keywords = {associated dead code, automation, build debt searching, Buildings, build system, Couplings, Google, Google {BUILD} files, Google software engineers, Internet, libraries, monolithic codebase, Pain, search engines, Software, software engineering, technical debt, technical debt management},
	pages = {1--6}
}

@inproceedings{nugroho_empirical_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {An empirical model of technical debt and interest},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985364},
	doi = {10.1145/1985362.1985364},
	abstract = {Cunningham introduced the metaphor of technical debt as guidance for software developers that must trade engineering quality against short-term goals. We revisit the technical debt metaphor, and translate it into terms that can help {IT} executives better understand their {IT} investments. An approach is proposed to quantify debts (cost to fix technical quality issues) and interest (extra cost spent on maintenance due to technical quality issues). Our approach is based on an empirical assessment method of software quality developed at the Software Improvement Group ({SIG}). The core part of the technical debt calculation is constructed on the basis of empirical data of 44 systems that are currently being monitored by {SIG}. In a case study, we apply the approach to a real system, and discuss how the results provide useful insights on important questions related to {IT} investment such as the return on investment ({ROI}) in software quality improvement.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
	year = {2011},
	keywords = {cost, effort, estimation, maintenance, measurement, software economics},
	pages = {1--8}
}

@inproceedings{snipes_defining_2012,
	title = {Defining the decision factors for managing defects: A technical debt perspective},
	url = {https://doi.org/10.1109/MTD.2012.6226001},
	doi = {10.1109/MTD.2012.6226001},
	abstract = {Making a decision about whether to fix or defer fixing a defect is important to software projects. Deferring defects accumulates a technical debt that burdens the software team and customer with a less than optimal solution. The decision to defer fixing a defect is made by Software Change Control Boards ({CCBs}) based on a set of decision factors. In this paper, we evaluated the set of decision factors used by two {CCBs} at {ABB} in the context of technical debt management The aim was to determine how a model of cost and benefits of incurring technical debt could be part of the {CCB} decision process. We identified the cost categories and decision factors for fixing and deferring defects as a result of interviews with {CCB} members. We found that the decision factors could incorporate the financial aspects when using the technical debt metaphor. We identify opportunities for further research to integrate technical debt concepts with the decision factors towards better long term outcomes.},
	booktitle = {Managing Technical Debt ({MTD}), 2012 Third International Workshop on},
	author = {Snipes, W. and Robinson, B. and Guo, Yuepu and Seaman, C.},
	month = jun,
	year = {2012},
	keywords = {{CCBs}, decision factors, defects management, defer fixing, project management, software change control boards, software management, software projects, technical debt perspective},
	pages = {54 --60}
}

@inproceedings{theodoropoulos_technical_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {Technical debt from the stakeholder perspective},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985373},
	doi = {10.1145/1985362.1985373},
	abstract = {The concept of technical debt provides an excellent tool for describing technology gaps in terms any stakeholder can understand. The technical debt metaphor was pioneered by the software development community and describes technical challenges in that context very well. However, establishing a definitional framework which describes issues affecting quality more broadly will better align to stakeholder perspectives. Building on the existing concept in this way will enable technology stakeholders by providing a centralized technical debt model. The metaphor can then be used to consistently describe quality challenges anywhere within the technical environment. This paper lays the foundation for this conceptual model by proposing a definitional framework that describes how technology gaps affect all aspects of quality.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Theodoropoulos, Ted and Hofberg, Mark and Kern, Daniel},
	year = {2011},
	keywords = {governance, risk management, software quality, technical debt},
	pages = {43--46}
}

@inproceedings{zazworka_prioritizing_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {Prioritizing design debt investment opportunities},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985372},
	doi = {10.1145/1985362.1985372},
	abstract = {Technical debt is the technical work developers owe a system, typically caused by speeding up development, e.g. before a software release. Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. Up until now, code smell detection has been used to help point to components that need to be freed from debt by refactoring. To date, a number of methods have been described for finding code smells in a system. However, typical debt properties, such as the value of the debt and interest rate to be paid, have not been well established. This position paper proposes an approach to using cost/benefit analysis to prioritize technical debt reduction work by ranking the value and interest of design debt caused by god classes. The method is based on metric analysis and software repository mining and is demonstrated on a commercial software application at a mid-size development company. The results are promising: the method helps to identify which refactoring activities should be performed first because they are likely to be cheap to make yet have significant effect, and which refactorings should be postponed due to high cost and low payoff.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Zazworka, Nico and Seaman, Carolyn and Shull, Forrest},
	year = {2011},
	keywords = {code smells, design debt, god class, maintainability, refactoring, technical debt},
	pages = {39--42}
}

@inproceedings{zazworka_investigating_2011,
	address = {Waikiki, Honolulu, {HI}, {USA}},
	series = {{MTD} '11},
	title = {Investigating the impact of design debt on software quality},
	isbn = {978-1-4503-0586-0},
	url = {http://doi.acm.org/10.1145/1985362.1985366},
	doi = {10.1145/1985362.1985366},
	abstract = {Technical debt is a metaphor describing situations where developers accept sacrifices in one dimension of development (e.g. software quality) in order to optimize another dimension (e.g. implementing necessary features before a deadline). Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. What has not yet been understood is the impact design debt has on the quality of a software product. Answering this question is important for understanding how growing debt affects a software product and how it slows down development, e.g. though introducing rework such as fixing bugs. In this case study we investigate how design debt, in the form of god classes, affects the maintainability and correctness of software products by studying two sample applications of a small-size software development company. The results show that god classes are changed more often and contain more defects than non-god classes. This result complements findings of earlier research and suggests that technical debt has a negative impact on software quality, and should therefore be identified and managed closely in the development process.},
	booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
	publisher = {{ACM}},
	author = {Zazworka, Nico and Shaw, Michele A. and Shull, Forrest and Seaman, Carolyn},
	year = {2011},
	keywords = {code smells, design debt, god class, maintainability, refactoring, technical debt},
	pages = {17--23}
}

@article{seaman_measuring_2011,
	title = {Measuring and monitoring technical debt},
	volume = {82},
	journal = {Advances in Computers},
	author = {Seaman, Carolyn and Guo, Yuepu},
	year = {2011},
	pages = {25--46}
}

@techreport{schmid_technical_2013,
	type = {Informatikberichte},
	title = {Technical Debt -- From Metaphor to Engineering Guidance: A Novel Approach based on Cost Estimation},
	url = {http://klausschmid.net/wp-content/uploads/paper/Schmid13a.pdf},
	language = {English},
	number = {1/2013, {SSE} 1/13/E},
	institution = {Institute of Computer Science, University of Hildesheim},
	author = {Schmid, Klaus},
	year = {2013}
}

@article{gaudin_evaluate_2009,
	title = {Evaluate your technical debt with Sonar},
	journal = {Sonar, Jun},
	author = {Gaudin, O},
	year = {2009}
}

@article{boehm_value-based_2003,
	title = {Value-based software engineering: A case study},
	volume = {36},
	number = {3},
	journal = {Computer},
	author = {Boehm, Barry and Huang, Li Guo},
	year = {2003},
	pages = {33--41}
}

@inproceedings{vetro_using_2012,
	title = {Using automatic static analysis to identify technical debt},
	isbn = {978-1-4673-1067-3, 978-1-4673-1066-6, 978-1-4673-1065-9},
	url = {https://doi.org/10.1109/ICSE.2012.6227226},
	doi = {10.1109/ICSE.2012.6227226},
	urldate = {2014-09-28},
	publisher = {{IEEE}},
	author = {Vetro, Antonio},
	month = jun,
	year = {2012},
	pages = {1613--1615}
}

@inproceedings{nord_search_2012,
	title = {In Search of a Metric for Managing Architectural Technical Debt},
	url = {https://doi.org/10.1109/WICSA-ECSA.212.17},
	doi = {10.1109/WICSA-ECSA.212.17},
	abstract = {Practices designed to expedite the delivery of stakeholder value can paradoxically lead to unexpected rework costs that ultimately degrade the flow of value over time. This is especially observable when features are developed based on immediate value, while dependencies that may slow down future development efforts are neglected. The technical debt metaphor conceptualizes this tradeoff between short-term and long-term value: taking shortcuts to optimize the delivery of features in the short term incurs debt, analogous to financial debt, that must be paid off later to optimize long-term success. In this paper, we describe taking an architecture-focused and measurement-based approach to develop a metric that assists in strategically managing technical debt. Such an approach can be used to optimize the cost of development over time while continuing to deliver value to the customer. We demonstrate our approach by describing its application to an ongoing system development effort.},
	booktitle = {Software Architecture ({WICSA}) and European Conference on Software Architecture ({ECSA}), 2012 Joint Working {IEEE}/{IFIP} Conference on},
	author = {Nord, R.L. and Ozkaya, I. and Kruchten, P. and Gonzalez-Rojas, M.},
	year = {2012},
	keywords = {architectural technical debt, architecture focused approach, Computer architecture, cost of rework, Data models, development cost, Educational institutions, financial debt, long-term value, Maintenance engineering, measurement, measurement based approach, Organizations, rework costs, short-term value, Software, software architecture, software cost estimation, software economics, software metrics, stakeholder value, system development, technical debt, technical debt metaphor, total cost of ownership},
	pages = {91--100}
}

@article{chin_economics_2010,
	title = {The Economics of Technical Debt},
	volume = {23},
	number = {10},
	journal = {Cutter {IT} Journal},
	author = {Chin, S. and Huddleston, E. and Bodwell, W. and Gat, I.},
	year = {2010},
	pages = {11--15}
}

@article{cunningham_wycash_1992,
	title = {The {WyCash} portfolio management system},
	volume = {4},
	issn = {1055-6400},
	url = {http://doi.acm.org/10.1145/157710.157715},
	doi = {10.1145/157710.157715},
	number = {2},
	journal = {{SIGPLAN} {OOPS} Mess.},
	author = {Cunningham, Ward},
	month = dec,
	year = {1992},
	pages = {29--30}
}

@article{curtis_estimating_2012-1,
	title = {Estimating the Principal of an Application's Technical Debt},
	volume = {29},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2012.156},
	doi = {10.1109/MS.2012.156},
	abstract = {This article characterizes technical debt across 700 business applications, comprising 357 {MLOC}. These applications were analyzed against more than 1,200 rules of good architectural and coding practice. The authors present a formula with adjustable parameters for estimating the principal of technical debt from structural quality data.},
	number = {6},
	journal = {Software, {IEEE}},
	author = {Curtis, B. and Sappidi, J. and Szynkarski, A.},
	month = dec,
	year = {2012},
	keywords = {architectural practice, business applications, coding practice, commerce, data handling, financial management, Investments, {MLOC}, risk management, Software measurements, software metrics, software quality, software structural quality, static analysis, structural quality data, technical debt},
	pages = {34--42}
}

@article{guo_tracking_2011,
	title = {Tracking technical debt – An exploratory case study},
	issn = {1063-6773},
	url = {https://doi.org/10.1109/ICSM.2011.6080824},
	doi = {10.1109/ICSM.2011.6080824},
	abstract = {The technical debt metaphor is increasingly being used to describe the effect of delaying certain software maintenance tasks on software projects. Practitioners understand intuitively how technical debt can turn into a serious problem if it is left unattended. However, it remains unknown how serious the problem is and whether explicit measurement and management of technical debt is useful. In this paper, we explore the effect of technical debt by tracking a single delayed maintenance task in a real software project throughout its lifecycle and simulate how explicit technical debt management might have changed project outcomes. The results from this study demonstrate how and to what extent technical debt affects software projects. The study also sheds light on the research methodologies that can be used to investigate the technical debt management problem.},
	journal = {Software Maintenance ({ICSM}), 2011 27th {IEEE} International Conference on},
	author = {Guo, Yuepu and Seaman, C. and Gomes, R. and Cavalcanti, A. and Tonin, G. and da Silva, F.Q.B. and Santos, A.L.M. and Siebra, C.},
	year = {2011},
	keywords = {decision making, Delay, financial management, Maintenance engineering, project management, project outcomes, Protocols, software maintenance, software maintenance task, software management, software projects, Switches, technical debt, technical debt management, technical debt metaphor, technical debt tracking},
	pages = {528--531}
}

@article{kruchten_technical_2012,
	title = {Technical Debt: From Metaphor to Theory and Practice},
	volume = {29},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2012.167},
	doi = {10.1109/MS.2012.167},
	abstract = {The metaphor of technical debt in software development was introduced two decades ago to explain to nontechnical stakeholders the need for what we call now \#x0022;refactoring. \#x0022; As the term is being used to describe a wide range of phenomena, this paper proposes an organization of the technical debt landscape, and introduces the papers on technical debt contained in the issue.},
	number = {6},
	journal = {Software, {IEEE}},
	author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
	month = dec,
	year = {2012},
	pages = {18--21}
}

@article{avgeriou_managing_2016,
	title = {Managing {Technical} {Debt} in {Software} {Engineering} ({Dagstuhl} {Seminar} 16162)},
	url = {https://doi.org/10.4230/DagRep.6.4.110},
	doi = {10.4230/DagRep.6.4.110},
	urldate = {2017-04-07},
	author = {Avgeriou, Paris and Kruchten, Philippe and Ozkaya, Ipek and Seaman, Carolyn},
	year = {2016}
}

@article{letouzey_managing_2012,
	title = {Managing Technical Debt with the {SQALE} Method},
	volume = {29},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2012.129},
	doi = {10.1109/MS.2012.129},
	abstract = {To date, several methods are available for estimating the technical debt present in an application's source code. The {SQALE} (software quality assessment based on life-cycle expectations) method provides guidance for managing this debt. This article provides some implementation recommendations the authors learned from coaching and assisting large organizations in setting up and using {SQALE}.},
	number = {6},
	journal = {Software, {IEEE}},
	author = {Letouzey, J. and Ilkiewicz, M.},
	month = dec,
	year = {2012},
	keywords = {analysis model, application source code, Investments, life-cycle expectation, Monitoring, quality, quality model, Reliability, risk management, software management, software quality, software quality assessment, source code, source coding, {SQALE}, {SQALE} method, Standards organizations, technical debt, technical debt estimation, technical debt management},
	pages = {44--51}
}

@article{lim_balancing_2012,
	title = {A Balancing Act: What Software Practitioners Have to Say about Technical Debt},
	volume = {29},
	issn = {0740-7459},
	url = {https://doi.org/10.1109/MS.2012.130},
	doi = {10.1109/MS.2012.130},
	abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
	number = {6},
	journal = {Software, {IEEE}},
	author = {Lim, E. and Taksande, N. and Seaman, C.},
	month = dec,
	year = {2012},
	keywords = {documentation, {DP} industry, Interviews, Investments, maintenance management, project management, risk management, software development management, software engineering, software maintenance, software practitioner, software quality, Software testing, technical debt},
	pages = {22--27}
}

@inproceedings{lindgren_method_2008,
	title = {A Method for Balancing Short- and Long-Term Investments: Quality vs. Features},
	url = {https://doi.org/10.1109/SEAA.2008.22},
	doi = {10.1109/SEAA.2008.22},
	abstract = {There are a number of conflicting forces between short- and long-term considerations for software release planning in industry. For example, from a business perspective it is usually desired with a short time-to-market. However, from software quality perspective it is usually desired to have a longer time-to-market such that the proper architectural mechanisms can be put in place, which in the long-term reduce development cost and addresses quality aspects. In this paper we outline some of these conflicting forces, with a focus on long-lived systems, and examplify how they impact product quality and time-to-market. In this paper we propose a simple, but useful, extension of the release planning process that addresses these conflicting forces. The method is inspired from empirical data captured in a multiple case study involving 7 companies.},
	booktitle = {Software Engineering and Advanced Applications, 2008. {SEAA} '08. 34th Euromicro Conference},
	author = {Lindgren, M. and Wall, A. and Land, R. and Norstrom, C.},
	month = sep,
	year = {2008},
	keywords = {Application software, architecture, Business, Companies, Computer industry, Costs, {DP} industry, Force measurement, investment, Investments, long-term investment, Production, Release planning, short-term investment, software development management, software engineering, software industry, software quality, Software release planning, Time to market, trade-off analysis},
	pages = {175--182}
}

@article{marinescu_assessing_2012-1,
	title = {Assessing technical debt by identifying design flaws in software systems},
	volume = {56},
	issn = {0018-8646},
	url = {https://doi.org/10.1147/JRD.2012.2204512},
	doi = {10.1147/JRD.2012.2204512},
	abstract = {Tough time-to-market constraints and unanticipated integration or evolution issues lead to design tradeoffs that usually cause flaws in the structure of a software system. Thus, maintenance costs grow significantly. The impact of these design decisions, which provide short-term benefits at the expense of the system \#x2019;s design integrity, is usually referred to as technical debt. In this paper, I propose a novel framework for assessing technical debt using a technique for detecting design flaws, i.e., specific violations of well-established design principles and rules. To make the framework comprehensive and balanced, it is built on top of a set of metrics-based detection rules for well-known design flaws that cover all of the major aspects of design such as coupling, complexity, and encapsulation. I demonstrate the effectiveness of the framework by assessing the evolution of technical debt symptoms over a total of 63 releases of two popular Eclipse \#x00AE; projects. The case study shows how the framework can detect debt symptoms and past refactoring actions. The experiment also reveals that in the absence of such a framework, restructuring actions are not always coherent and systematic, not even when performed by very experienced developers.},
	number = {5},
	journal = {{IBM} Journal of Research and Development},
	author = {Marinescu, R.},
	month = oct,
	year = {2012},
	keywords = {Complexity theory, Cost benefit analysis, Design methodology, Maintenance engineering, product development, software systems, Systematics, Time to market},
	pages = {9:1--9:13}
}

@inproceedings{stochel_value-based_2012,
	title = {Value-Based Technical Debt Model and Its Application},
	booktitle = {{ICSEA} 2012, The Seventh International Conference on Software Engineering Advances},
	author = {Stochel, Marek G and Wawrowski, Mariusz R and Rabiej, Magdalena},
	year = {2012},
	pages = {205--212}
}

@book{sullivan_software_1999,
	title = {Software design as an investment activity: a real options perspective},
	publisher = {Risk Books},
	author = {Sullivan, Kevin J and Chalasani, Prasad and Jha, Somesh and Sazawal, Vibha},
	year = {1999}
}

@article{tom_exploration_2013,
	title = {An exploration of technical debt},
	issn = {0164-1212},
	url = {https://doi.org/10.1016/j.jss.2012.12.052},
	doi = {10.1016/j.jss.2012.12.052},
	abstract = {Context Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device. Objective To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development. Method An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon. Result A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon. Conclusion The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt.},
	number = {0},
	journal = {Journal of Systems and Software},
	author = {Tom, Edith and Aurum, Ayb\"{u}ke and Vidgen, Richard},
	year = {2013},
	keywords = {debt, Technical},
}

@article{tom_consolidated_2012,
	title = {A Consolidated Understanding of Technical Debt},
	author = {Tom, Edith and Aurum, Ayb\"{u}ke and Vidgen, Richard},
	year = {2012}
}

@article{zazworka_comparing_2012,
	title = {Comparing Four Approaches for Technical Debt Identification},
	journal = {Software Quality Journal},
	author = {Zazworka, Nico and Vetro, Antonio and Izurieta, Clemente and Wong, Sunny and Cai, Yuanfang and Seaman, Carolyn and Shull, Forrest},
	year = {2012}
}

@article{holvitie_technical_????,
	title = {Technical Debt and the Effect of Agile Software Development Practices on It–An Industry Practitioner Survey},
	author = {Holvitie, Johannes and Leppänen, Ville and Hyrynsalmi, Sami}
}

@article{alves_towards_????,
	title = {Towards an Ontology of Terms on Technical Debt},
	author = {Alves, Nicolli SR and Ribeiro, Leilane F and Caires, Vivyane and Mendes, Thiago S and Spínola, Rodrigo O}
}

@article{ho_when--release_????,
	title = {When-to-release decisions in consideration of technical debt},
	author = {Ho, Jason and Ruhe, Guenther}
}

@article{al_mamun_explicating_????,
	title = {Explicating, Understanding and Managing Technical Debt from Self-Driving Miniature Car Projects},
	author = {Al Mamun, Md Abdullah and Berger, Christian and Hansson, Jörgen}
}

@article{singh_framework_????,
	title = {A Framework for Estimating Interest on Technical Debt by Monitoring Developer Activity Related to Code Comprehension},
	author = {Singh, Vallary and Snipes, Will and Kraft, Nicholas A}
}

@inproceedings{holvitie_software_2014,
	title = {Software implementation knowledge management with technical debt and network analysis},
	isbn = {978-1-4799-2393-9},
	url = {https://doi.org/10.1109/RCIS.2014.6861083},
	doi = {10.1109/RCIS.2014.6861083},
	urldate = {2014-10-13},
	publisher = {{IEEE}},
	author = {Holvitie, Johannes},
	month = may,
	year = {2014},
	pages = {1--6}
}

@incollection{van_der_aalst_reducing_2014,
	address = {Cham},
	title = {Reducing Technical Debt: Using Persuasive Technology for Encouraging Software Developers to Document Code},
	volume = {178},
	isbn = {978-3-319-07868-7, 978-3-319-07869-4},
	shorttitle = {Reducing Technical Debt},
	url = {http://link.springer.com/10.1007/978-3-319-07869-4_18},
	doi = {10.1007/978-3-319-07869-4_18},
	urldate = {2014-10-13},
	booktitle = {Advanced Information Systems Engineering Workshops},
	publisher = {Springer International Publishing},
	author = {Shmerlin, Yulia and Kliger, Doron and Makabee, Hayim},
	editor = {van der Aalst, Wil and Mylopoulos, John and Rosemann, Michael and Shaw, Michael J. and Szyperski, Clemens and Iliadis, Lazaros and Papazoglou, Michael and Pohl, Klaus},
	year = {2014},
	pages = {207--212}
}

@inproceedings{alzaghoul_evaluating_2014,
	title = {Evaluating Technical Debt in Cloud-Based Architectures Using Real Options},
	isbn = {978-1-4799-3149-1},
	url = {https://doi.org/10.1109/ASWEC.2014.27},
	doi = {10.1109/ASWEC.2014.27},
	urldate = {2014-10-13},
	publisher = {{IEEE}},
	author = {Alzaghoul, Esra and Bahsoon, Rami},
	month = apr,
	year = {2014},
	pages = {1--10}
}

@article{fernandez_sanchez_cost-benefit_2013,
	title = {A Cost-Benefit analysis model for technical debt management considering uncertainty and time},
	author = {Fern\'{a}ndez S\'{a}nchez, Carlos and Díaz Fern\'{a}ndez, Jessica and Garbajosa Sope\~{n}a, Juan and P\'{e}rez Bened\'{i}, Jennifer},
	year = {2013}
}

@inproceedings{griffith_simulation_2014,
	author = {Griffith, Isaac and Izurieta, Clemente and Taffahi, Hanane and Claudio, David},
	title = {A Simulation Study of Practical Methods for Technical Debt Management in Agile Software Development},
	booktitle = {Proceedings of the 2014 Winter Simulation Conference},
	series = {WSC '14},
	year = {2014},
	location = {Savannah, Georgia},
	pages = {1014--1025},
	numpages = {12},
	url = {http://dl.acm.org/citation.cfm?id=2693848.2693983},
	acmid = {2693983},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
}

@inproceedings{griffith_correspondence_2014,
	title = {The Correspondence Between Software Quality Models and Technical Debt Estimation Approaches},
	isbn = {978-1-4799-6791-9},
	url = {https://doi.org/10.1109/MTD.2014.13},
	doi = {10.1109/MTD.2014.13},
	urldate = {2014-12-18},
	publisher = {{IEEE}},
	author = {Griffith, Isaac and Reimanis, Derek and Izurieta, Clemente and Codabux, Zadia and Deo, Ajay and Williams, Byron},
	month = sep,
	year = {2014},
	pages = {19--26}
}

@inproceedings{griffith_industry_2017,
	author={C. Izurieta and I. Griffith and C. Huvaere},
	booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	title={An Industry Perspective to Comparing the SQALE and Quamoco Software Quality Models},
	year={2017},
	volume={},
	number={},
	pages={287-296},
	keywords={DP industry;software quality;Construction Engineering Research Laboratory;Quamoco software quality model;TechLink;open source software projects;operational quality models;quality assessments;quality assurance measurement needs;software systems;Biological system modeling;Computer architecture;ISO Standards;Industries;Software measurement;Software quality;quality assurance;quality standards;software quality},
	url={https://doi.org/10.1109/ESEM.2017.42},
	doi={10.1109/ESEM.2017.42},
	ISSN={},
	month={Nov},
}

@article{briand_exploring_2000,
	title = {Exploring the relationships between design measures and software quality in object-oriented systems},
	volume = {51},
	issn = {01641212},
	url = {https://doi.org/10.1016/S0164-1212(99)00102-8},
	doi = {10.1016/S0164-1212(99)00102-8},
	language = {en},
	number = {3},
	urldate = {2017-04-07},
	journal = {Journal of Systems and Software},
	author = {Briand, Lionel C. and W\"{u}st, J\"{u}rgen and Daly, John W. and Victor Porter, D.},
	month = may,
	year = {2000},
	pages = {245--273}
}

@inproceedings{chidamber_towards_1991,
	title = {Towards a metrics suite for object oriented design},
	isbn = {978-0-201-55417-5},
	url = {https://doi.org/10.1145/117954.117970},
	doi = {10.1145/117954.117970},
	language = {en},
	urldate = {2017-04-07},
	publisher = {ACM Press},
	author = {Chidamber, Shyam R. and Kemerer, C.F.},
	year = {1991},
	pages = {197--211}
}

@inproceedings{spinola_investigating_2013,
	title = {Investigating technical debt folklore: Shedding some light on technical debt opinion},
	url = {https://doi.org/10.1109/MTD.2013.6608671},
	doi = {10.1109/MTD.2013.6608671},
	abstract = {We identified and organized a number of statements about technical debt ({TD} Folklore list) expressed by practitioners in online websites, blogs and published papers. We chose 14 statements and we evaluated them through two surveys (37 practitioners answered the questionnaires), ranking them by agreement and consensus. The statements most agreed with show that {TD} is an important factor in software project management and not simply another term for “bad code”. This study will help the research community in identifying folklore that can be translated into research questions to be investigated, thus targeting attempts to provide a scientific basis for {TD} management.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Spinola, Rodrigo O. and Vetro, Antonio and Zazworka, Nico and Seaman, Carolyn and Shull, Forrest},
	year = {2013},
	keywords = {Blogs, Communities, Maintenance engineering, Software, software engineering, software maintenance, technical debt, Training, Webinars},
	pages = {1--7}
}

@inproceedings{codabux_managing_2013,
	title = {Managing technical debt: An industrial case study},
	url = {https://doi.org/10.1109/MTD.2013.6608672},
	doi = {10.1109/MTD.2013.6608672},
	abstract = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20\% of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Codabux, Zadia and Williams, Byron},
	year = {2013},
	keywords = {Encoding, Interviews, Maintenance engineering, Organizations, Scrum, semi-structure interviews, Software, taxonomy, technical debt Agile methods industrial case study, Training},
	pages = {8--15}
}

@inproceedings{falessi_practical_2013,
	title = {Practical considerations, challenges, and requirements of tool-support for managing technical debt},
	url = {https://doi.org/10.1109/MTD.2013.6608673},
	doi = {10.1109/MTD.2013.6608673},
	abstract = {Developing a software product with a high level of quality that also meets budget and schedule is the main goal of any organization. This usually implies making tradeoffs among conflicting aspects like number of features to implement, user perceived quality, time-to-market, and the ability of the company to maintain and improve the system in a feasible way in the future (aka, managing Technical Debt ({TD})). In this paper we present a fresh perspective on {TD} from a {CMMI} Maturity Level 5 company. Examples, practical considerations, and challenges in dealing with {TD} are presented along with ten requirements of a tool for managing {TD}.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Falessi, Davide and Shaw, Michele A. and Shull, Forrest and Mullen, Kathleen and Keymind, Mark Stein},
	year = {2013},
	keywords = {{CMMI}, Companies, Couplings, decision making, decision-making, Economics, Software, technical debt, uncertainty},
	pages = {16--19}
}

@inproceedings{ramasubbu_towards_2013,
	title = {Towards a model for optimizing technical debt in software products},
	url = {https://doi.org/10.1109/MTD.2013.6608679},
	doi = {10.1109/MTD.2013.6608679},
	abstract = {There is a growing interest in applying the technical debt metaphor to investigate issues related to the tradeoff of the likely long-term costs associated with software design shortcuts for expected short-term business benefits in terms of increased earlier functionality. We propose an optimization model that contrasts the patterns of technical debt accumulation in a software product with the patterns of consumer adoption of the product throughout its evolution. This facilitates a rigorous and balanced analysis of the pros and cons of accumulating technical debt at various lifecycle stages of a software product. We discuss the use of the optimization model to derive policies for managing technical debt and the potential for empirical tests of the model and other future interdisciplinary research.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Ramasubbu, Narayan and Kemerer, Chris F.},
	year = {2013},
	keywords = {Business, Conferences, Context, customer adoption, Customer satisfaction, customization, optimization, product development, Software, software platforms, software quality, technical debt, Trajectory},
	pages = {51--54}
}

@inproceedings{holvitie_debtflag:_2013,
	title = {{DebtFlag}: Technical debt management with a development environment integrated tool},
	url = {https://doi.org/10.1109/MTD.2013.6608674},
	doi = {10.1109/MTD.2013.6608674},
	abstract = {In this paper, we introduce the {DebtFlag} tool for capturing, tracking and resolving technical debt in software projects. {DebtFlag} integrates into the development environment and provides developers with lightweight documentation tools to capture technical debt and link them to corresponding parts in the implementation. During continued development these links are used to create propagation paths for the documented debt. This allows for an up-to-date and accurate presentation of technical debt to be upheld, which enables developer conducted implementation-level micromanagement as well as higher level technical debt management.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Holvitie, Johannes and Leppanen, Ville},
	year = {2013},
	keywords = {Cognition, Color, Context, {DebtFlag}, documentation, Java, Software, source code analysis, source code assessment, technical debt, technical debt management, Visualization},
	pages = {20--27}
}

@inproceedings{wang_generating_2013,
	title = {Generating precise dependencies for large software},
	url = {https://doi.org/10.1109/MTD.2013.6608678},
	doi = {10.1109/MTD.2013.6608678},
	abstract = {Intra- and inter-module dependencies can be a significant source of technical debt in the long-term software development, especially for large software with millions of lines of code. This paper designs and implements a precise and scalable tool that extracts code dependencies and their utilization for large C/C++ software projects. The tool extracts both symbol-level and module-level dependencies of a software system and identifies potential underutilized and inconsistent dependencies. Such information points to potential refactoring opportunities and help developers perform large-scale refactoring tasks.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Wang, Pei and Yang, Jingiu and Tan, Lin and Kroeger, Robert and David Morgenthaler, J.},
	year = {2013},
	keywords = {Browsers, Chromium, Couplings, dependency large scale, Google, libraries, software systems, technical debt},
	pages = {47--50}
}

@inproceedings{mo_mapping_2013,
	title = {Mapping architectural decay instances to dependency models},
	url = {https://doi.org/10.1109/MTD.2013.6608677},
	doi = {10.1109/MTD.2013.6608677},
	abstract = {The architectures of software systems tend to drift or erode as they are maintained and evolved. These systems often develop architectural decay instances, which are instances of design decisions that negatively impact a system's lifecycle properties and are the analog to code-level decay instances that are potential targets for refactoring. While code-level decay instances are based on source-level constructs, architectural decay instances are based on higher levels of abstractions, such as components and connectors, and related concepts, such as concerns. Unlike code-level decay instances, architectural decay usually has more significant consequences. Not being able to detect or address architectural decay in time incurs architecture debt that may result in a higher penalty in terms of quality and maintainability (interest) over time. To facilitate architecture debt detection, in this paper, we demonstrate the possibility of transforming architectural models and concerns into an extended augmented constraint network ({EACN}), which can uniformly model the constraints among design decisions and environmental conditions. From an {ACN}, a pairwise-dependency relation ({PWDR}) can be derived, which, in turn, can be used to automatically and uniformly detect architectural decay instances.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Mo, Ran and Garcia, Joshua and Cai, Yuanfang and Medvidovic, Nenad},
	year = {2013},
	keywords = {Computational modeling, connectors, Data structures, software systems, Sparse matrices},
	pages = {39--46}
}

@inproceedings{schmid_limits_2013,
	title = {On the limits of the technical debt metaphor some guidance on going beyond},
	url = {https://doi.org/10.1109/MTD.2013.6608681},
	doi = {10.1109/MTD.2013.6608681},
	abstract = {Over recent years the topic of technical debt has gained significant attention in the software engineering community. The area of technical debt research is somewhat peculiar within software engineering as it is built on a metaphor. This has certainly benefited the field as it helps to achieve a lot of attention and eases communication about the topic, however, it seems it is to some extent also sidetracking research work, if the metaphor is used beyond its range of applicability. In this paper, we focus on the limits of the metaphor and the problems that arise when over-extending its applicability. We do also aim at providing some additional insights by proposing certain ways of handling these restrictions.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Schmid, Klaus},
	year = {2013},
	keywords = {Conferences, cost accounting, Economic Model, {IEEE} Potentials, Metaphor, Permission, Software, software architecture, technical debt},
	pages = {63--66}
}

@inproceedings{power_understanding_2013,
	title = {Understanding the impact of technical debt on the capacity and velocity of teams and organizations: Viewing team and organization capacity as a portfolio of real options},
	url = {https://doi.org/10.1109/MTD.2013.6608675},
	doi = {10.1109/MTD.2013.6608675},
	abstract = {Understanding the impact of technical debt is critical to understanding a team's velocity. For organizations with multiple teams and products, the impact of technical debt combines non-linearly to impact the organization's velocity. We can think of the capacity of a team as a portfolio. Not all of that capacity can be invested in new features or defect fixing, without incurring negative consequences. A portion of the team's capacity needs to be invested in the ongoing management and reduction of technical debt. This paper describes a simple technique for visualizing, quantifying and tracking a team's technical debt as a portion of their overall capacity investment. The knowledge and insights gained through this technique help with better capacity planning, improved forecasting, and helps to justify the business case for investing in managing and reducing technical debt.},
	booktitle = {Managing Technical Debt ({MTD}), 2013 4th International Workshop on},
	author = {Power, Ken},
	year = {2013},
	keywords = {capacity, investment, organization capacity, Organizations, organization velocity, planning, Portfolios, portfolio thinking, real options, Resource management, team capacity, team velocity, technical debt, tracking, velocity, Visualization},
	pages = {28--31}
}

@techreport{sappidi_jay_crash_2012,
	title = {The {CRASH} {Report} – 2011/12: {Summary} of {Key} {Findings}},
	institution = {CAST Research Labs},
	author = {Sappidi, Jay and Curtis, Bill and Szynkarski, Alexandra},
	year = {2012},
}

@inproceedings{izurieta_uncertainty_2013,
	title = {On the Uncertainty of Technical Debt Measurements},
	url = {https://doi.org/10.1109/ICISA.2013.6579461},
	doi = {10.1109/ICISA.2013.6579461},
	abstract = {Measurements are subject to random and systematic errors, yet almost no study in software engineering makes significant efforts in reporting these errors. Whilst established statistical techniques are well suited for the analysis of random error, such techniques are not valid in the presence of systematic errors. We propose a departure from de- facto methods of reporting results of technical debt measurements for more rigorous techniques drawn from established methods in the physical sciences. This line of inquiry focuses on technical debt calculations; however it can be generalized to quantitative software engineering studies. We pose research questions and seek answers to the identification of systematic errors in metric-based tools, as well as the reporting of such errors when subjected to propagation. Exploratory investigations reveal that the techniques suggested allow for the comparison of uncertainties that come from differing sources. We suggest the study of error propagation of technical debt is a worthwhile subject for further research and techniques seeded from the physical sciences present viable options that can be used in software engineering reporting.},
	booktitle = {Information Science and Applications ({ICISA}), 2013 International Conference on},
	author = {Izurieta, C. and Griffith, I. and Reimanis, D. and Luhr, R.},
	year = {2013},
	keywords = {de-facto methods, error propagation, measurement errors, Measurement uncertainty, metric-based tools, Organizations, quantitative software engineering studies, random errors, Software, software engineering, software maintenance, software measurement, software metrics, software quality, Statistical analysis, statistical techniques, systematic error identification, Systematics, technical debt calculations, technical debt measurement uncertainty, uncertainty},
	pages = {1--4},
}

@inproceedings{zazworka_case_2013,
	address = {New York, {NY}, {USA}},
	series = {{EASE} '13},
	title = {A case study on effectively identifying technical debt},
	isbn = {978-1-4503-1848-8},
	url = {http://doi.acm.org/10.1145/2460999.2461005},
	doi = {10.1145/2460999.2461005},
	booktitle = {Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering},
	publisher = {{ACM}},
	author = {Zazworka, Nico and Spínola, Rodrigo O. and Vetro, Antonio and Shull, Forrest and Seaman, Carolyn},
	year = {2013},
	keywords = {automatic static analysis, code smells, software maintenance, technical debt},
	pages = {42--47}
}

@inproceedings{wagner_quamoco_2012,
	title = {The {Quamoco} product quality modelling and assessment approach},
	isbn = {978-1-4673-1067-3, 978-1-4673-1066-6, 978-1-4673-1065-9},
	url = {https://doi.org/10.1109/ICSE.2012.6227106},
	doi = {10.1109/ICSE.2012.6227106},
	urldate = {2014-10-09},
	publisher = {IEEE},
	author = {Wagner, Stefan and Lochmann, Klaus and Heinemann, Lars and Klas, Michael and Trendowicz, Adam and Plosch, Reinhold and Seidi, Andreas and Goeb, Andreas and Streit, Jonathan},
	month = jun,
	year = {2012},
	pages = {1133--1142}
}

@inproceedings{schmid_formal_2013,
	address = {New York, {NY}, {USA}},
	series = {{QoSA} '13},
	title = {A formal approach to technical debt decision making},
	isbn = {978-1-4503-2126-6},
	url = {http://doi.acm.org/10.1145/2465478.2465492},
	doi = {10.1145/2465478.2465492},
	booktitle = {Proceedings of the 9th international {ACM} Sigsoft conference on Quality of software architectures},
	publisher = {{ACM}},
	author = {Schmid, Klaus},
	year = {2013},
	keywords = {cost estimation, decision making, Formal Model, incremental development, software systems, technical debt},
	pages = {153--162}
}

@inproceedings{izurieta_preemptive_2015,
	address = {Montreal, Canada},
	title = {Preemptive {Management} of {Model} {Driven} {Technical} {Debt} for {Improving} {Software} {Quality}},
	booktitle = {Proceedings of the 11th {International} {ACM} {SigSoft} {Conference} on the {Quality} of {Software} {Architectures}},
	author = {Izurieta, C. and Rojas, G. and Griffith, I.},
	month = may,
	year = {2015}
}


@inproceedings{singh_framework_2014,
	title = {A {Framework} for {Estimating} {Interest} on {Technical} {Debt} by {Monitoring} {Developer} {Activity} {Related} to {Code} {Comprehension}},
	isbn = {978-1-4799-6791-9},
	url = {https://doi.org/10.1109/MTD.2014.16},
	doi = {10.1109/MTD.2014.16},
	urldate = {2015-09-21},
	publisher = {IEEE},
	author = {Singh, Vallary and Snipes, Will and Kraft, Nicholas A.},
	month = sep,
	year = {2014},
	pages = {27--30}
}

@inproceedings{codabux_quality_2014,
	title = {A {Quality} {Assurance} {Approach} to {Technical} {Debt}},
	booktitle = {Proceedings of the {International} {Conference} on {Software} {Engineering} {Research} and {Practice} ({SERP})},
	publisher = {The Steering Committee of The World Congress in Computer Science, Computer Engineering and Applied Computing (WorldComp)},
	author = {Codabux, Zadia and Williams, Byron J and Niu, Nan},
	year = {2014},
	pages = {1}
}

@inproceedings{martini_architecture_2014,
	title = {Architecture {Technical} {Debt}: {Understanding} {Causes} and a {Qualitative} {Model}},
	isbn = {978-1-4799-5795-8},
	shorttitle = {Architecture {Technical} {Debt}},
	url = {https://doi.org/10.1109/SEAA.2014.65},
	doi = {10.1109/SEAA.2014.65},
	urldate = {2015-09-21},
	publisher = {IEEE},
	author = {Martini, Antonio and Bosch, Jan and Chaudron, Michel},
	month = aug,
	year = {2014},
	pages = {85--92}
}

@incollection{nurcan_conciliating_2015,
	address = {Cham},
	title = {Conciliating {Model}-{Driven} {Engineering} with {Technical} {Debt} {Using} a {Quality} {Framework}},
	volume = {204},
	isbn = {978-3-319-19269-7 978-3-319-19270-3},
	url = {http://link.springer.com/10.1007/978-3-319-19270-3_13},
	doi = {10.1007/978-3-319-19270-3_13},
	urldate = {2015-09-21},
	booktitle = {Information {Systems} {Engineering} in {Complex} {Environments}},
	publisher = {Springer International Publishing},
	author = {Giraldo, Fáber D. and España, Sergio and Pineda, Manuel A. and Giraldo, William J. and Pastor, Oscar},
	editor = {Nurcan, Selmin and Pimenidis, Elias},
	year = {2015},
	pages = {199--214}
}

@article{chatzigeorgiou_estimating_????,
	title = {Estimating the {Breaking} {Point} for {Technical} {Debt}},
	author = {Chatzigeorgiou, Alexander and Ampatzoglou, Apostolos and Ampatzoglou, Areti and Amanatidis, Theodoros}
}

@article{holvitie_examining_2015,
	title = {Examining {Technical} {Debt} {Accumulation} in {Software} {Implementations}},
	volume = {9},
	issn = {17389984, 17389984},
	url = {https://doi.org/10.14257/ijseia.2015.9.6.12},
	doi = {10.14257/ijseia.2015.9.6.12},
	number = {6},
	urldate = {2015-09-21},
	journal = {International Journal of Software Engineering and Its Applications},
	author = {Holvitie, Johannes and Leppänen, Ville},
	month = jun,
	year = {2015},
	pages = {109--124}
}

@inproceedings{mamun_explicating_2014,
	title = {Explicating, {Understanding}, and {Managing} {Technical} {Debt} from {Self}-{Driving} {Miniature} {Car} {Projects}},
	isbn = {978-1-4799-6791-9},
	url = {https://doi.org/10.1109/MTD.2014.15},
	doi = {10.1109/MTD.2014.15},
	urldate = {2015-09-21},
	publisher = {IEEE},
	author = {Mamun, Md Abdullah Al and Berger, Christian and Hansson, Jorgen},
	month = sep,
	year = {2014},
	pages = {11--18}
}

@article{guo_exploring_2014,
	title = {Exploring the costs of technical debt management – a case study},
	issn = {1382-3256, 1573-7616},
	url = {http://link.springer.com/10.1007/s10664-014-9351-7},
	doi = {10.1007/s10664-014-9351-7},
	language = {en},
	urldate = {2015-09-21},
	journal = {Empirical Software Engineering},
	author = {Guo, Yuepu and Spínola, Rodrigo Oliveira and Seaman, Carolyn},
	month = nov,
	year = {2014}
}

@article{martini_investigating_2015,
	title = {Investigating {Architectural} {Technical} {Debt} accumulation and refactoring over time: {A} multiple-case study},
	volume = {67},
	issn = {09505849},
	shorttitle = {Investigating {Architectural} {Technical} {Debt} accumulation and refactoring over time},
	url = {https://doi.org/10.1016/j.infsof.2015.07.005},
	doi = {10.1016/j.infsof.2015.07.005},
	language = {en},
	urldate = {2015-09-21},
	journal = {Information and Software Technology},
	author = {Martini, Antonio and Bosch, Jan and Chaudron, Michel},
	month = nov,
	year = {2015},
	pages = {237--253}
}

@inproceedings{ernst_measure_2015,
	title = {Measure it? {Manage} it? {Ignore} it? software practitioners and technical debt},
	isbn = {978-1-4503-3675-8},
	shorttitle = {Measure it?},
	url = {https://doi.org/10.1145/2786805.2786848},
	doi = {10.1145/2786805.2786848},
	language = {en},
	urldate = {2015-09-21},
	publisher = {ACM Press},
	author = {Ernst, Neil A. and Bellomo, Stephany and Ozkaya, Ipek and Nord, Robert L. and Gorton, Ian},
	year = {2015},
	pages = {50--60}
}

@article{berenbach_technical_2014,
	title = {On {Technical} {Credit}},
	volume = {28},
	issn = {18770509},
	url = {https://doi.org/10.1016/j.procs.2014.03.062},
	doi = {10.1016/j.procs.2014.03.062},
	language = {en},
	urldate = {2015-09-21},
	journal = {Procedia Computer Science},
	author = {Berenbach, Brian},
	year = {2014},
	pages = {505--512}
}

@inproceedings{xiao_quantifying_2015,
	title = {Quantifying architectural debts},
	isbn = {978-1-4503-3675-8},
	url = {https://doi.org/10.1145/2786805.2803194},
	doi = {10.1145/2786805.2803194},
	language = {en},
	urldate = {2015-09-21},
	publisher = {ACM Press},
	author = {Xiao, Lu},
	year = {2015},
	pages = {1030--1033}
}

@article{foganholi_supporting_????,
	title = {Supporting technical debt cataloging with {TD}-{Tracker} tool},
	author = {Foganholi, Lucas Borante and Garcia, Rogério Eduardo and Eler, Danilo Medeiros and Correia, Ronaldo Celso Messias and Junior, Celso Olivete}
}

@inproceedings{holvitie_technical_2014,
	title = {Technical {Debt} and the {Effect} of {Agile} {Software} {Development} {Practices} on {It} - {An} {Industry} {Practitioner} {Survey}},
	isbn = {978-1-4799-6791-9},
	url = {https://doi.org/10.1109/MTD.2014.8},
	doi = {10.1109/MTD.2014.8},
	urldate = {2015-09-21},
	publisher = {IEEE},
	author = {Holvitie, Johannes and Leppanen, Ville and Hyrynsalmi, Sami},
	month = sep,
	year = {2014},
	pages = {35--42}
}

@article{ampatzoglou_financial_2015,
	title = {The financial aspect of managing technical debt: {A} systematic literature review},
	volume = {64},
	issn = {09505849},
	shorttitle = {The financial aspect of managing technical debt},
	url = {https://doi.org/10.1016/j.infsof.2015.04.001},
	doi = {10.1016/j.infsof.2015.04.001},
	language = {en},
	urldate = {2015-09-21},
	journal = {Information and Software Technology},
	author = {Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
	month = aug,
	year = {2015},
	pages = {52--73}
}

@incollection{jedlitschka_sources_2014,
	address = {Cham},
	title = {The {Sources} and {Approaches} to {Management} of {Technical} {Debt}: {A} {Case} {Study} of {Two} {Product} {Lines} in a {Middle}-{Size} {Finnish} {Software} {Company}},
	volume = {8892},
	isbn = {978-3-319-13834-3 978-3-319-13835-0},
	shorttitle = {The {Sources} and {Approaches} to {Management} of {Technical} {Debt}},
	url = {http://link.springer.com/10.1007/978-3-319-13835-0_7},
	doi = {10.1007/978-3-319-13835-0\_7},
	urldate = {2015-09-21},
	booktitle = {Product-{Focused} {Software} {Process} {Improvement}},
	publisher = {Springer International Publishing},
	author = {Yli-Huumo, Jesse and Maglyas, Andrey and Smolander, Kari},
	editor = {Jedlitschka, Andreas and Kuvaja, Pasi and Kuhrmann, Marco and Männistö, Tomi and Münch, Jürgen and Raatikainen, Mikko},
	year = {2014},
	pages = {93--107}
}

@inproceedings{alves_towards_2014,
	title = {Towards an {Ontology} of {Terms} on {Technical} {Debt}},
	isbn = {978-1-4799-6791-9},
	url = {https://doi.org/10.1109/MTD.2014.9},
	doi = {10.1109/MTD.2014.9},
	urldate = {2015-09-21},
	publisher = {IEEE},
	author = {Alves, Nicolli S.R. and Ribeiro, Leilane F. and Caires, Vivyane and Mendes, Thiago S. and Spinola, Rodrigo O.},
	month = sep,
	year = {2014},
	pages = {1--7}
}

@article{ampatzoglouestablishing,
  title={ESTABLISHING A FRAMEWORK FOR MANAGING INTEREST IN TECHNICAL DEBT},
  author={Ampatzoglou, Areti and Ampatzoglou, Apostolos and Avgeriou, Paris and Chatzigeorgiou, Alexander}
}

@article{falessi_towards_????,
	title = {Towards an {Open}-{Source} {Tool} for {Measuring} and {Visualizing} the {Interest} of {Technical} {Debt}},
	author = {Falessi, Davide and Reichel, Andreas}
}

@article{falessi_validating_2015,
	title = {Validating and {Prioritizing} {Quality} {Rules} for {Managing} {Techncial} {Debt}: {An} {Industrial} {Case} {Study}},
	journal = {MTD 2015-UNDER REVISION},
	author = {Falessi, Davide and Voegele, Alexander},
	year = {2015}
}

@article{tufano_when_????,
	title = {When and {Why} {Your} {Code} {Starts} to {Smell} {Bad}},
	author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys}
}

@article {kent_machine_1955,
	author = {Kent, Allen and Berry, Madeline M. and Luehrs, Fred U. and Perry, J. W.},
	title = {Machine literature searching VIII. Operational criteria for designing information retrieval systems},
	journal = {American Documentation},
	volume = {6},
	number = {2},
	publisher = {Wiley Subscription Services, Inc., A Wiley Company},
	issn = {1936-6108},
	url = {http://dx.doi.org/10.1002/asi.5090060209},
	doi = {10.1002/asi.5090060209},
	pages = {93--101},
	year = {1955},
}

@inproceedings{chatzigeorgiou_application_2006,
 author = {Chatzigeorgiou, Alexander and Tsantalis, Nikolaos and Stephanides, George},
 title = {Application of Graph Theory to OO Software Engineering},
 booktitle = {Proceedings of the 2006 International Workshop on Workshop on Interdisciplinary Software Engineering Research},
 series = {WISER '06},
 year = {2006},
 isbn = {1-59593-409-X},
 location = {Shanghai, China},
 pages = {29--36},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/1137661.1137669},
 doi = {10.1145/1137661.1137669},
 acmid = {1137669},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {"God" classes, clustering, design pattern detection, graph theory, scale-free}
}

@misc{noauthor_techlink_2017,
    title = {{Home} {\textbar} {TechLink}},
    shorttitle = {{TechLink}},
    url = {http://techlinkcenter.org/},
    urldate = {2017-02-01},
    journal = {{TechLink}},
    month = feb,
    year = {2017}
}

@misc{noauthor_cerl_2017,
    title = {{Construction} {Engineering} {Research} {Laboratory}},
    shorttitle = {{CERL}},
    url = {http://www.erdc.usace.army.mil/Locations/CERL/},
    urldate = {2017-02-01},
    journal = {Construction Engineering Research Laboratory},
    month = feb,
    year = {2017}
}

@misc{noauthor_sonarqube_2017,
	title = {{SonarQube} {\textbar} {Continous} {Code} {Quality}},
	shorttitle = {{SonarQube}},
	url = {http://www.sonarqube.org},
	urldate = {2017-02-01},
	journal = {Continous Code Quality {\textbar} SonarQube},
	month = feb,
	year = {2017}
}

@misc{noauthor_iso/iec_2011,
	title = {{ISO}/{IEC} 25010:2011 {Systems} and software engineering -- {Systems} and software {Quality} {REqurements} and {Evaluation} ({SQuaRE}) -- {System} and software quality models},
	url = {http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=35733},
	publisher = {International Standards Organization},
	year = {2011}
}

@misc{noauthor_iso/iec_2001,
	title = {{ISO}/{IEC} 9126-1:2001 {Software} {Engineering} -- {Product} {Quality} -- {Part} 1: {Quality} {Model}},
	shorttitle = {{ISO}/{IEC} 9126-1:2001},
	publisher = {International Organization for Standardization},
	month = jun,
	year = {2001}
}

@article{hovemeyer_finding_2004,
 author = {Hovemeyer, David and Pugh, William},
 title = {Finding Bugs is Easy},
 journal = {SIGPLAN Not.},
 issue_date = {December 2004},
 volume = {39},
 number = {12},
 month = dec,
 year = {2004},
 issn = {0362-1340},
 pages = {92--106},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/1052883.1052895},
 doi = {10.1145/1052883.1052895},
 acmid = {1052895},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@Inbook{ferenc_software_2014,
	author={Ferenc, Rudolf and Heged{\H{u}}s, P{\'e}ter and Gyim{\'o}thy, Tibor},
	editor={Mens, Tom and Serebrenik, Alexander and Cleve, Anthony},
	title={Software Product Quality Models},
	bookTitle={Evolving Software Systems},
	year={2014},
	publisher={Springer Berlin Heidelberg},
	address={Berlin, Heidelberg},
	pages={65--100},
	abstract={Both for software developers and managers it is crucial to have information about different aspects of the quality of their systems. This chapter gives a brief overview about the history of software product quality measurement, focusing on software maintainability, and the existing approaches and high-level models for characterizing software product quality. The most widely accepted and used practical maintainability models and the state-of-the-art works in the subject are introduced. These models play a very important role in software evolution by allowing to estimate future development costs, assess risks, or support management decisions. Based on objective aspects, the implementations of the most popular software maintainability models are compared and evaluated. The evaluation includes the Quality Index, SQALE, SQUALE, SIG, QUAMOCO, and Columbus Quality Model. The chapter presents the result of comparing the features and stability of the tools and the different models on a large number of open-source Java projects.},
	isbn={978-3-642-45398-4},
	doi={10.1007/978-3-642-45398-4_3},
	url={https://doi.org/10.1007/978-3-642-45398-4_3}
}

@TechReport{wagner_quamoco_2016,
  author={Wagner, Stephan and Klaus, Lochmann and Winter, Sebastian and Deissenboeck, Florian and Juergens, Elmar and Herrmannsdoerfer, Markus and Heinemann, Lars and Kl\"{a}s, Michael and Trendowicz, Adam and Heidrich, Jens and Ploesch, Reinhold and Goeb, Andreas and Koemer, Christian and Schoder, Korbinian and Streit, Jonathan and Schubert, Christian},
  title={The Quamoco Quality Meta-Model},
  institution={Institut f\"{u}r Informatik, Technische Universit\"{a}t M\"{u}nchen},
  year={2016},
}

@inproceedings{kuchar_easyminer_2015,
  author= {Vojir, Stanislav and Zeman, Vaclav and Kuchar, Jaroslav and Kliegr, Tomas},
  title={EasyMiner/R Preview: Towards a Web Interface for Association Rule Learning and Classification in R},
  booktitle={Proceedings of the RuleML 2015 Challenge, the Special Track on Rule-based Recommender Systems for the Web of Data, the Special Industry Track and the RuleML 2015 Doctoral Consortium hosted by the 9th International Web Rule Symposium (RuleML 2015), Berlin, Germany, August 2-5, 2015.},
  year={2015}
}

@article{han_mining_2000,
 author = {Han, Jiawei and Pei, Jian and Yin, Yiwen},
 title = {Mining Frequent Patterns Without Candidate Generation},
 journal = {SIGMOD Rec.},
 issue_date = {June 2000},
 volume = {29},
 number = {2},
 month = may,
 year = {2000},
 issn = {0163-5808},
 pages = {1--12},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/335191.335372},
 doi = {10.1145/335191.335372},
 acmid = {335372},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{wagner_operationalised_2015,
	title = {Operationalised product quality models and assessment: The Quamoco approach},
	journal = {Information and Software Technology},
	volume = {62},
	pages = {101--123},
	year = {2015},
	issn = {0950-5849},
	doi = {https://doi.org/10.1016/j.infsof.2015.02.009},
	url = {https://doi.org/10.1016/j.infsof.2015.02.009},
	author = {Stefan Wagner and Andreas Goeb and Lars Heinemann and Michael Kläs and Constanza Lampasona and Klaus Lochmann and Alois Mayr and Reinhold Plösch and Andreas Seidl and Jonathan Streit and Adam Trendowicz},
	keywords = {Quality model, Product quality, Quality assessment}
}

@article{barron_decision_1996,
	author = {Barron, F. Hutton and Barrett, Bruce E.},
	title = {Decision Quality Using Ranked Attribute Weights},
	journal = {Management Science},
	volume = {42},
	number = {11},
	pages = {1515-1523},
	year = {1996},
	doi = {10.1287/mnsc.42.11.1515},
	URL = {https://doi.org/10.1287/mnsc.42.11.1515},
}

@article{edwards_smarts_1994,
	title = {SMARTS and SMARTER: Improved Simple Methods for Multiattribute Utility Measurement},
	journal = {Organizational Behavior and Human Decision Processes},
	volume = {60},
	number = {3},
	pages = {306--325},
	year = {1994},
	issn = {0749-5978},
	doi = {https://doi.org/10.1006/obhd.1994.1087},
	url = {http://www.sciencedirect.com/science/article/pii/S0749597884710879},
	author = {Ward Edwards and F.Hutton Barron},
}

@book{juristo_basics_2001,
	address = {Boston, MA},
	title = {Basics of {Software} {Engineering} {Experimentation}},
	isbn = {978-1-4757-3304-4 1-4757-3304-6},
	url = {http://dx.doi.org/10.1007/978-1-4757-3304-4},
	language = {English},
	urldate = {2014-09-28},
	publisher = {Springer US},
	author = {Juristo, Natalia and Moreno, Ana M},
	year = {2001}
}

@INPROCEEDINGS{liu_wang_2006,
author={ {Hongbo Liu} and {Jiaxin Wang}},
booktitle={Advanced Int'l Conference on Telecommunications and Int'l Conference on Internet and Web Applications and Services (AICT-ICIW'06)},
title={A new way to enumerate cycles in graph},
year={2006},
volume={},
number={},
pages={57-57},
keywords={Graph theory;Vectors;Intelligent systems;Computer science;Topology;Communication systems;Telecommunication network reliability;Fault tolerant systems;Tree graphs;Search methods},
doi={10.1109/AICT-ICIW.2006.22},
ISSN={},
month={Feb},}

@INPROCEEDINGS{abdeen_2009,
author={H. {Abdeen} and S. {Ducasse} and H. {Sahraoui} and I. {Alloui}},
booktitle={2009 16th Working Conference on Reverse Engineering},
title={Automatic Package Coupling and Cycle Minimization},
year={2009},
volume={},
number={},
pages={103-112},
keywords={minimisation;object-oriented programming;reverse engineering;search problems;simulated annealing;software maintenance;software quality;automatic package coupling;cycle minimization;object-oriented software evaluation;software modularization quality;heuristic search-based approach;inter-package connectivity optimization;OO package structure;simulated annealing technique;software maintenance;reverse engineering;Packaging;Software quality;Design optimization;Software packages;Application software;Degradation;Software maintenance;Algorithm design and analysis;Software algorithms;Object oriented modeling},
doi={10.1109/WCRE.2009.13},
ISSN={1095-1350},
month={Oct},}

@incollection{peng_behavioral_2019,
	address = {Cham},
	title = {Behavioral {Evolution} of {Design} {Patterns}: {Understanding} 
{Software} {Reuse} {Through} the {Evolution} of {Pattern} {Behavior}},
	volume = {11602},
	isbn = {978-3-030-22887-3 978-3-030-22888-0},
	shorttitle = {Behavioral {Evolution} of {Design} {Patterns}},
	url = {http://link.springer.com/10.1007/978-3-030-22888-0_6},
	language = {en},
	urldate = {2019-12-11},
	booktitle = {Reuse in the {Big} {Data} {Era}},
	publisher = {Springer International Publishing},
	author = {Reimanis, Derek and Izurieta, Clemente},
	editor = {Peng, Xin and Ampatzoglou, Apostolos and Bhowmik, Tanmay},
	year = {2019},
	doi = {10.1007/978-3-030-22888-0_6},
	pages = {77--93},
}

@book{wieringa_design_2014,
	address = {Berlin New York Dordrecht},
	title = {Design science methodology for information systems and software 
engineering},
	isbn = {978-3-662-43839-8 978-3-662-43838-1 978-3-662-52446-6},
	language = {eng},
	publisher = {Springer},
	author = {Wieringa, Roel},
	year = {2014},
	note = {OCLC: 931607131},
	file = {Table of Contents 
PDF:/home/grifisaa/Zotero/storage/HDGFCTNP/Wieringa - 2014 - Design science 
methodology for information systems.pdf:application/pdf}
}

@article{jonckheere_distribution-free_1954,
	title = {A {Distribution}-{Free} k-{Sample} {Test} {Against} {Ordered} 
{Alternatives}},
	volume = {41},
	issn = {00063444},
	url = {https://www.jstor.org/stable/2333011?origin=crossref},
	doi = {10.2307/2333011},
	number = {1/2},
	urldate = {2019-09-30},
	journal = {Biometrika},
	author = {Jonckheere, A. R.},
	month = jun,
	year = {1954},
	pages = {133}
}
